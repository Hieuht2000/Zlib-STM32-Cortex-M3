
zlib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1cc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003620  0800d308  0800d308  0001d308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010928  08010928  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010928  08010928  00020928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010930  08010930  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010930  08010930  00020930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010934  08010934  00020934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08010938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033f0  200000c4  080109fc  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034b4  080109fc  000334b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e9b  00000000  00000000  000300ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003277  00000000  00000000  00043f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00047200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  00048538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a05f  00000000  00000000  00049708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c65  00000000  00000000  00063767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009361a  00000000  00000000  0007c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f9e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa4  00000000  00000000  0010fa38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000c4 	.word	0x200000c4
 8000158:	00000000 	.word	0x00000000
 800015c:	0800d2f0 	.word	0x0800d2f0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000c8 	.word	0x200000c8
 8000178:	0800d2f0 	.word	0x0800d2f0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b976 	b.w	8000490 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	4688      	mov	r8, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14d      	bne.n	8000268 <__udivmoddi4+0xac>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d968      	bls.n	80002a4 <__udivmoddi4+0xe8>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b152      	cbz	r2, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa01 f302 	lsl.w	r3, r1, r2
 80001dc:	f1c2 0120 	rsb	r1, r2, #32
 80001e0:	fa20 f101 	lsr.w	r1, r0, r1
 80001e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e8:	ea41 0803 	orr.w	r8, r1, r3
 80001ec:	4094      	lsls	r4, r2
 80001ee:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001f2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001f6:	fa1f fe8c 	uxth.w	lr, ip
 80001fa:	fb01 8817 	mls	r8, r1, r7, r8
 80001fe:	fb07 f00e 	mul.w	r0, r7, lr
 8000202:	0c23      	lsrs	r3, r4, #16
 8000204:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000208:	4298      	cmp	r0, r3
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0303 	adds.w	r3, ip, r3
 8000210:	f107 35ff 	add.w	r5, r7, #4294967295
 8000214:	f080 811e 	bcs.w	8000454 <__udivmoddi4+0x298>
 8000218:	4298      	cmp	r0, r3
 800021a:	f240 811b 	bls.w	8000454 <__udivmoddi4+0x298>
 800021e:	3f02      	subs	r7, #2
 8000220:	4463      	add	r3, ip
 8000222:	1a1b      	subs	r3, r3, r0
 8000224:	fbb3 f0f1 	udiv	r0, r3, r1
 8000228:	fb01 3310 	mls	r3, r1, r0, r3
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000236:	45a6      	cmp	lr, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000242:	f080 8109 	bcs.w	8000458 <__udivmoddi4+0x29c>
 8000246:	45a6      	cmp	lr, r4
 8000248:	f240 8106 	bls.w	8000458 <__udivmoddi4+0x29c>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	2100      	movs	r1, #0
 8000252:	eba4 040e 	sub.w	r4, r4, lr
 8000256:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800025a:	b11e      	cbz	r6, 8000264 <__udivmoddi4+0xa8>
 800025c:	2300      	movs	r3, #0
 800025e:	40d4      	lsrs	r4, r2
 8000260:	e9c6 4300 	strd	r4, r3, [r6]
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	428b      	cmp	r3, r1
 800026a:	d908      	bls.n	800027e <__udivmoddi4+0xc2>
 800026c:	2e00      	cmp	r6, #0
 800026e:	f000 80ee 	beq.w	800044e <__udivmoddi4+0x292>
 8000272:	2100      	movs	r1, #0
 8000274:	e9c6 0500 	strd	r0, r5, [r6]
 8000278:	4608      	mov	r0, r1
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	fab3 f183 	clz	r1, r3
 8000282:	2900      	cmp	r1, #0
 8000284:	d14a      	bne.n	800031c <__udivmoddi4+0x160>
 8000286:	42ab      	cmp	r3, r5
 8000288:	d302      	bcc.n	8000290 <__udivmoddi4+0xd4>
 800028a:	4282      	cmp	r2, r0
 800028c:	f200 80fc 	bhi.w	8000488 <__udivmoddi4+0x2cc>
 8000290:	1a84      	subs	r4, r0, r2
 8000292:	eb65 0303 	sbc.w	r3, r5, r3
 8000296:	2001      	movs	r0, #1
 8000298:	4698      	mov	r8, r3
 800029a:	2e00      	cmp	r6, #0
 800029c:	d0e2      	beq.n	8000264 <__udivmoddi4+0xa8>
 800029e:	e9c6 4800 	strd	r4, r8, [r6]
 80002a2:	e7df      	b.n	8000264 <__udivmoddi4+0xa8>
 80002a4:	b902      	cbnz	r2, 80002a8 <__udivmoddi4+0xec>
 80002a6:	deff      	udf	#255	; 0xff
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	f040 8091 	bne.w	80003d4 <__udivmoddi4+0x218>
 80002b2:	eba1 000c 	sub.w	r0, r1, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002bc:	fa1f fe8c 	uxth.w	lr, ip
 80002c0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002c4:	fb07 0013 	mls	r0, r7, r3, r0
 80002c8:	0c25      	lsrs	r5, r4, #16
 80002ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ce:	fb0e f003 	mul.w	r0, lr, r3
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0x12c>
 80002d6:	eb1c 0505 	adds.w	r5, ip, r5
 80002da:	f103 38ff 	add.w	r8, r3, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x12a>
 80002e0:	42a8      	cmp	r0, r5
 80002e2:	f200 80ce 	bhi.w	8000482 <__udivmoddi4+0x2c6>
 80002e6:	4643      	mov	r3, r8
 80002e8:	1a2d      	subs	r5, r5, r0
 80002ea:	fbb5 f0f7 	udiv	r0, r5, r7
 80002ee:	fb07 5510 	mls	r5, r7, r0, r5
 80002f2:	fb0e fe00 	mul.w	lr, lr, r0
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002fc:	45a6      	cmp	lr, r4
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0x156>
 8000300:	eb1c 0404 	adds.w	r4, ip, r4
 8000304:	f100 35ff 	add.w	r5, r0, #4294967295
 8000308:	d202      	bcs.n	8000310 <__udivmoddi4+0x154>
 800030a:	45a6      	cmp	lr, r4
 800030c:	f200 80b6 	bhi.w	800047c <__udivmoddi4+0x2c0>
 8000310:	4628      	mov	r0, r5
 8000312:	eba4 040e 	sub.w	r4, r4, lr
 8000316:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800031a:	e79e      	b.n	800025a <__udivmoddi4+0x9e>
 800031c:	f1c1 0720 	rsb	r7, r1, #32
 8000320:	408b      	lsls	r3, r1
 8000322:	fa22 fc07 	lsr.w	ip, r2, r7
 8000326:	ea4c 0c03 	orr.w	ip, ip, r3
 800032a:	fa25 fa07 	lsr.w	sl, r5, r7
 800032e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000332:	fbba f8f9 	udiv	r8, sl, r9
 8000336:	fa20 f307 	lsr.w	r3, r0, r7
 800033a:	fb09 aa18 	mls	sl, r9, r8, sl
 800033e:	408d      	lsls	r5, r1
 8000340:	fa1f fe8c 	uxth.w	lr, ip
 8000344:	431d      	orrs	r5, r3
 8000346:	fa00 f301 	lsl.w	r3, r0, r1
 800034a:	fb08 f00e 	mul.w	r0, r8, lr
 800034e:	0c2c      	lsrs	r4, r5, #16
 8000350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000354:	42a0      	cmp	r0, r4
 8000356:	fa02 f201 	lsl.w	r2, r2, r1
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x1b8>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f108 3aff 	add.w	sl, r8, #4294967295
 8000364:	f080 8088 	bcs.w	8000478 <__udivmoddi4+0x2bc>
 8000368:	42a0      	cmp	r0, r4
 800036a:	f240 8085 	bls.w	8000478 <__udivmoddi4+0x2bc>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	4464      	add	r4, ip
 8000374:	1a24      	subs	r4, r4, r0
 8000376:	fbb4 f0f9 	udiv	r0, r4, r9
 800037a:	fb09 4410 	mls	r4, r9, r0, r4
 800037e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000382:	b2ad      	uxth	r5, r5
 8000384:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x1e2>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 35ff 	add.w	r5, r0, #4294967295
 8000394:	d26c      	bcs.n	8000470 <__udivmoddi4+0x2b4>
 8000396:	45a6      	cmp	lr, r4
 8000398:	d96a      	bls.n	8000470 <__udivmoddi4+0x2b4>
 800039a:	3802      	subs	r0, #2
 800039c:	4464      	add	r4, ip
 800039e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a2:	fba0 9502 	umull	r9, r5, r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	42ac      	cmp	r4, r5
 80003ac:	46c8      	mov	r8, r9
 80003ae:	46ae      	mov	lr, r5
 80003b0:	d356      	bcc.n	8000460 <__udivmoddi4+0x2a4>
 80003b2:	d053      	beq.n	800045c <__udivmoddi4+0x2a0>
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d069      	beq.n	800048c <__udivmoddi4+0x2d0>
 80003b8:	ebb3 0208 	subs.w	r2, r3, r8
 80003bc:	eb64 040e 	sbc.w	r4, r4, lr
 80003c0:	fa22 f301 	lsr.w	r3, r2, r1
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	431f      	orrs	r7, r3
 80003ca:	40cc      	lsrs	r4, r1
 80003cc:	e9c6 7400 	strd	r7, r4, [r6]
 80003d0:	2100      	movs	r1, #0
 80003d2:	e747      	b.n	8000264 <__udivmoddi4+0xa8>
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	f1c2 0120 	rsb	r1, r2, #32
 80003dc:	fa25 f301 	lsr.w	r3, r5, r1
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa20 f101 	lsr.w	r1, r0, r1
 80003e8:	4095      	lsls	r5, r2
 80003ea:	430d      	orrs	r5, r1
 80003ec:	fbb3 f1f7 	udiv	r1, r3, r7
 80003f0:	fb07 3311 	mls	r3, r7, r1, r3
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	0c28      	lsrs	r0, r5, #16
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	fb01 f30e 	mul.w	r3, r1, lr
 8000402:	4283      	cmp	r3, r0
 8000404:	fa04 f402 	lsl.w	r4, r4, r2
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x260>
 800040a:	eb1c 0000 	adds.w	r0, ip, r0
 800040e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000412:	d22f      	bcs.n	8000474 <__udivmoddi4+0x2b8>
 8000414:	4283      	cmp	r3, r0
 8000416:	d92d      	bls.n	8000474 <__udivmoddi4+0x2b8>
 8000418:	3902      	subs	r1, #2
 800041a:	4460      	add	r0, ip
 800041c:	1ac0      	subs	r0, r0, r3
 800041e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000422:	fb07 0013 	mls	r0, r7, r3, r0
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800042c:	fb03 f00e 	mul.w	r0, r3, lr
 8000430:	42a8      	cmp	r0, r5
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x28a>
 8000434:	eb1c 0505 	adds.w	r5, ip, r5
 8000438:	f103 38ff 	add.w	r8, r3, #4294967295
 800043c:	d216      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800043e:	42a8      	cmp	r0, r5
 8000440:	d914      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000442:	3b02      	subs	r3, #2
 8000444:	4465      	add	r5, ip
 8000446:	1a28      	subs	r0, r5, r0
 8000448:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044c:	e738      	b.n	80002c0 <__udivmoddi4+0x104>
 800044e:	4631      	mov	r1, r6
 8000450:	4630      	mov	r0, r6
 8000452:	e707      	b.n	8000264 <__udivmoddi4+0xa8>
 8000454:	462f      	mov	r7, r5
 8000456:	e6e4      	b.n	8000222 <__udivmoddi4+0x66>
 8000458:	4618      	mov	r0, r3
 800045a:	e6f9      	b.n	8000250 <__udivmoddi4+0x94>
 800045c:	454b      	cmp	r3, r9
 800045e:	d2a9      	bcs.n	80003b4 <__udivmoddi4+0x1f8>
 8000460:	ebb9 0802 	subs.w	r8, r9, r2
 8000464:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000468:	3801      	subs	r0, #1
 800046a:	e7a3      	b.n	80003b4 <__udivmoddi4+0x1f8>
 800046c:	4643      	mov	r3, r8
 800046e:	e7ea      	b.n	8000446 <__udivmoddi4+0x28a>
 8000470:	4628      	mov	r0, r5
 8000472:	e794      	b.n	800039e <__udivmoddi4+0x1e2>
 8000474:	4641      	mov	r1, r8
 8000476:	e7d1      	b.n	800041c <__udivmoddi4+0x260>
 8000478:	46d0      	mov	r8, sl
 800047a:	e77b      	b.n	8000374 <__udivmoddi4+0x1b8>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	e747      	b.n	8000312 <__udivmoddi4+0x156>
 8000482:	3b02      	subs	r3, #2
 8000484:	4465      	add	r5, ip
 8000486:	e72f      	b.n	80002e8 <__udivmoddi4+0x12c>
 8000488:	4608      	mov	r0, r1
 800048a:	e706      	b.n	800029a <__udivmoddi4+0xde>
 800048c:	4631      	mov	r1, r6
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0xa8>

08000490 <__aeabi_idiv0>:
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop

08000494 <adler32>:
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
 8000494:	b480      	push	{r7}
 8000496:	b087      	sub	sp, #28
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	0c1b      	lsrs	r3, r3, #16
 80004a4:	617b      	str	r3, [r7, #20]
    adler &= 0xffff;
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	60fb      	str	r3, [r7, #12]

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d122      	bne.n	80004f8 <adler32+0x64>
        adler += buf[0];
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4413      	add	r3, r2
 80004bc:	60fb      	str	r3, [r7, #12]
        if (adler >= BASE)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d904      	bls.n	80004d2 <adler32+0x3e>
            adler -= BASE;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80004ce:	3bf1      	subs	r3, #241	; 0xf1
 80004d0:	60fb      	str	r3, [r7, #12]
        sum2 += adler;
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4413      	add	r3, r2
 80004d8:	617b      	str	r3, [r7, #20]
        if (sum2 >= BASE)
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d904      	bls.n	80004ee <adler32+0x5a>
            sum2 -= BASE;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80004ea:	3bf1      	subs	r3, #241	; 0xf1
 80004ec:	617b      	str	r3, [r7, #20]
        return adler | (sum2 << 16);
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	041a      	lsls	r2, r3, #16
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	e202      	b.n	80008fe <adler32+0x46a>
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d101      	bne.n	8000502 <adler32+0x6e>
        return 1L;
 80004fe:	2301      	movs	r3, #1
 8000500:	e1fd      	b.n	80008fe <adler32+0x46a>

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2b0f      	cmp	r3, #15
 8000506:	f200 8106 	bhi.w	8000716 <adler32+0x282>
        while (len--) {
 800050a:	e00b      	b.n	8000524 <adler32+0x90>
            adler += *buf++;
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	4413      	add	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]
            sum2 += adler;
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4413      	add	r3, r2
 8000522:	617b      	str	r3, [r7, #20]
        while (len--) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	1e5a      	subs	r2, r3, #1
 8000528:	607a      	str	r2, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d1ee      	bne.n	800050c <adler32+0x78>
        }
        if (adler >= BASE)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000534:	4293      	cmp	r3, r2
 8000536:	d904      	bls.n	8000542 <adler32+0xae>
            adler -= BASE;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800053e:	3bf1      	subs	r3, #241	; 0xf1
 8000540:	60fb      	str	r3, [r7, #12]
        MOD28(sum2);            /* only added so many BASE's */
 8000542:	6979      	ldr	r1, [r7, #20]
 8000544:	4b79      	ldr	r3, [pc, #484]	; (800072c <adler32+0x298>)
 8000546:	fba3 2301 	umull	r2, r3, r3, r1
 800054a:	0bda      	lsrs	r2, r3, #15
 800054c:	4613      	mov	r3, r2
 800054e:	031b      	lsls	r3, r3, #12
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	4413      	add	r3, r2
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	617b      	str	r3, [r7, #20]
        return adler | (sum2 << 16);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	041a      	lsls	r2, r3, #16
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4313      	orrs	r3, r2
 8000562:	e1cc      	b.n	80008fe <adler32+0x46a>
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
        len -= NMAX;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f5a3 53ad 	sub.w	r3, r3, #5536	; 0x15a0
 800056a:	3b10      	subs	r3, #16
 800056c:	607b      	str	r3, [r7, #4]
        n = NMAX / 16;          /* NMAX is divisible by 16 */
 800056e:	f240 135b 	movw	r3, #347	; 0x15b
 8000572:	613b      	str	r3, [r7, #16]
        do {
            DO16(buf);          /* 16 sums unrolled */
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	3301      	adds	r3, #1
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	4413      	add	r3, r2
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	3302      	adds	r3, #2
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461a      	mov	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	4413      	add	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4413      	add	r3, r2
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	3303      	adds	r3, #3
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4413      	add	r3, r2
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3304      	adds	r3, #4
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	4413      	add	r3, r2
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	3305      	adds	r3, #5
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	3306      	adds	r3, #6
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	3307      	adds	r3, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	697a      	ldr	r2, [r7, #20]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3308      	adds	r3, #8
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4413      	add	r3, r2
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3309      	adds	r3, #9
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	461a      	mov	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4413      	add	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	330a      	adds	r3, #10
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	4413      	add	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	697a      	ldr	r2, [r7, #20]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	330b      	adds	r3, #11
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	697a      	ldr	r2, [r7, #20]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	330c      	adds	r3, #12
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4413      	add	r3, r2
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	330d      	adds	r3, #13
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	330e      	adds	r3, #14
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4413      	add	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	330f      	adds	r3, #15
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	617b      	str	r3, [r7, #20]
            buf += 16;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	3310      	adds	r3, #16
 80006d6:	60bb      	str	r3, [r7, #8]
        } while (--n);
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	3b01      	subs	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f47f af47 	bne.w	8000574 <adler32+0xe0>
        MOD(adler);
 80006e6:	68f9      	ldr	r1, [r7, #12]
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <adler32+0x298>)
 80006ea:	fba3 2301 	umull	r2, r3, r3, r1
 80006ee:	0bda      	lsrs	r2, r3, #15
 80006f0:	4613      	mov	r3, r2
 80006f2:	031b      	lsls	r3, r3, #12
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	4413      	add	r3, r2
 80006fa:	1acb      	subs	r3, r1, r3
 80006fc:	60fb      	str	r3, [r7, #12]
        MOD(sum2);
 80006fe:	6979      	ldr	r1, [r7, #20]
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <adler32+0x298>)
 8000702:	fba3 2301 	umull	r2, r3, r3, r1
 8000706:	0bda      	lsrs	r2, r3, #15
 8000708:	4613      	mov	r3, r2
 800070a:	031b      	lsls	r3, r3, #12
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	4413      	add	r3, r2
 8000712:	1acb      	subs	r3, r1, r3
 8000714:	617b      	str	r3, [r7, #20]
    while (len >= NMAX) {
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f241 52af 	movw	r2, #5551	; 0x15af
 800071c:	4293      	cmp	r3, r2
 800071e:	f63f af21 	bhi.w	8000564 <adler32+0xd0>
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f000 80e6 	beq.w	80008f6 <adler32+0x462>
        while (len >= 16) {
 800072a:	e0b6      	b.n	800089a <adler32+0x406>
 800072c:	80078071 	.word	0x80078071
            len -= 16;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b10      	subs	r3, #16
 8000734:	607b      	str	r3, [r7, #4]
            DO16(buf);
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4413      	add	r3, r2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	3302      	adds	r3, #2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	461a      	mov	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	3303      	adds	r3, #3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	697a      	ldr	r2, [r7, #20]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	3304      	adds	r3, #4
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3305      	adds	r3, #5
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4413      	add	r3, r2
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	3306      	adds	r3, #6
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	3307      	adds	r3, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	4413      	add	r3, r2
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	3308      	adds	r3, #8
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4413      	add	r3, r2
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3309      	adds	r3, #9
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4413      	add	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4413      	add	r3, r2
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	330a      	adds	r3, #10
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	330b      	adds	r3, #11
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4413      	add	r3, r2
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	330c      	adds	r3, #12
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4413      	add	r3, r2
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	330d      	adds	r3, #13
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4413      	add	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	330e      	adds	r3, #14
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	330f      	adds	r3, #15
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	4413      	add	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4413      	add	r3, r2
 8000892:	617b      	str	r3, [r7, #20]
            buf += 16;
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	3310      	adds	r3, #16
 8000898:	60bb      	str	r3, [r7, #8]
        while (len >= 16) {
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	f63f af47 	bhi.w	8000730 <adler32+0x29c>
        }
        while (len--) {
 80008a2:	e00b      	b.n	80008bc <adler32+0x428>
            adler += *buf++;
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
            sum2 += adler;
 80008b4:	697a      	ldr	r2, [r7, #20]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4413      	add	r3, r2
 80008ba:	617b      	str	r3, [r7, #20]
        while (len--) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1ee      	bne.n	80008a4 <adler32+0x410>
        }
        MOD(adler);
 80008c6:	68f9      	ldr	r1, [r7, #12]
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <adler32+0x474>)
 80008ca:	fba3 2301 	umull	r2, r3, r3, r1
 80008ce:	0bda      	lsrs	r2, r3, #15
 80008d0:	4613      	mov	r3, r2
 80008d2:	031b      	lsls	r3, r3, #12
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	4413      	add	r3, r2
 80008da:	1acb      	subs	r3, r1, r3
 80008dc:	60fb      	str	r3, [r7, #12]
        MOD(sum2);
 80008de:	6979      	ldr	r1, [r7, #20]
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <adler32+0x474>)
 80008e2:	fba3 2301 	umull	r2, r3, r3, r1
 80008e6:	0bda      	lsrs	r2, r3, #15
 80008e8:	4613      	mov	r3, r2
 80008ea:	031b      	lsls	r3, r3, #12
 80008ec:	1a9b      	subs	r3, r3, r2
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	4413      	add	r3, r2
 80008f2:	1acb      	subs	r3, r1, r3
 80008f4:	617b      	str	r3, [r7, #20]
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	041a      	lsls	r2, r3, #16
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4313      	orrs	r3, r2
}
 80008fe:	4618      	mov	r0, r3
 8000900:	371c      	adds	r7, #28
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	80078071 	.word	0x80078071

0800090c <crc32>:
/* ========================================================================= */
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    uInt len;
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
    if (buf == Z_NULL) return 0UL;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <crc32+0x16>
 800091e:	2300      	movs	r3, #0
 8000920:	e013      	b.n	800094a <crc32+0x3e>

#ifdef BYFOUR
    if (sizeof(void *) == sizeof(ptrdiff_t)) {
        z_crc_t endian;

        endian = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
        if (*((unsigned char *)(&endian)))
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d006      	beq.n	800093e <crc32+0x32>
            return crc32_little(crc, buf, len);
 8000930:	687a      	ldr	r2, [r7, #4]
 8000932:	68b9      	ldr	r1, [r7, #8]
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f000 f80d 	bl	8000954 <crc32_little>
 800093a:	4603      	mov	r3, r0
 800093c:	e005      	b.n	800094a <crc32+0x3e>
        else
            return crc32_big(crc, buf, len);
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 f976 	bl	8000c34 <crc32_big>
 8000948:	4603      	mov	r3, r0
    }
    if (len) do {
        DO1;
    } while (--len);
    return crc ^ 0xffffffffUL;
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <crc32_little>:
/* ========================================================================= */
local unsigned long crc32_little(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    unsigned len;
{
 8000954:	b4b0      	push	{r4, r5, r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
    register z_crc_t c;
    register const z_crc_t FAR *buf4;

    c = (z_crc_t)crc;
 8000960:	68fc      	ldr	r4, [r7, #12]
    c = ~c;
 8000962:	43e4      	mvns	r4, r4
    while (len && ((ptrdiff_t)buf & 3)) {
 8000964:	e00e      	b.n	8000984 <crc32_little+0x30>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	60ba      	str	r2, [r7, #8]
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4063      	eors	r3, r4
 8000970:	b2db      	uxtb	r3, r3
 8000972:	4aaf      	ldr	r2, [pc, #700]	; (8000c30 <crc32_little+0x2dc>)
 8000974:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000978:	0a23      	lsrs	r3, r4, #8
 800097a:	ea82 0403 	eor.w	r4, r2, r3
        len--;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3b01      	subs	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
    while (len && ((ptrdiff_t)buf & 3)) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <crc32_little+0x40>
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1e8      	bne.n	8000966 <crc32_little+0x12>
    }

    buf4 = (const z_crc_t FAR *)(const void FAR *)buf;
 8000994:	68bd      	ldr	r5, [r7, #8]
    while (len >= 32) {
 8000996:	e102      	b.n	8000b9e <crc32_little+0x24a>
        DOLIT32;
 8000998:	462b      	mov	r3, r5
 800099a:	1d1d      	adds	r5, r3, #4
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	405c      	eors	r4, r3
 80009a0:	b2e3      	uxtb	r3, r4
 80009a2:	4aa3      	ldr	r2, [pc, #652]	; (8000c30 <crc32_little+0x2dc>)
 80009a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80009a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ac:	0a23      	lsrs	r3, r4, #8
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	499f      	ldr	r1, [pc, #636]	; (8000c30 <crc32_little+0x2dc>)
 80009b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ba:	405a      	eors	r2, r3
 80009bc:	0c23      	lsrs	r3, r4, #16
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	499b      	ldr	r1, [pc, #620]	; (8000c30 <crc32_little+0x2dc>)
 80009c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ca:	405a      	eors	r2, r3
 80009cc:	0e23      	lsrs	r3, r4, #24
 80009ce:	4998      	ldr	r1, [pc, #608]	; (8000c30 <crc32_little+0x2dc>)
 80009d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009d4:	ea82 0403 	eor.w	r4, r2, r3
 80009d8:	462b      	mov	r3, r5
 80009da:	1d1d      	adds	r5, r3, #4
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	405c      	eors	r4, r3
 80009e0:	b2e3      	uxtb	r3, r4
 80009e2:	4a93      	ldr	r2, [pc, #588]	; (8000c30 <crc32_little+0x2dc>)
 80009e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80009e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ec:	0a23      	lsrs	r3, r4, #8
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	498f      	ldr	r1, [pc, #572]	; (8000c30 <crc32_little+0x2dc>)
 80009f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80009f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009fa:	405a      	eors	r2, r3
 80009fc:	0c23      	lsrs	r3, r4, #16
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	498b      	ldr	r1, [pc, #556]	; (8000c30 <crc32_little+0x2dc>)
 8000a02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a0a:	405a      	eors	r2, r3
 8000a0c:	0e23      	lsrs	r3, r4, #24
 8000a0e:	4988      	ldr	r1, [pc, #544]	; (8000c30 <crc32_little+0x2dc>)
 8000a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a14:	ea82 0403 	eor.w	r4, r2, r3
 8000a18:	462b      	mov	r3, r5
 8000a1a:	1d1d      	adds	r5, r3, #4
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	405c      	eors	r4, r3
 8000a20:	b2e3      	uxtb	r3, r4
 8000a22:	4a83      	ldr	r2, [pc, #524]	; (8000c30 <crc32_little+0x2dc>)
 8000a24:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a2c:	0a23      	lsrs	r3, r4, #8
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	497f      	ldr	r1, [pc, #508]	; (8000c30 <crc32_little+0x2dc>)
 8000a32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a3a:	405a      	eors	r2, r3
 8000a3c:	0c23      	lsrs	r3, r4, #16
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	497b      	ldr	r1, [pc, #492]	; (8000c30 <crc32_little+0x2dc>)
 8000a42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4a:	405a      	eors	r2, r3
 8000a4c:	0e23      	lsrs	r3, r4, #24
 8000a4e:	4978      	ldr	r1, [pc, #480]	; (8000c30 <crc32_little+0x2dc>)
 8000a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a54:	ea82 0403 	eor.w	r4, r2, r3
 8000a58:	462b      	mov	r3, r5
 8000a5a:	1d1d      	adds	r5, r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	405c      	eors	r4, r3
 8000a60:	b2e3      	uxtb	r3, r4
 8000a62:	4a73      	ldr	r2, [pc, #460]	; (8000c30 <crc32_little+0x2dc>)
 8000a64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000a68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6c:	0a23      	lsrs	r3, r4, #8
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	496f      	ldr	r1, [pc, #444]	; (8000c30 <crc32_little+0x2dc>)
 8000a72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a7a:	405a      	eors	r2, r3
 8000a7c:	0c23      	lsrs	r3, r4, #16
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	496b      	ldr	r1, [pc, #428]	; (8000c30 <crc32_little+0x2dc>)
 8000a82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a8a:	405a      	eors	r2, r3
 8000a8c:	0e23      	lsrs	r3, r4, #24
 8000a8e:	4968      	ldr	r1, [pc, #416]	; (8000c30 <crc32_little+0x2dc>)
 8000a90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a94:	ea82 0403 	eor.w	r4, r2, r3
 8000a98:	462b      	mov	r3, r5
 8000a9a:	1d1d      	adds	r5, r3, #4
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	405c      	eors	r4, r3
 8000aa0:	b2e3      	uxtb	r3, r4
 8000aa2:	4a63      	ldr	r2, [pc, #396]	; (8000c30 <crc32_little+0x2dc>)
 8000aa4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aac:	0a23      	lsrs	r3, r4, #8
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	495f      	ldr	r1, [pc, #380]	; (8000c30 <crc32_little+0x2dc>)
 8000ab2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ab6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aba:	405a      	eors	r2, r3
 8000abc:	0c23      	lsrs	r3, r4, #16
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	495b      	ldr	r1, [pc, #364]	; (8000c30 <crc32_little+0x2dc>)
 8000ac2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aca:	405a      	eors	r2, r3
 8000acc:	0e23      	lsrs	r3, r4, #24
 8000ace:	4958      	ldr	r1, [pc, #352]	; (8000c30 <crc32_little+0x2dc>)
 8000ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ad4:	ea82 0403 	eor.w	r4, r2, r3
 8000ad8:	462b      	mov	r3, r5
 8000ada:	1d1d      	adds	r5, r3, #4
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	405c      	eors	r4, r3
 8000ae0:	b2e3      	uxtb	r3, r4
 8000ae2:	4a53      	ldr	r2, [pc, #332]	; (8000c30 <crc32_little+0x2dc>)
 8000ae4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aec:	0a23      	lsrs	r3, r4, #8
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	494f      	ldr	r1, [pc, #316]	; (8000c30 <crc32_little+0x2dc>)
 8000af2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000af6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000afa:	405a      	eors	r2, r3
 8000afc:	0c23      	lsrs	r3, r4, #16
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	494b      	ldr	r1, [pc, #300]	; (8000c30 <crc32_little+0x2dc>)
 8000b02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b0a:	405a      	eors	r2, r3
 8000b0c:	0e23      	lsrs	r3, r4, #24
 8000b0e:	4948      	ldr	r1, [pc, #288]	; (8000c30 <crc32_little+0x2dc>)
 8000b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b14:	ea82 0403 	eor.w	r4, r2, r3
 8000b18:	462b      	mov	r3, r5
 8000b1a:	1d1d      	adds	r5, r3, #4
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	405c      	eors	r4, r3
 8000b20:	b2e3      	uxtb	r3, r4
 8000b22:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <crc32_little+0x2dc>)
 8000b24:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b2c:	0a23      	lsrs	r3, r4, #8
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	493f      	ldr	r1, [pc, #252]	; (8000c30 <crc32_little+0x2dc>)
 8000b32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b3a:	405a      	eors	r2, r3
 8000b3c:	0c23      	lsrs	r3, r4, #16
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	493b      	ldr	r1, [pc, #236]	; (8000c30 <crc32_little+0x2dc>)
 8000b42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b4a:	405a      	eors	r2, r3
 8000b4c:	0e23      	lsrs	r3, r4, #24
 8000b4e:	4938      	ldr	r1, [pc, #224]	; (8000c30 <crc32_little+0x2dc>)
 8000b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b54:	ea82 0403 	eor.w	r4, r2, r3
 8000b58:	462b      	mov	r3, r5
 8000b5a:	1d1d      	adds	r5, r3, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	405c      	eors	r4, r3
 8000b60:	b2e3      	uxtb	r3, r4
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <crc32_little+0x2dc>)
 8000b64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b6c:	0a23      	lsrs	r3, r4, #8
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	492f      	ldr	r1, [pc, #188]	; (8000c30 <crc32_little+0x2dc>)
 8000b72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b7a:	405a      	eors	r2, r3
 8000b7c:	0c23      	lsrs	r3, r4, #16
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	492b      	ldr	r1, [pc, #172]	; (8000c30 <crc32_little+0x2dc>)
 8000b82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b8a:	405a      	eors	r2, r3
 8000b8c:	0e23      	lsrs	r3, r4, #24
 8000b8e:	4928      	ldr	r1, [pc, #160]	; (8000c30 <crc32_little+0x2dc>)
 8000b90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b94:	ea82 0403 	eor.w	r4, r2, r3
        len -= 32;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b20      	subs	r3, #32
 8000b9c:	607b      	str	r3, [r7, #4]
    while (len >= 32) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b1f      	cmp	r3, #31
 8000ba2:	f63f aef9 	bhi.w	8000998 <crc32_little+0x44>
    }
    while (len >= 4) {
 8000ba6:	e022      	b.n	8000bee <crc32_little+0x29a>
        DOLIT4;
 8000ba8:	462b      	mov	r3, r5
 8000baa:	1d1d      	adds	r5, r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	405c      	eors	r4, r3
 8000bb0:	b2e3      	uxtb	r3, r4
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <crc32_little+0x2dc>)
 8000bb4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000bb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bbc:	0a23      	lsrs	r3, r4, #8
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	491b      	ldr	r1, [pc, #108]	; (8000c30 <crc32_little+0x2dc>)
 8000bc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bca:	405a      	eors	r2, r3
 8000bcc:	0c23      	lsrs	r3, r4, #16
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4917      	ldr	r1, [pc, #92]	; (8000c30 <crc32_little+0x2dc>)
 8000bd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000bd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bda:	405a      	eors	r2, r3
 8000bdc:	0e23      	lsrs	r3, r4, #24
 8000bde:	4914      	ldr	r1, [pc, #80]	; (8000c30 <crc32_little+0x2dc>)
 8000be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be4:	ea82 0403 	eor.w	r4, r2, r3
        len -= 4;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b04      	subs	r3, #4
 8000bec:	607b      	str	r3, [r7, #4]
    while (len >= 4) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d8d9      	bhi.n	8000ba8 <crc32_little+0x254>
    }
    buf = (const unsigned char FAR *)buf4;
 8000bf4:	60bd      	str	r5, [r7, #8]

    if (len) do {
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d011      	beq.n	8000c20 <crc32_little+0x2cc>
        c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4063      	eors	r3, r4
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <crc32_little+0x2dc>)
 8000c0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c0e:	0a23      	lsrs	r3, r4, #8
 8000c10:	ea82 0403 	eor.w	r4, r2, r3
    } while (--len);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1ed      	bne.n	8000bfc <crc32_little+0x2a8>
    c = ~c;
 8000c20:	43e4      	mvns	r4, r4
    return (unsigned long)c;
 8000c22:	4623      	mov	r3, r4
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bcb0      	pop	{r4, r5, r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	0800d850 	.word	0x0800d850

08000c34 <crc32_big>:
/* ========================================================================= */
local unsigned long crc32_big(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    unsigned len;
{
 8000c34:	b4b0      	push	{r4, r5, r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
    register z_crc_t c;
    register const z_crc_t FAR *buf4;

    c = ZSWAP32((z_crc_t)crc);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	0e1a      	lsrs	r2, r3, #24
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000c4c:	441a      	add	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000c56:	441a      	add	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	061b      	lsls	r3, r3, #24
 8000c5c:	18d4      	adds	r4, r2, r3
    c = ~c;
 8000c5e:	43e4      	mvns	r4, r4
    while (len && ((ptrdiff_t)buf & 3)) {
 8000c60:	e010      	b.n	8000c84 <crc32_big+0x50>
        c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);
 8000c62:	0e22      	lsrs	r2, r4, #24
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c59      	adds	r1, r3, #1
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4053      	eors	r3, r2
 8000c6e:	4abb      	ldr	r2, [pc, #748]	; (8000f5c <crc32_big+0x328>)
 8000c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c78:	0223      	lsls	r3, r4, #8
 8000c7a:	ea82 0403 	eor.w	r4, r2, r3
        len--;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
    while (len && ((ptrdiff_t)buf & 3)) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d004      	beq.n	8000c94 <crc32_big+0x60>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1e6      	bne.n	8000c62 <crc32_big+0x2e>
    }

    buf4 = (const z_crc_t FAR *)(const void FAR *)buf;
 8000c94:	68bd      	ldr	r5, [r7, #8]
    buf4--;
 8000c96:	3d04      	subs	r5, #4
    while (len >= 32) {
 8000c98:	e10a      	b.n	8000eb0 <crc32_big+0x27c>
        DOBIG32;
 8000c9a:	3504      	adds	r5, #4
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	405c      	eors	r4, r3
 8000ca0:	b2e3      	uxtb	r3, r4
 8000ca2:	4aae      	ldr	r2, [pc, #696]	; (8000f5c <crc32_big+0x328>)
 8000ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ca8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cac:	0a23      	lsrs	r3, r4, #8
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	49aa      	ldr	r1, [pc, #680]	; (8000f5c <crc32_big+0x328>)
 8000cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cba:	405a      	eors	r2, r3
 8000cbc:	0c23      	lsrs	r3, r4, #16
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	49a6      	ldr	r1, [pc, #664]	; (8000f5c <crc32_big+0x328>)
 8000cc2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cca:	405a      	eors	r2, r3
 8000ccc:	0e23      	lsrs	r3, r4, #24
 8000cce:	49a3      	ldr	r1, [pc, #652]	; (8000f5c <crc32_big+0x328>)
 8000cd0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cd8:	ea82 0403 	eor.w	r4, r2, r3
 8000cdc:	3504      	adds	r5, #4
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	405c      	eors	r4, r3
 8000ce2:	b2e3      	uxtb	r3, r4
 8000ce4:	4a9d      	ldr	r2, [pc, #628]	; (8000f5c <crc32_big+0x328>)
 8000ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cee:	0a23      	lsrs	r3, r4, #8
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	499a      	ldr	r1, [pc, #616]	; (8000f5c <crc32_big+0x328>)
 8000cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cfc:	405a      	eors	r2, r3
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4996      	ldr	r1, [pc, #600]	; (8000f5c <crc32_big+0x328>)
 8000d04:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000d08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d0c:	405a      	eors	r2, r3
 8000d0e:	0e23      	lsrs	r3, r4, #24
 8000d10:	4992      	ldr	r1, [pc, #584]	; (8000f5c <crc32_big+0x328>)
 8000d12:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000d16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d1a:	ea82 0403 	eor.w	r4, r2, r3
 8000d1e:	3504      	adds	r5, #4
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	405c      	eors	r4, r3
 8000d24:	b2e3      	uxtb	r3, r4
 8000d26:	4a8d      	ldr	r2, [pc, #564]	; (8000f5c <crc32_big+0x328>)
 8000d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d30:	0a23      	lsrs	r3, r4, #8
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4989      	ldr	r1, [pc, #548]	; (8000f5c <crc32_big+0x328>)
 8000d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d3e:	405a      	eors	r2, r3
 8000d40:	0c23      	lsrs	r3, r4, #16
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4985      	ldr	r1, [pc, #532]	; (8000f5c <crc32_big+0x328>)
 8000d46:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000d4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d4e:	405a      	eors	r2, r3
 8000d50:	0e23      	lsrs	r3, r4, #24
 8000d52:	4982      	ldr	r1, [pc, #520]	; (8000f5c <crc32_big+0x328>)
 8000d54:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000d58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d5c:	ea82 0403 	eor.w	r4, r2, r3
 8000d60:	3504      	adds	r5, #4
 8000d62:	682b      	ldr	r3, [r5, #0]
 8000d64:	405c      	eors	r4, r3
 8000d66:	b2e3      	uxtb	r3, r4
 8000d68:	4a7c      	ldr	r2, [pc, #496]	; (8000f5c <crc32_big+0x328>)
 8000d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d72:	0a23      	lsrs	r3, r4, #8
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4979      	ldr	r1, [pc, #484]	; (8000f5c <crc32_big+0x328>)
 8000d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d80:	405a      	eors	r2, r3
 8000d82:	0c23      	lsrs	r3, r4, #16
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4975      	ldr	r1, [pc, #468]	; (8000f5c <crc32_big+0x328>)
 8000d88:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d90:	405a      	eors	r2, r3
 8000d92:	0e23      	lsrs	r3, r4, #24
 8000d94:	4971      	ldr	r1, [pc, #452]	; (8000f5c <crc32_big+0x328>)
 8000d96:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d9e:	ea82 0403 	eor.w	r4, r2, r3
 8000da2:	3504      	adds	r5, #4
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	405c      	eors	r4, r3
 8000da8:	b2e3      	uxtb	r3, r4
 8000daa:	4a6c      	ldr	r2, [pc, #432]	; (8000f5c <crc32_big+0x328>)
 8000dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db4:	0a23      	lsrs	r3, r4, #8
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4968      	ldr	r1, [pc, #416]	; (8000f5c <crc32_big+0x328>)
 8000dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dc2:	405a      	eors	r2, r3
 8000dc4:	0c23      	lsrs	r3, r4, #16
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	4964      	ldr	r1, [pc, #400]	; (8000f5c <crc32_big+0x328>)
 8000dca:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000dce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dd2:	405a      	eors	r2, r3
 8000dd4:	0e23      	lsrs	r3, r4, #24
 8000dd6:	4961      	ldr	r1, [pc, #388]	; (8000f5c <crc32_big+0x328>)
 8000dd8:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000ddc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000de0:	ea82 0403 	eor.w	r4, r2, r3
 8000de4:	3504      	adds	r5, #4
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	405c      	eors	r4, r3
 8000dea:	b2e3      	uxtb	r3, r4
 8000dec:	4a5b      	ldr	r2, [pc, #364]	; (8000f5c <crc32_big+0x328>)
 8000dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000df2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000df6:	0a23      	lsrs	r3, r4, #8
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4958      	ldr	r1, [pc, #352]	; (8000f5c <crc32_big+0x328>)
 8000dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e04:	405a      	eors	r2, r3
 8000e06:	0c23      	lsrs	r3, r4, #16
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4954      	ldr	r1, [pc, #336]	; (8000f5c <crc32_big+0x328>)
 8000e0c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000e10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e14:	405a      	eors	r2, r3
 8000e16:	0e23      	lsrs	r3, r4, #24
 8000e18:	4950      	ldr	r1, [pc, #320]	; (8000f5c <crc32_big+0x328>)
 8000e1a:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000e1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e22:	ea82 0403 	eor.w	r4, r2, r3
 8000e26:	3504      	adds	r5, #4
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	405c      	eors	r4, r3
 8000e2c:	b2e3      	uxtb	r3, r4
 8000e2e:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <crc32_big+0x328>)
 8000e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e38:	0a23      	lsrs	r3, r4, #8
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4947      	ldr	r1, [pc, #284]	; (8000f5c <crc32_big+0x328>)
 8000e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e46:	405a      	eors	r2, r3
 8000e48:	0c23      	lsrs	r3, r4, #16
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4943      	ldr	r1, [pc, #268]	; (8000f5c <crc32_big+0x328>)
 8000e4e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000e52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e56:	405a      	eors	r2, r3
 8000e58:	0e23      	lsrs	r3, r4, #24
 8000e5a:	4940      	ldr	r1, [pc, #256]	; (8000f5c <crc32_big+0x328>)
 8000e5c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e64:	ea82 0403 	eor.w	r4, r2, r3
 8000e68:	3504      	adds	r5, #4
 8000e6a:	682b      	ldr	r3, [r5, #0]
 8000e6c:	405c      	eors	r4, r3
 8000e6e:	b2e3      	uxtb	r3, r4
 8000e70:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <crc32_big+0x328>)
 8000e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e7a:	0a23      	lsrs	r3, r4, #8
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4937      	ldr	r1, [pc, #220]	; (8000f5c <crc32_big+0x328>)
 8000e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e88:	405a      	eors	r2, r3
 8000e8a:	0c23      	lsrs	r3, r4, #16
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4933      	ldr	r1, [pc, #204]	; (8000f5c <crc32_big+0x328>)
 8000e90:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e98:	405a      	eors	r2, r3
 8000e9a:	0e23      	lsrs	r3, r4, #24
 8000e9c:	492f      	ldr	r1, [pc, #188]	; (8000f5c <crc32_big+0x328>)
 8000e9e:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ea6:	ea82 0403 	eor.w	r4, r2, r3
        len -= 32;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3b20      	subs	r3, #32
 8000eae:	607b      	str	r3, [r7, #4]
    while (len >= 32) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b1f      	cmp	r3, #31
 8000eb4:	f63f aef1 	bhi.w	8000c9a <crc32_big+0x66>
    }
    while (len >= 4) {
 8000eb8:	e023      	b.n	8000f02 <crc32_big+0x2ce>
        DOBIG4;
 8000eba:	3504      	adds	r5, #4
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	405c      	eors	r4, r3
 8000ec0:	b2e3      	uxtb	r3, r4
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <crc32_big+0x328>)
 8000ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ec8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ecc:	0a23      	lsrs	r3, r4, #8
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4922      	ldr	r1, [pc, #136]	; (8000f5c <crc32_big+0x328>)
 8000ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eda:	405a      	eors	r2, r3
 8000edc:	0c23      	lsrs	r3, r4, #16
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	491e      	ldr	r1, [pc, #120]	; (8000f5c <crc32_big+0x328>)
 8000ee2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000ee6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eea:	405a      	eors	r2, r3
 8000eec:	0e23      	lsrs	r3, r4, #24
 8000eee:	491b      	ldr	r1, [pc, #108]	; (8000f5c <crc32_big+0x328>)
 8000ef0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000ef4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ef8:	ea82 0403 	eor.w	r4, r2, r3
        len -= 4;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b04      	subs	r3, #4
 8000f00:	607b      	str	r3, [r7, #4]
    while (len >= 4) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d8d8      	bhi.n	8000eba <crc32_big+0x286>
    }
    buf4++;
 8000f08:	3504      	adds	r5, #4
    buf = (const unsigned char FAR *)buf4;
 8000f0a:	60bd      	str	r5, [r7, #8]

    if (len) do {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d013      	beq.n	8000f3a <crc32_big+0x306>
        c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);
 8000f12:	0e22      	lsrs	r2, r4, #24
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c59      	adds	r1, r3, #1
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4053      	eors	r3, r2
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <crc32_big+0x328>)
 8000f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f28:	0223      	lsls	r3, r4, #8
 8000f2a:	ea82 0403 	eor.w	r4, r2, r3
    } while (--len);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1eb      	bne.n	8000f12 <crc32_big+0x2de>
    c = ~c;
 8000f3a:	43e4      	mvns	r4, r4
    return (unsigned long)(ZSWAP32(c));
 8000f3c:	0e22      	lsrs	r2, r4, #24
 8000f3e:	0a23      	lsrs	r3, r4, #8
 8000f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f44:	441a      	add	r2, r3
 8000f46:	0223      	lsls	r3, r4, #8
 8000f48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f4c:	441a      	add	r2, r3
 8000f4e:	0623      	lsls	r3, r4, #24
 8000f50:	4413      	add	r3, r2
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bcb0      	pop	{r4, r5, r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	0800d850 	.word	0x0800d850

08000f60 <deflateInit_>:
int ZEXPORT deflateInit_(strm, level, version, stream_size)
    z_streamp strm;
    int level;
    const char *version;
    int stream_size;
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af04      	add	r7, sp, #16
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
    return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	9303      	str	r3, [sp, #12]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	230c      	movs	r3, #12
 8000f80:	2208      	movs	r2, #8
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 f805 	bl	8000f94 <deflateInit2_>
 8000f8a:	4603      	mov	r3, r0
                         Z_DEFAULT_STRATEGY, version, stream_size);
    /* To do: ignore strm->next_in if we use it as window */
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <deflateInit2_>:
    int  windowBits;
    int  memLevel;
    int  strategy;
    const char *version;
    int stream_size;
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
    deflate_state *s;
    int wrap = 1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
    ushf *overlay;
    /* We overlay pending_buf and d_buf+l_buf. This works since the average
     * output size for (length,distance) codes is <= 24 bits.
     */

    if (version == Z_NULL || version[0] != my_version[0] ||
 8000fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d008      	beq.n	8000fbe <deflateInit2_+0x2a>
 8000fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	4b85      	ldr	r3, [pc, #532]	; (80011c8 <deflateInit2_+0x234>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d102      	bne.n	8000fbe <deflateInit2_+0x2a>
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fba:	2b38      	cmp	r3, #56	; 0x38
 8000fbc:	d002      	beq.n	8000fc4 <deflateInit2_+0x30>
        stream_size != sizeof(z_stream)) {
        return Z_VERSION_ERROR;
 8000fbe:	f06f 0305 	mvn.w	r3, #5
 8000fc2:	e13a      	b.n	800123a <deflateInit2_+0x2a6>
    }
    if (strm == Z_NULL) return Z_STREAM_ERROR;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d102      	bne.n	8000fd0 <deflateInit2_+0x3c>
 8000fca:	f06f 0301 	mvn.w	r3, #1
 8000fce:	e134      	b.n	800123a <deflateInit2_+0x2a6>

    strm->msg = Z_NULL;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    if (strm->zalloc == (alloc_func)0) {
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d105      	bne.n	8000fea <deflateInit2_+0x56>
#ifdef Z_SOLO
        return Z_STREAM_ERROR;
#else
        strm->zalloc = zcalloc;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4a7a      	ldr	r2, [pc, #488]	; (80011cc <deflateInit2_+0x238>)
 8000fe2:	621a      	str	r2, [r3, #32]
        strm->opaque = (voidpf)0;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif
    }
    if (strm->zfree == (free_func)0)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <deflateInit2_+0x64>
#ifdef Z_SOLO
        return Z_STREAM_ERROR;
#else
        strm->zfree = zcfree;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4a76      	ldr	r2, [pc, #472]	; (80011d0 <deflateInit2_+0x23c>)
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#ifdef FASTEST
    if (level != 0) level = 1;
#else
    if (level == Z_DEFAULT_COMPRESSION) level = 6;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffe:	d101      	bne.n	8001004 <deflateInit2_+0x70>
 8001000:	2306      	movs	r3, #6
 8001002:	60bb      	str	r3, [r7, #8]
#endif

    if (windowBits < 0) { /* suppress zlib wrapper */
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	da05      	bge.n	8001016 <deflateInit2_+0x82>
        wrap = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
        windowBits = -windowBits;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	425b      	negs	r3, r3
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	e007      	b.n	8001026 <deflateInit2_+0x92>
    }
#ifdef GZIP
    else if (windowBits > 15) {
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	dd04      	ble.n	8001026 <deflateInit2_+0x92>
        wrap = 2;       /* write gzip wrapper instead */
 800101c:	2302      	movs	r3, #2
 800101e:	61fb      	str	r3, [r7, #28]
        windowBits -= 16;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	3b10      	subs	r3, #16
 8001024:	603b      	str	r3, [r7, #0]
    }
#endif
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	2b00      	cmp	r3, #0
 800102a:	dd17      	ble.n	800105c <deflateInit2_+0xc8>
 800102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102e:	2b05      	cmp	r3, #5
 8001030:	dc14      	bgt.n	800105c <deflateInit2_+0xc8>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b08      	cmp	r3, #8
 8001036:	d111      	bne.n	800105c <deflateInit2_+0xc8>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b07      	cmp	r3, #7
 800103c:	dd0e      	ble.n	800105c <deflateInit2_+0xc8>
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	dc0b      	bgt.n	800105c <deflateInit2_+0xc8>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db08      	blt.n	800105c <deflateInit2_+0xc8>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b09      	cmp	r3, #9
 800104e:	dc05      	bgt.n	800105c <deflateInit2_+0xc8>
 8001050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001052:	2b00      	cmp	r3, #0
 8001054:	db02      	blt.n	800105c <deflateInit2_+0xc8>
        strategy < 0 || strategy > Z_FIXED) {
 8001056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001058:	2b04      	cmp	r3, #4
 800105a:	dd02      	ble.n	8001062 <deflateInit2_+0xce>
        return Z_STREAM_ERROR;
 800105c:	f06f 0301 	mvn.w	r3, #1
 8001060:	e0eb      	b.n	800123a <deflateInit2_+0x2a6>
    }
    if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b08      	cmp	r3, #8
 8001066:	d101      	bne.n	800106c <deflateInit2_+0xd8>
 8001068:	2309      	movs	r3, #9
 800106a:	603b      	str	r3, [r7, #0]
    s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001074:	f241 62cc 	movw	r2, #5836	; 0x16cc
 8001078:	2101      	movs	r1, #1
 800107a:	4798      	blx	r3
 800107c:	61b8      	str	r0, [r7, #24]
    if (s == Z_NULL) return Z_MEM_ERROR;
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <deflateInit2_+0xf6>
 8001084:	f06f 0303 	mvn.w	r3, #3
 8001088:	e0d7      	b.n	800123a <deflateInit2_+0x2a6>
    strm->state = (struct internal_state FAR *)s;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	61da      	str	r2, [r3, #28]
    s->strm = strm;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	601a      	str	r2, [r3, #0]

    s->wrap = wrap;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	619a      	str	r2, [r3, #24]
    s->gzhead = Z_NULL;
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
    s->w_bits = windowBits;
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
    s->w_size = 1 << s->w_bits;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	2201      	movs	r2, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
    s->w_mask = s->w_size - 1;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	1e5a      	subs	r2, r3, #1
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34

    s->hash_bits = memLevel + 7;
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	3307      	adds	r3, #7
 80010c6:	461a      	mov	r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	651a      	str	r2, [r3, #80]	; 0x50
    s->hash_size = 1 << s->hash_bits;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010d0:	2201      	movs	r2, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	64da      	str	r2, [r3, #76]	; 0x4c
    s->hash_mask = s->hash_size - 1;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
    s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ea:	3302      	adds	r3, #2
 80010ec:	4a39      	ldr	r2, [pc, #228]	; (80011d4 <deflateInit2_+0x240>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	085a      	lsrs	r2, r3, #1
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	659a      	str	r2, [r3, #88]	; 0x58

    s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001104:	2202      	movs	r2, #2
 8001106:	4798      	blx	r3
 8001108:	4602      	mov	r2, r0
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	639a      	str	r2, [r3, #56]	; 0x38
    s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800111a:	2202      	movs	r2, #2
 800111c:	4798      	blx	r3
 800111e:	4602      	mov	r2, r0
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
    s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001130:	2202      	movs	r2, #2
 8001132:	4798      	blx	r3
 8001134:	4602      	mov	r2, r0
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	645a      	str	r2, [r3, #68]	; 0x44

    s->high_water = 0;      /* nothing written to s->window yet */
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001140:	461a      	mov	r2, r3
 8001142:	2300      	movs	r3, #0
 8001144:	f8c2 36c8 	str.w	r3, [r2, #1736]	; 0x6c8

    s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	3306      	adds	r3, #6
 800114c:	2201      	movs	r2, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	461a      	mov	r2, r3
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800115a:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c

    overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800116c:	f8d2 169c 	ldr.w	r1, [r2, #1692]	; 0x69c
 8001170:	2204      	movs	r2, #4
 8001172:	4798      	blx	r3
 8001174:	6178      	str	r0, [r7, #20]
    s->pending_buf = (uchf *) overlay;
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	609a      	str	r2, [r3, #8]
    s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001182:	f8d3 369c 	ldr.w	r3, [r3, #1692]	; 0x69c
 8001186:	009a      	lsls	r2, r3, #2
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]

    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00b      	beq.n	80011ac <deflateInit2_+0x218>
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <deflateInit2_+0x218>
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <deflateInit2_+0x218>
        s->pending_buf == Z_NULL) {
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	689b      	ldr	r3, [r3, #8]
    if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d117      	bne.n	80011dc <deflateInit2_+0x248>
        s->status = FINISH_STATE;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f240 229a 	movw	r2, #666	; 0x29a
 80011b2:	605a      	str	r2, [r3, #4]
        strm->msg = ERR_MSG(Z_MEM_ERROR);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <deflateInit2_+0x244>)
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	619a      	str	r2, [r3, #24]
        deflateEnd (strm);
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 fe79 	bl	8001eb4 <deflateEnd>
        return Z_MEM_ERROR;
 80011c2:	f06f 0303 	mvn.w	r3, #3
 80011c6:	e038      	b.n	800123a <deflateInit2_+0x2a6>
 80011c8:	0800f8c8 	.word	0x0800f8c8
 80011cc:	080067f5 	.word	0x080067f5
 80011d0:	0800681d 	.word	0x0800681d
 80011d4:	aaaaaaab 	.word	0xaaaaaaab
 80011d8:	08010324 	.word	0x08010324
    }
    s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e2:	f8d3 369c 	ldr.w	r3, [r3, #1692]	; 0x69c
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	4413      	add	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011f4:	f8c2 36a4 	str.w	r3, [r2, #1700]	; 0x6a4
    s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6899      	ldr	r1, [r3, #8]
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001202:	f8d3 269c 	ldr.w	r2, [r3, #1692]	; 0x69c
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	440b      	add	r3, r1
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001214:	f8c2 3698 	str.w	r3, [r2, #1688]	; 0x698

    s->level = level;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    s->strategy = strategy;
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    s->method = (Byte)method;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return deflateReset(strm);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f863 	bl	80012fe <deflateReset>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop

08001244 <deflateResetKeep>:
}

/* ========================================================================= */
int ZEXPORT deflateResetKeep (strm)
    z_streamp strm;
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <deflateResetKeep+0x26>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <deflateResetKeep+0x26>
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
    if (strm == Z_NULL || strm->state == Z_NULL ||
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <deflateResetKeep+0x26>
        strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <deflateResetKeep+0x2c>
        return Z_STREAM_ERROR;
 800126a:	f06f 0301 	mvn.w	r3, #1
 800126e:	e042      	b.n	80012f6 <deflateResetKeep+0xb2>
    }

    strm->total_in = strm->total_out = 0;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
    strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    strm->data_type = Z_UNKNOWN;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c

    s = (deflate_state *)strm->state;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	60fb      	str	r3, [r7, #12]
    s->pending = 0;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
    s->pending_out = s->pending_buf;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	611a      	str	r2, [r3, #16]

    if (s->wrap < 0) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da04      	bge.n	80012b0 <deflateResetKeep+0x6c>
        s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	425a      	negs	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	619a      	str	r2, [r3, #24]
    }
    s->status = s->wrap ? INIT_STATE : BUSY_STATE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <deflateResetKeep+0x78>
 80012b8:	222a      	movs	r2, #42	; 0x2a
 80012ba:	e000      	b.n	80012be <deflateResetKeep+0x7a>
 80012bc:	2271      	movs	r2, #113	; 0x71
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	605a      	str	r2, [r3, #4]
    strm->adler =
#ifdef GZIP
        s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d106      	bne.n	80012d8 <deflateResetKeep+0x94>
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fb1c 	bl	800090c <crc32>
 80012d4:	4603      	mov	r3, r0
 80012d6:	e005      	b.n	80012e4 <deflateResetKeep+0xa0>
#endif
        adler32(0L, Z_NULL, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff f8d9 	bl	8000494 <adler32>
 80012e2:	4603      	mov	r3, r0
    strm->adler =
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
    s->last_flush = Z_NO_FLUSH;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28

    _tr_init(s);
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f003 fcc8 	bl	8004c84 <_tr_init>

    return Z_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <deflateReset>:

/* ========================================================================= */
int ZEXPORT deflateReset (strm)
    z_streamp strm;
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
    int ret;

    ret = deflateResetKeep(strm);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff9c 	bl	8001244 <deflateResetKeep>
 800130c:	60f8      	str	r0, [r7, #12]
    if (ret == Z_OK)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d104      	bne.n	800131e <deflateReset+0x20>
        lm_init(strm->state);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fe97 	bl	800204c <lm_init>
    return ret;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <putShortMSB>:
 * pending_buf.
 */
local void putShortMSB (s, b)
    deflate_state *s;
    uInt b;
{
 8001328:	b490      	push	{r4, r7}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
    put_byte(s, (Byte)(b >> 8));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	0a1c      	lsrs	r4, r3, #8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	1c58      	adds	r0, r3, #1
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	6148      	str	r0, [r1, #20]
 8001344:	4413      	add	r3, r2
 8001346:	b2e2      	uxtb	r2, r4
 8001348:	701a      	strb	r2, [r3, #0]
    put_byte(s, (Byte)(b & 0xff));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	1c58      	adds	r0, r3, #1
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	6148      	str	r0, [r1, #20]
 8001358:	4413      	add	r3, r2
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bc90      	pop	{r4, r7}
 8001368:	4770      	bx	lr

0800136a <flush_pending>:
 * to avoid allocating a large strm->next_out buffer and copying into it.
 * (See also read_buf()).
 */
local void flush_pending(strm)
    z_streamp strm;
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
    unsigned len;
    deflate_state *s = strm->state;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	60bb      	str	r3, [r7, #8]

    _tr_flush_bits(s);
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f004 fd0a 	bl	8005d92 <_tr_flush_bits>
    len = s->pending;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	60fb      	str	r3, [r7, #12]
    if (len > strm->avail_out) len = strm->avail_out;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	429a      	cmp	r2, r3
 800138c:	d902      	bls.n	8001394 <flush_pending+0x2a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	60fb      	str	r3, [r7, #12]
    if (len == 0) return;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d02e      	beq.n	80013f8 <flush_pending+0x8e>

    zmemcpy(strm->next_out, s->pending_out, len);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68d8      	ldr	r0, [r3, #12]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f00a fdf9 	bl	800bf9c <memcpy>
    strm->next_out  += len;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	441a      	add	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60da      	str	r2, [r3, #12]
    s->pending_out  += len;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	441a      	add	r2, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	611a      	str	r2, [r3, #16]
    strm->total_out += len;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	441a      	add	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	615a      	str	r2, [r3, #20]
    strm->avail_out  -= len;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691a      	ldr	r2, [r3, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad2      	subs	r2, r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	611a      	str	r2, [r3, #16]
    s->pending -= len;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad2      	subs	r2, r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	615a      	str	r2, [r3, #20]
    if (s->pending == 0) {
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <flush_pending+0x90>
        s->pending_out = s->pending_buf;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	611a      	str	r2, [r3, #16]
 80013f6:	e000      	b.n	80013fa <flush_pending+0x90>
    if (len == 0) return;
 80013f8:	bf00      	nop
    }
}
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <deflate>:

/* ========================================================================= */
int ZEXPORT deflate (strm, flush)
    z_streamp strm;
    int flush;
{
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b08c      	sub	sp, #48	; 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
    int old_flush; /* value of flush param for previous deflate call */
    deflate_state *s;

    if (strm == Z_NULL || strm->state == Z_NULL ||
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d009      	beq.n	8001424 <deflate+0x24>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <deflate+0x24>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b05      	cmp	r3, #5
 800141c:	dc02      	bgt.n	8001424 <deflate+0x24>
        flush > Z_BLOCK || flush < 0) {
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	da03      	bge.n	800142c <deflate+0x2c>
        return Z_STREAM_ERROR;
 8001424:	f06f 0301 	mvn.w	r3, #1
 8001428:	f000 bd3f 	b.w	8001eaa <deflate+0xaaa>
    }
    s = strm->state;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	613b      	str	r3, [r7, #16]

    if (strm->next_out == Z_NULL ||
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <deflate+0x5c>
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
    if (strm->next_out == Z_NULL ||
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <deflate+0x4a>
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d108      	bne.n	800145c <deflate+0x5c>
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	685b      	ldr	r3, [r3, #4]
        (strm->next_in == Z_NULL && strm->avail_in != 0) ||
 800144e:	f240 229a 	movw	r2, #666	; 0x29a
 8001452:	4293      	cmp	r3, r2
 8001454:	d10a      	bne.n	800146c <deflate+0x6c>
        (s->status == FINISH_STATE && flush != Z_FINISH)) {
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d007      	beq.n	800146c <deflate+0x6c>
        ERR_RETURN(strm, Z_STREAM_ERROR);
 800145c:	4b98      	ldr	r3, [pc, #608]	; (80016c0 <deflate+0x2c0>)
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	f06f 0301 	mvn.w	r3, #1
 8001468:	f000 bd1f 	b.w	8001eaa <deflate+0xaaa>
    }
    if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d107      	bne.n	8001484 <deflate+0x84>
 8001474:	4b92      	ldr	r3, [pc, #584]	; (80016c0 <deflate+0x2c0>)
 8001476:	69da      	ldr	r2, [r3, #28]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
 800147c:	f06f 0304 	mvn.w	r3, #4
 8001480:	f000 bd13 	b.w	8001eaa <deflate+0xaaa>

    s->strm = strm; /* just in case */
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
    old_flush = s->last_flush;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	60fb      	str	r3, [r7, #12]
    s->last_flush = flush;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	629a      	str	r2, [r3, #40]	; 0x28

    /* Write the header */
    if (s->status == INIT_STATE) {
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b2a      	cmp	r3, #42	; 0x2a
 800149c:	f040 81c5 	bne.w	800182a <deflate+0x42a>
#ifdef GZIP
        if (s->wrap == 2) {
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	f040 815c 	bne.w	8001762 <deflate+0x362>
            strm->adler = crc32(0L, Z_NULL, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fa2c 	bl	800090c <crc32>
 80014b4:	4602      	mov	r2, r0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
            put_byte(s, 31);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	1c58      	adds	r0, r3, #1
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	6148      	str	r0, [r1, #20]
 80014c8:	4413      	add	r3, r2
 80014ca:	221f      	movs	r2, #31
 80014cc:	701a      	strb	r2, [r3, #0]
            put_byte(s, 139);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	1c58      	adds	r0, r3, #1
 80014d8:	6939      	ldr	r1, [r7, #16]
 80014da:	6148      	str	r0, [r1, #20]
 80014dc:	4413      	add	r3, r2
 80014de:	228b      	movs	r2, #139	; 0x8b
 80014e0:	701a      	strb	r2, [r3, #0]
            put_byte(s, 8);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	1c58      	adds	r0, r3, #1
 80014ec:	6939      	ldr	r1, [r7, #16]
 80014ee:	6148      	str	r0, [r1, #20]
 80014f0:	4413      	add	r3, r2
 80014f2:	2208      	movs	r2, #8
 80014f4:	701a      	strb	r2, [r3, #0]
            if (s->gzhead == Z_NULL) {
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d15c      	bne.n	80015b8 <deflate+0x1b8>
                put_byte(s, 0);
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	1c58      	adds	r0, r3, #1
 8001508:	6939      	ldr	r1, [r7, #16]
 800150a:	6148      	str	r0, [r1, #20]
 800150c:	4413      	add	r3, r2
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
                put_byte(s, 0);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	1c58      	adds	r0, r3, #1
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	6148      	str	r0, [r1, #20]
 8001520:	4413      	add	r3, r2
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
                put_byte(s, 0);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	1c58      	adds	r0, r3, #1
 8001530:	6939      	ldr	r1, [r7, #16]
 8001532:	6148      	str	r0, [r1, #20]
 8001534:	4413      	add	r3, r2
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
                put_byte(s, 0);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	1c58      	adds	r0, r3, #1
 8001544:	6939      	ldr	r1, [r7, #16]
 8001546:	6148      	str	r0, [r1, #20]
 8001548:	4413      	add	r3, r2
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
                put_byte(s, 0);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	1c58      	adds	r0, r3, #1
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	6148      	str	r0, [r1, #20]
 800155c:	4413      	add	r3, r2
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
                put_byte(s, s->level == 9 ? 2 :
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001568:	2b09      	cmp	r3, #9
 800156a:	d00d      	beq.n	8001588 <deflate+0x188>
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	2b01      	cmp	r3, #1
 8001574:	dc04      	bgt.n	8001580 <deflate+0x180>
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800157c:	2b01      	cmp	r3, #1
 800157e:	dc01      	bgt.n	8001584 <deflate+0x184>
 8001580:	2204      	movs	r2, #4
 8001582:	e002      	b.n	800158a <deflate+0x18a>
 8001584:	2200      	movs	r2, #0
 8001586:	e000      	b.n	800158a <deflate+0x18a>
 8001588:	2202      	movs	r2, #2
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	1c5c      	adds	r4, r3, #1
 8001594:	6938      	ldr	r0, [r7, #16]
 8001596:	6144      	str	r4, [r0, #20]
 8001598:	440b      	add	r3, r1
 800159a:	701a      	strb	r2, [r3, #0]
                            (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
                             4 : 0));
                put_byte(s, OS_CODE);
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	1c58      	adds	r0, r3, #1
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	6148      	str	r0, [r1, #20]
 80015aa:	4413      	add	r3, r2
 80015ac:	2203      	movs	r2, #3
 80015ae:	701a      	strb	r2, [r3, #0]
                s->status = BUSY_STATE;
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	2271      	movs	r2, #113	; 0x71
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	e138      	b.n	800182a <deflate+0x42a>
            }
            else {
                put_byte(s, (s->gzhead->text ? 1 : 0) +
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf14      	ite	ne
 80015c2:	2301      	movne	r3, #1
 80015c4:	2300      	moveq	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <deflate+0x1d8>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e000      	b.n	80015da <deflate+0x1da>
 80015d8:	2300      	movs	r3, #0
 80015da:	4413      	add	r3, r2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	69d2      	ldr	r2, [r2, #28]
 80015e2:	6912      	ldr	r2, [r2, #16]
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d101      	bne.n	80015ec <deflate+0x1ec>
 80015e8:	2200      	movs	r2, #0
 80015ea:	e000      	b.n	80015ee <deflate+0x1ee>
 80015ec:	2204      	movs	r2, #4
 80015ee:	4413      	add	r3, r2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	69d2      	ldr	r2, [r2, #28]
 80015f6:	69d2      	ldr	r2, [r2, #28]
 80015f8:	2a00      	cmp	r2, #0
 80015fa:	d101      	bne.n	8001600 <deflate+0x200>
 80015fc:	2200      	movs	r2, #0
 80015fe:	e000      	b.n	8001602 <deflate+0x202>
 8001600:	2208      	movs	r2, #8
 8001602:	4413      	add	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <deflate+0x214>
 8001610:	2100      	movs	r1, #0
 8001612:	e000      	b.n	8001616 <deflate+0x216>
 8001614:	2110      	movs	r1, #16
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6898      	ldr	r0, [r3, #8]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	1c5d      	adds	r5, r3, #1
 8001620:	693c      	ldr	r4, [r7, #16]
 8001622:	6165      	str	r5, [r4, #20]
 8001624:	4403      	add	r3, r0
 8001626:	440a      	add	r2, r1
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	701a      	strb	r2, [r3, #0]
                            (s->gzhead->hcrc ? 2 : 0) +
                            (s->gzhead->extra == Z_NULL ? 0 : 4) +
                            (s->gzhead->name == Z_NULL ? 0 : 8) +
                            (s->gzhead->comment == Z_NULL ? 0 : 16)
                        );
                put_byte(s, (Byte)(s->gzhead->time & 0xff));
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	685c      	ldr	r4, [r3, #4]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	1c58      	adds	r0, r3, #1
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	6148      	str	r0, [r1, #20]
 8001640:	4413      	add	r3, r2
 8001642:	b2e2      	uxtb	r2, r4
 8001644:	701a      	strb	r2, [r3, #0]
                put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	0a1c      	lsrs	r4, r3, #8
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	1c58      	adds	r0, r3, #1
 8001658:	6939      	ldr	r1, [r7, #16]
 800165a:	6148      	str	r0, [r1, #20]
 800165c:	4413      	add	r3, r2
 800165e:	b2e2      	uxtb	r2, r4
 8001660:	701a      	strb	r2, [r3, #0]
                put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	0c1c      	lsrs	r4, r3, #16
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	1c58      	adds	r0, r3, #1
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	6148      	str	r0, [r1, #20]
 8001678:	4413      	add	r3, r2
 800167a:	b2e2      	uxtb	r2, r4
 800167c:	701a      	strb	r2, [r3, #0]
                put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	0e1c      	lsrs	r4, r3, #24
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	1c58      	adds	r0, r3, #1
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	6148      	str	r0, [r1, #20]
 8001694:	4413      	add	r3, r2
 8001696:	b2e2      	uxtb	r2, r4
 8001698:	701a      	strb	r2, [r3, #0]
                put_byte(s, s->level == 9 ? 2 :
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d00f      	beq.n	80016c4 <deflate+0x2c4>
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	dc04      	bgt.n	80016b8 <deflate+0x2b8>
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	dc01      	bgt.n	80016bc <deflate+0x2bc>
 80016b8:	2204      	movs	r2, #4
 80016ba:	e004      	b.n	80016c6 <deflate+0x2c6>
 80016bc:	2200      	movs	r2, #0
 80016be:	e002      	b.n	80016c6 <deflate+0x2c6>
 80016c0:	08010324 	.word	0x08010324
 80016c4:	2202      	movs	r2, #2
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	1c5c      	adds	r4, r3, #1
 80016d0:	6938      	ldr	r0, [r7, #16]
 80016d2:	6144      	str	r4, [r0, #20]
 80016d4:	440b      	add	r3, r1
 80016d6:	701a      	strb	r2, [r3, #0]
                            (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
                             4 : 0));
                put_byte(s, s->gzhead->os & 0xff);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	68dc      	ldr	r4, [r3, #12]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	1c58      	adds	r0, r3, #1
 80016e8:	6939      	ldr	r1, [r7, #16]
 80016ea:	6148      	str	r0, [r1, #20]
 80016ec:	4413      	add	r3, r2
 80016ee:	b2e2      	uxtb	r2, r4
 80016f0:	701a      	strb	r2, [r3, #0]
                if (s->gzhead->extra != Z_NULL) {
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01a      	beq.n	8001732 <deflate+0x332>
                    put_byte(s, s->gzhead->extra_len & 0xff);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	695c      	ldr	r4, [r3, #20]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	1c58      	adds	r0, r3, #1
 800170c:	6939      	ldr	r1, [r7, #16]
 800170e:	6148      	str	r0, [r1, #20]
 8001710:	4413      	add	r3, r2
 8001712:	b2e2      	uxtb	r2, r4
 8001714:	701a      	strb	r2, [r3, #0]
                    put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	0a1c      	lsrs	r4, r3, #8
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	1c58      	adds	r0, r3, #1
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	6148      	str	r0, [r1, #20]
 800172c:	4413      	add	r3, r2
 800172e:	b2e2      	uxtb	r2, r4
 8001730:	701a      	strb	r2, [r3, #0]
                }
                if (s->gzhead->hcrc)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00b      	beq.n	8001754 <deflate+0x354>
                    strm->adler = crc32(strm->adler, s->pending_buf,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6899      	ldr	r1, [r3, #8]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	461a      	mov	r2, r3
 800174a:	f7ff f8df 	bl	800090c <crc32>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
                                        s->pending);
                s->gzindex = 0;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
                s->status = EXTRA_STATE;
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2245      	movs	r2, #69	; 0x45
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	e063      	b.n	800182a <deflate+0x42a>
            }
        }
        else
#endif
        {
            uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	3b08      	subs	r3, #8
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	3308      	adds	r3, #8
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
            uInt level_flags;

            if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	2b01      	cmp	r3, #1
 8001778:	dc04      	bgt.n	8001784 <deflate+0x384>
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001780:	2b01      	cmp	r3, #1
 8001782:	dc02      	bgt.n	800178a <deflate+0x38a>
                level_flags = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	e011      	b.n	80017ae <deflate+0x3ae>
            else if (s->level < 6)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001790:	2b05      	cmp	r3, #5
 8001792:	dc02      	bgt.n	800179a <deflate+0x39a>
                level_flags = 1;
 8001794:	2301      	movs	r3, #1
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
 8001798:	e009      	b.n	80017ae <deflate+0x3ae>
            else if (s->level == 6)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a0:	2b06      	cmp	r3, #6
 80017a2:	d102      	bne.n	80017aa <deflate+0x3aa>
                level_flags = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a8:	e001      	b.n	80017ae <deflate+0x3ae>
            else
                level_flags = 3;
 80017aa:	2303      	movs	r3, #3
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
            header |= (level_flags << 6);
 80017ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b4:	4313      	orrs	r3, r2
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (s->strstart != 0) header |= PRESET_DICT;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <deflate+0x3c8>
 80017c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            header += 31 - (header % 31);
 80017c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017ca:	4b77      	ldr	r3, [pc, #476]	; (80019a8 <deflate+0x5a8>)
 80017cc:	fba3 2301 	umull	r2, r3, r3, r1
 80017d0:	1aca      	subs	r2, r1, r3
 80017d2:	0852      	lsrs	r2, r2, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	091a      	lsrs	r2, r3, #4
 80017d8:	4613      	mov	r3, r2
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	1aca      	subs	r2, r1, r3
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	331f      	adds	r3, #31
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c

            s->status = BUSY_STATE;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2271      	movs	r2, #113	; 0x71
 80017ec:	605a      	str	r2, [r3, #4]
            putShortMSB(s, header);
 80017ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017f0:	6938      	ldr	r0, [r7, #16]
 80017f2:	f7ff fd99 	bl	8001328 <putShortMSB>

            /* Save the adler32 of the preset dictionary: */
            if (s->strstart != 0) {
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <deflate+0x41a>
                putShortMSB(s, (uInt)(strm->adler >> 16));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	0c1b      	lsrs	r3, r3, #16
 8001804:	4619      	mov	r1, r3
 8001806:	6938      	ldr	r0, [r7, #16]
 8001808:	f7ff fd8e 	bl	8001328 <putShortMSB>
                putShortMSB(s, (uInt)(strm->adler & 0xffff));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	b29b      	uxth	r3, r3
 8001812:	4619      	mov	r1, r3
 8001814:	6938      	ldr	r0, [r7, #16]
 8001816:	f7ff fd87 	bl	8001328 <putShortMSB>
            }
            strm->adler = adler32(0L, Z_NULL, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2000      	movs	r0, #0
 8001820:	f7fe fe38 	bl	8000494 <adler32>
 8001824:	4602      	mov	r2, r0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#ifdef GZIP
    if (s->status == EXTRA_STATE) {
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b45      	cmp	r3, #69	; 0x45
 8001830:	d17e      	bne.n	8001930 <deflate+0x530>
        if (s->gzhead->extra != Z_NULL) {
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d076      	beq.n	800192a <deflate+0x52a>
            uInt beg = s->pending;  /* start of bytes to update crc */
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	627b      	str	r3, [r7, #36]	; 0x24

            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
 8001842:	e040      	b.n	80018c6 <deflate+0x4c6>
                if (s->pending == s->pending_buf_size) {
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d125      	bne.n	800189c <deflate+0x49c>
                    if (s->gzhead->hcrc && s->pending > beg)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	2b00      	cmp	r3, #0
 8001858:	d014      	beq.n	8001884 <deflate+0x484>
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	429a      	cmp	r2, r3
 8001862:	d20f      	bcs.n	8001884 <deflate+0x484>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	18d1      	adds	r1, r2, r3
                                            s->pending - beg);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	695a      	ldr	r2, [r3, #20]
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	461a      	mov	r2, r3
 800187a:	f7ff f847 	bl	800090c <crc32>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
                    flush_pending(strm);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fd70 	bl	800136a <flush_pending>
                    beg = s->pending;
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
                    if (s->pending == s->pending_buf_size)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d01d      	beq.n	80018d8 <deflate+0x4d8>
                        break;
                }
                put_byte(s, s->gzhead->extra[s->gzindex]);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	441a      	add	r2, r3
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6899      	ldr	r1, [r3, #8]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	1c5c      	adds	r4, r3, #1
 80018b2:	6938      	ldr	r0, [r7, #16]
 80018b4:	6144      	str	r4, [r0, #20]
 80018b6:	440b      	add	r3, r1
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	701a      	strb	r2, [r3, #0]
                s->gzindex++;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	621a      	str	r2, [r3, #32]
            while (s->gzindex < (s->gzhead->extra_len & 0xffff)) {
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3b6      	bcc.n	8001844 <deflate+0x444>
 80018d6:	e000      	b.n	80018da <deflate+0x4da>
                        break;
 80018d8:	bf00      	nop
            }
            if (s->gzhead->hcrc && s->pending > beg)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d014      	beq.n	800190e <deflate+0x50e>
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20f      	bcs.n	800190e <deflate+0x50e>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	18d1      	adds	r1, r2, r3
                                    s->pending - beg);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	695a      	ldr	r2, [r3, #20]
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	461a      	mov	r2, r3
 8001904:	f7ff f802 	bl	800090c <crc32>
 8001908:	4602      	mov	r2, r0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
            if (s->gzindex == s->gzhead->extra_len) {
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	d109      	bne.n	8001930 <deflate+0x530>
                s->gzindex = 0;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
                s->status = NAME_STATE;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2249      	movs	r2, #73	; 0x49
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	e002      	b.n	8001930 <deflate+0x530>
            }
        }
        else
            s->status = NAME_STATE;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2249      	movs	r2, #73	; 0x49
 800192e:	605a      	str	r2, [r3, #4]
    }
    if (s->status == NAME_STATE) {
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b49      	cmp	r3, #73	; 0x49
 8001936:	d179      	bne.n	8001a2c <deflate+0x62c>
        if (s->gzhead->name != Z_NULL) {
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d071      	beq.n	8001a26 <deflate+0x626>
            uInt beg = s->pending;  /* start of bytes to update crc */
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	623b      	str	r3, [r7, #32]
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d12b      	bne.n	80019ac <deflate+0x5ac>
                    if (s->gzhead->hcrc && s->pending > beg)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	2b00      	cmp	r3, #0
 800195c:	d014      	beq.n	8001988 <deflate+0x588>
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	429a      	cmp	r2, r3
 8001966:	d20f      	bcs.n	8001988 <deflate+0x588>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	18d1      	adds	r1, r2, r3
                                            s->pending - beg);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	695a      	ldr	r2, [r3, #20]
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	461a      	mov	r2, r3
 800197e:	f7fe ffc5 	bl	800090c <crc32>
 8001982:	4602      	mov	r2, r0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
                    flush_pending(strm);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fcee 	bl	800136a <flush_pending>
                    beg = s->pending;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	623b      	str	r3, [r7, #32]
                    if (s->pending == s->pending_buf_size) {
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d105      	bne.n	80019ac <deflate+0x5ac>
                        val = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
                        break;
 80019a4:	e01b      	b.n	80019de <deflate+0x5de>
 80019a6:	bf00      	nop
 80019a8:	08421085 	.word	0x08421085
                    }
                }
                val = s->gzhead->name[s->gzindex++];
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	1c58      	adds	r0, r3, #1
 80019b8:	6939      	ldr	r1, [r7, #16]
 80019ba:	6208      	str	r0, [r1, #32]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	61fb      	str	r3, [r7, #28]
                put_byte(s, val);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	1c58      	adds	r0, r3, #1
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	6148      	str	r0, [r1, #20]
 80019d0:	4413      	add	r3, r2
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]
            } while (val != 0);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1b4      	bne.n	8001948 <deflate+0x548>
            if (s->gzhead->hcrc && s->pending > beg)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d014      	beq.n	8001a12 <deflate+0x612>
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	6a3a      	ldr	r2, [r7, #32]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d20f      	bcs.n	8001a12 <deflate+0x612>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	18d1      	adds	r1, r2, r3
                                    s->pending - beg);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	695a      	ldr	r2, [r3, #20]
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	f7fe ff80 	bl	800090c <crc32>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
            if (val == 0) {
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <deflate+0x62c>
                s->gzindex = 0;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	621a      	str	r2, [r3, #32]
                s->status = COMMENT_STATE;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	225b      	movs	r2, #91	; 0x5b
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	e002      	b.n	8001a2c <deflate+0x62c>
            }
        }
        else
            s->status = COMMENT_STATE;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	225b      	movs	r2, #91	; 0x5b
 8001a2a:	605a      	str	r2, [r3, #4]
    }
    if (s->status == COMMENT_STATE) {
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b5b      	cmp	r3, #91	; 0x5b
 8001a32:	d173      	bne.n	8001b1c <deflate+0x71c>
        if (s->gzhead->comment != Z_NULL) {
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d06b      	beq.n	8001b16 <deflate+0x716>
            uInt beg = s->pending;  /* start of bytes to update crc */
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	61bb      	str	r3, [r7, #24]
            int val;

            do {
                if (s->pending == s->pending_buf_size) {
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d128      	bne.n	8001aa2 <deflate+0x6a2>
                    if (s->gzhead->hcrc && s->pending > beg)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d014      	beq.n	8001a84 <deflate+0x684>
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d20f      	bcs.n	8001a84 <deflate+0x684>
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	18d1      	adds	r1, r2, r3
                                            s->pending - beg);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	695a      	ldr	r2, [r3, #20]
                        strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f7fe ff47 	bl	800090c <crc32>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
                    flush_pending(strm);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff fc70 	bl	800136a <flush_pending>
                    beg = s->pending;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	61bb      	str	r3, [r7, #24]
                    if (s->pending == s->pending_buf_size) {
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d102      	bne.n	8001aa2 <deflate+0x6a2>
                        val = 1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
                        break;
 8001aa0:	e018      	b.n	8001ad4 <deflate+0x6d4>
                    }
                }
                val = s->gzhead->comment[s->gzindex++];
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	1c58      	adds	r0, r3, #1
 8001aae:	6939      	ldr	r1, [r7, #16]
 8001ab0:	6208      	str	r0, [r1, #32]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	617b      	str	r3, [r7, #20]
                put_byte(s, val);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	1c58      	adds	r0, r3, #1
 8001ac2:	6939      	ldr	r1, [r7, #16]
 8001ac4:	6148      	str	r0, [r1, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]
            } while (val != 0);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1b7      	bne.n	8001a44 <deflate+0x644>
            if (s->gzhead->hcrc && s->pending > beg)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d014      	beq.n	8001b08 <deflate+0x708>
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d20f      	bcs.n	8001b08 <deflate+0x708>
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	18d1      	adds	r1, r2, r3
                                    s->pending - beg);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	695a      	ldr	r2, [r3, #20]
                strm->adler = crc32(strm->adler, s->pending_buf + beg,
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	f7fe ff05 	bl	800090c <crc32>
 8001b02:	4602      	mov	r2, r0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
            if (val == 0)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <deflate+0x71c>
                s->status = HCRC_STATE;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2267      	movs	r2, #103	; 0x67
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	e002      	b.n	8001b1c <deflate+0x71c>
        }
        else
            s->status = HCRC_STATE;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2267      	movs	r2, #103	; 0x67
 8001b1a:	605a      	str	r2, [r3, #4]
    }
    if (s->status == HCRC_STATE) {
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b67      	cmp	r3, #103	; 0x67
 8001b22:	d13d      	bne.n	8001ba0 <deflate+0x7a0>
        if (s->gzhead->hcrc) {
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d035      	beq.n	8001b9a <deflate+0x79a>
            if (s->pending + 2 > s->pending_buf_size)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	1c9a      	adds	r2, r3, #2
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d902      	bls.n	8001b42 <deflate+0x742>
                flush_pending(strm);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fc14 	bl	800136a <flush_pending>
            if (s->pending + 2 <= s->pending_buf_size) {
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	1c9a      	adds	r2, r3, #2
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d827      	bhi.n	8001ba0 <deflate+0x7a0>
                put_byte(s, (Byte)(strm->adler & 0xff));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	1c58      	adds	r0, r3, #1
 8001b5e:	6939      	ldr	r1, [r7, #16]
 8001b60:	6148      	str	r0, [r1, #20]
 8001b62:	4413      	add	r3, r2
 8001b64:	b2e2      	uxtb	r2, r4
 8001b66:	701a      	strb	r2, [r3, #0]
                put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	0a1c      	lsrs	r4, r3, #8
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	1c58      	adds	r0, r3, #1
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	6148      	str	r0, [r1, #20]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b2e2      	uxtb	r2, r4
 8001b80:	701a      	strb	r2, [r3, #0]
                strm->adler = crc32(0L, Z_NULL, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7fe fec0 	bl	800090c <crc32>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
                s->status = BUSY_STATE;
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2271      	movs	r2, #113	; 0x71
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e002      	b.n	8001ba0 <deflate+0x7a0>
            }
        }
        else
            s->status = BUSY_STATE;
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2271      	movs	r2, #113	; 0x71
 8001b9e:	605a      	str	r2, [r3, #4]
    }
#endif

    /* Flush as much pending output as possible */
    if (s->pending != 0) {
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00c      	beq.n	8001bc2 <deflate+0x7c2>
        flush_pending(strm);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fbde 	bl	800136a <flush_pending>
        if (strm->avail_out == 0) {
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d127      	bne.n	8001c06 <deflate+0x806>
             * more output space, but possibly with both pending and
             * avail_in equal to zero. There won't be anything to do,
             * but this is not an error situation so make sure we
             * return OK instead of BUF_ERROR at next call of deflate:
             */
            s->last_flush = -1;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
            return Z_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e173      	b.n	8001eaa <deflate+0xaaa>

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
    } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d11d      	bne.n	8001c06 <deflate+0x806>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	005a      	lsls	r2, r3, #1
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	dd01      	ble.n	8001bd8 <deflate+0x7d8>
 8001bd4:	2309      	movs	r3, #9
 8001bd6:	e000      	b.n	8001bda <deflate+0x7da>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	1ad2      	subs	r2, r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0059      	lsls	r1, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	dd01      	ble.n	8001bea <deflate+0x7ea>
 8001be6:	2309      	movs	r3, #9
 8001be8:	e000      	b.n	8001bec <deflate+0x7ec>
 8001bea:	2300      	movs	r3, #0
 8001bec:	1acb      	subs	r3, r1, r3
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dc09      	bgt.n	8001c06 <deflate+0x806>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d006      	beq.n	8001c06 <deflate+0x806>
               flush != Z_FINISH) {
        ERR_RETURN(strm, Z_BUF_ERROR);
 8001bf8:	4b98      	ldr	r3, [pc, #608]	; (8001e5c <deflate+0xa5c>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	f06f 0304 	mvn.w	r3, #4
 8001c04:	e151      	b.n	8001eaa <deflate+0xaaa>
    }

    /* User must not provide more input after the first FINISH: */
    if (s->status == FINISH_STATE && strm->avail_in != 0) {
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f240 229a 	movw	r2, #666	; 0x29a
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10a      	bne.n	8001c28 <deflate+0x828>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <deflate+0x828>
        ERR_RETURN(strm, Z_BUF_ERROR);
 8001c1a:	4b90      	ldr	r3, [pc, #576]	; (8001e5c <deflate+0xa5c>)
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
 8001c22:	f06f 0304 	mvn.w	r3, #4
 8001c26:	e140      	b.n	8001eaa <deflate+0xaaa>
    }

    /* Start a new block or continue the current one.
     */
    if (strm->avail_in != 0 || s->lookahead != 0 ||
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <deflate+0x84e>
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <deflate+0x84e>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8090 	beq.w	8001d60 <deflate+0x960>
        (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f240 229a 	movw	r2, #666	; 0x29a
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	f000 8089 	beq.w	8001d60 <deflate+0x960>
        block_state bstate;

        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d105      	bne.n	8001c64 <deflate+0x864>
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	6938      	ldr	r0, [r7, #16]
 8001c5c:	f001 fd20 	bl	80036a0 <deflate_huff>
 8001c60:	4603      	mov	r3, r0
 8001c62:	e019      	b.n	8001c98 <deflate+0x898>
                    (s->strategy == Z_RLE ? deflate_rle(s, flush) :
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d105      	bne.n	8001c7a <deflate+0x87a>
                    (s->strategy == Z_RLE ? deflate_rle(s, flush) :
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	6938      	ldr	r0, [r7, #16]
 8001c72:	f001 fb47 	bl	8003304 <deflate_rle>
 8001c76:	4603      	mov	r3, r0
 8001c78:	e00e      	b.n	8001c98 <deflate+0x898>
                        (*(configuration_table[s->level].func))(s, flush));
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c80:	4977      	ldr	r1, [pc, #476]	; (8001e60 <deflate+0xa60>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	6938      	ldr	r0, [r7, #16]
 8001c94:	4798      	blx	r3
 8001c96:	4603      	mov	r3, r0
        bstate = s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
 8001c98:	72fb      	strb	r3, [r7, #11]

        if (bstate == finish_started || bstate == finish_done) {
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d002      	beq.n	8001ca6 <deflate+0x8a6>
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d103      	bne.n	8001cae <deflate+0x8ae>
            s->status = FINISH_STATE;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	f240 229a 	movw	r2, #666	; 0x29a
 8001cac:	605a      	str	r2, [r3, #4]
        }
        if (bstate == need_more || bstate == finish_started) {
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <deflate+0x8ba>
 8001cb4:	7afb      	ldrb	r3, [r7, #11]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d109      	bne.n	8001cce <deflate+0x8ce>
            if (strm->avail_out == 0) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <deflate+0x8ca>
                s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
            }
            return Z_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e0ed      	b.n	8001eaa <deflate+0xaaa>
             * empty block here, this will be done at next call. This also
             * ensures that for a very small output buffer, we emit at most
             * one empty block.
             */
        }
        if (bstate == block_done) {
 8001cce:	7afb      	ldrb	r3, [r7, #11]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d145      	bne.n	8001d60 <deflate+0x960>
            if (flush == Z_PARTIAL_FLUSH) {
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d103      	bne.n	8001ce2 <deflate+0x8e2>
                _tr_align(s);
 8001cda:	6938      	ldr	r0, [r7, #16]
 8001cdc:	f004 f864 	bl	8005da8 <_tr_align>
 8001ce0:	e031      	b.n	8001d46 <deflate+0x946>
            } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d02e      	beq.n	8001d46 <deflate+0x946>
                _tr_stored_block(s, (char*)0, 0L, 0);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	6938      	ldr	r0, [r7, #16]
 8001cf0:	f004 f81e 	bl	8005d30 <_tr_stored_block>
                /* For a full flush, this empty block will be recognized
                 * as a special marker by inflate_sync().
                 */
                if (flush == Z_FULL_FLUSH) {
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d125      	bne.n	8001d46 <deflate+0x946>
                    CLEAR_HASH(s);             /* forget history */
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001d06:	3b01      	subs	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2100      	movs	r1, #0
 8001d20:	f00a f94a 	bl	800bfb8 <memset>
                    if (s->lookahead == 0) {
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <deflate+0x946>
                        s->strstart = 0;
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	66da      	str	r2, [r3, #108]	; 0x6c
                        s->block_start = 0L;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2200      	movs	r2, #0
 8001d36:	65da      	str	r2, [r3, #92]	; 0x5c
                        s->insert = 0;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
                    }
                }
            }
            flush_pending(strm);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fb0f 	bl	800136a <flush_pending>
            if (strm->avail_out == 0) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <deflate+0x960>
              s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
              return Z_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e0a4      	b.n	8001eaa <deflate+0xaaa>
            }
        }
    }
    Assert(strm->avail_out > 0, "bug2");
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <deflate+0x96e>
 8001d68:	483e      	ldr	r0, [pc, #248]	; (8001e64 <deflate+0xa64>)
 8001d6a:	f004 fd2f 	bl	80067cc <z_error>

    if (flush != Z_FINISH) return Z_OK;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d001      	beq.n	8001d78 <deflate+0x978>
 8001d74:	2300      	movs	r3, #0
 8001d76:	e098      	b.n	8001eaa <deflate+0xaaa>
    if (s->wrap <= 0) return Z_STREAM_END;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	dc01      	bgt.n	8001d84 <deflate+0x984>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e092      	b.n	8001eaa <deflate+0xaaa>

    /* Write the trailer */
#ifdef GZIP
    if (s->wrap == 2) {
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d16d      	bne.n	8001e68 <deflate+0xa68>
        put_byte(s, (Byte)(strm->adler & 0xff));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	1c58      	adds	r0, r3, #1
 8001d9a:	6939      	ldr	r1, [r7, #16]
 8001d9c:	6148      	str	r0, [r1, #20]
 8001d9e:	4413      	add	r3, r2
 8001da0:	b2e2      	uxtb	r2, r4
 8001da2:	701a      	strb	r2, [r3, #0]
        put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	0a1c      	lsrs	r4, r3, #8
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	1c58      	adds	r0, r3, #1
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	6148      	str	r0, [r1, #20]
 8001db8:	4413      	add	r3, r2
 8001dba:	b2e2      	uxtb	r2, r4
 8001dbc:	701a      	strb	r2, [r3, #0]
        put_byte(s, (Byte)((strm->adler >> 16) & 0xff));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	0c1c      	lsrs	r4, r3, #16
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	1c58      	adds	r0, r3, #1
 8001dce:	6939      	ldr	r1, [r7, #16]
 8001dd0:	6148      	str	r0, [r1, #20]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2e2      	uxtb	r2, r4
 8001dd6:	701a      	strb	r2, [r3, #0]
        put_byte(s, (Byte)((strm->adler >> 24) & 0xff));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	0e1c      	lsrs	r4, r3, #24
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	1c58      	adds	r0, r3, #1
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	6148      	str	r0, [r1, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2e2      	uxtb	r2, r4
 8001df0:	701a      	strb	r2, [r3, #0]
        put_byte(s, (Byte)(strm->total_in & 0xff));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689c      	ldr	r4, [r3, #8]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	1c58      	adds	r0, r3, #1
 8001e00:	6939      	ldr	r1, [r7, #16]
 8001e02:	6148      	str	r0, [r1, #20]
 8001e04:	4413      	add	r3, r2
 8001e06:	b2e2      	uxtb	r2, r4
 8001e08:	701a      	strb	r2, [r3, #0]
        put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a1c      	lsrs	r4, r3, #8
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	1c58      	adds	r0, r3, #1
 8001e1a:	6939      	ldr	r1, [r7, #16]
 8001e1c:	6148      	str	r0, [r1, #20]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2e2      	uxtb	r2, r4
 8001e22:	701a      	strb	r2, [r3, #0]
        put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	0c1c      	lsrs	r4, r3, #16
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	1c58      	adds	r0, r3, #1
 8001e34:	6939      	ldr	r1, [r7, #16]
 8001e36:	6148      	str	r0, [r1, #20]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2e2      	uxtb	r2, r4
 8001e3c:	701a      	strb	r2, [r3, #0]
        put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0e1c      	lsrs	r4, r3, #24
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	1c58      	adds	r0, r3, #1
 8001e4e:	6939      	ldr	r1, [r7, #16]
 8001e50:	6148      	str	r0, [r1, #20]
 8001e52:	4413      	add	r3, r2
 8001e54:	b2e2      	uxtb	r2, r4
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e014      	b.n	8001e84 <deflate+0xa84>
 8001e5a:	bf00      	nop
 8001e5c:	08010324 	.word	0x08010324
 8001e60:	0800f850 	.word	0x0800f850
 8001e64:	0800d308 	.word	0x0800d308
    }
    else
#endif
    {
        putShortMSB(s, (uInt)(strm->adler >> 16));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6938      	ldr	r0, [r7, #16]
 8001e72:	f7ff fa59 	bl	8001328 <putShortMSB>
        putShortMSB(s, (uInt)(strm->adler & 0xffff));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6938      	ldr	r0, [r7, #16]
 8001e80:	f7ff fa52 	bl	8001328 <putShortMSB>
    }
    flush_pending(strm);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fa70 	bl	800136a <flush_pending>
    /* If avail_out is zero, the application will call deflate again
     * to flush the rest.
     */
    if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dd04      	ble.n	8001e9c <deflate+0xa9c>
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	425a      	negs	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	619a      	str	r2, [r3, #24]
    return s->pending != 0 ? Z_OK : Z_STREAM_END;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bf0c      	ite	eq
 8001ea4:	2301      	moveq	r3, #1
 8001ea6:	2300      	movne	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3730      	adds	r7, #48	; 0x30
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	bf00      	nop

08001eb4 <deflateEnd>:

/* ========================================================================= */
int ZEXPORT deflateEnd (strm)
    z_streamp strm;
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    int status;

    if (strm == Z_NULL || strm->state == Z_NULL) return Z_STREAM_ERROR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <deflateEnd+0x16>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <deflateEnd+0x1c>
 8001eca:	f06f 0301 	mvn.w	r3, #1
 8001ece:	e067      	b.n	8001fa0 <deflateEnd+0xec>

    status = strm->state->status;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]
    if (status != INIT_STATE &&
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b2a      	cmp	r3, #42	; 0x2a
 8001edc:	d016      	beq.n	8001f0c <deflateEnd+0x58>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b45      	cmp	r3, #69	; 0x45
 8001ee2:	d013      	beq.n	8001f0c <deflateEnd+0x58>
        status != EXTRA_STATE &&
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b49      	cmp	r3, #73	; 0x49
 8001ee8:	d010      	beq.n	8001f0c <deflateEnd+0x58>
        status != NAME_STATE &&
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b5b      	cmp	r3, #91	; 0x5b
 8001eee:	d00d      	beq.n	8001f0c <deflateEnd+0x58>
        status != COMMENT_STATE &&
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b67      	cmp	r3, #103	; 0x67
 8001ef4:	d00a      	beq.n	8001f0c <deflateEnd+0x58>
        status != HCRC_STATE &&
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b71      	cmp	r3, #113	; 0x71
 8001efa:	d007      	beq.n	8001f0c <deflateEnd+0x58>
        status != BUSY_STATE &&
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f240 229a 	movw	r2, #666	; 0x29a
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d002      	beq.n	8001f0c <deflateEnd+0x58>
        status != FINISH_STATE) {
      return Z_STREAM_ERROR;
 8001f06:	f06f 0301 	mvn.w	r3, #1
 8001f0a:	e049      	b.n	8001fa0 <deflateEnd+0xec>
    }

    /* Deallocate in reverse order of allocations: */
    TRY_FREE(strm, strm->state->pending_buf);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <deflateEnd+0x74>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	69d2      	ldr	r2, [r2, #28]
 8001f22:	6892      	ldr	r2, [r2, #8]
 8001f24:	4611      	mov	r1, r2
 8001f26:	4798      	blx	r3
    TRY_FREE(strm, strm->state->head);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <deflateEnd+0x90>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	69d2      	ldr	r2, [r2, #28]
 8001f3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f40:	4611      	mov	r1, r2
 8001f42:	4798      	blx	r3
    TRY_FREE(strm, strm->state->prev);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <deflateEnd+0xac>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	69d2      	ldr	r2, [r2, #28]
 8001f5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4798      	blx	r3
    TRY_FREE(strm, strm->state->window);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <deflateEnd+0xc8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	69d2      	ldr	r2, [r2, #28]
 8001f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4798      	blx	r3

    ZFREE(strm, strm->state);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	69d2      	ldr	r2, [r2, #28]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4798      	blx	r3
    strm->state = Z_NULL;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]

    return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b71      	cmp	r3, #113	; 0x71
 8001f96:	d102      	bne.n	8001f9e <deflateEnd+0xea>
 8001f98:	f06f 0302 	mvn.w	r3, #2
 8001f9c:	e000      	b.n	8001fa0 <deflateEnd+0xec>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <read_buf>:
 */
local int read_buf(strm, buf, size)
    z_streamp strm;
    Bytef *buf;
    unsigned size;
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
    unsigned len = strm->avail_in;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	617b      	str	r3, [r7, #20]

    if (len > size) len = size;
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d901      	bls.n	8001fc6 <read_buf+0x1e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	617b      	str	r3, [r7, #20]
    if (len == 0) return 0;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <read_buf+0x28>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e038      	b.n	8002042 <read_buf+0x9a>

    strm->avail_in  -= len;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	605a      	str	r2, [r3, #4]

    zmemcpy(buf, strm->next_in, len);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	68b8      	ldr	r0, [r7, #8]
 8001fe6:	f009 ffd9 	bl	800bf9c <memcpy>
    if (strm->state->wrap == 1) {
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10a      	bne.n	800200a <read_buf+0x62>
        strm->adler = adler32(strm->adler, buf, len);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa49 	bl	8000494 <adler32>
 8002002:	4602      	mov	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
 8002008:	e00e      	b.n	8002028 <read_buf+0x80>
    }
#ifdef GZIP
    else if (strm->state->wrap == 2) {
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d109      	bne.n	8002028 <read_buf+0x80>
        strm->adler = crc32(strm->adler, buf, len);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fc75 	bl	800090c <crc32>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
    }
#endif
    strm->next_in  += len;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	441a      	add	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]
    strm->total_in += len;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	441a      	add	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	609a      	str	r2, [r3, #8]

    return (int)len;
 8002040:	697b      	ldr	r3, [r7, #20]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <lm_init>:
/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
local void lm_init (s)
    deflate_state *s;
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    s->window_size = (ulg)2L*s->w_size;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	005a      	lsls	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c

    CLEAR_HASH(s);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800206a:	3b01      	subs	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	2200      	movs	r2, #0
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	3b01      	subs	r3, #1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	461a      	mov	r2, r3
 8002082:	2100      	movs	r1, #0
 8002084:	f009 ff98 	bl	800bfb8 <memset>

    /* Set the default configuration parameters:
     */
    s->max_lazy_match   = configuration_table[s->level].max_lazy;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800208e:	492c      	ldr	r1, [pc, #176]	; (8002140 <lm_init+0xf4>)
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	3302      	adds	r3, #2
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    s->good_match       = configuration_table[s->level].good_length;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020ac:	4924      	ldr	r1, [pc, #144]	; (8002140 <lm_init+0xf4>)
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    s->nice_match       = configuration_table[s->level].nice_length;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020c8:	491d      	ldr	r1, [pc, #116]	; (8002140 <lm_init+0xf4>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3304      	adds	r3, #4
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    s->max_chain_length = configuration_table[s->level].max_chain;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020e6:	4916      	ldr	r1, [pc, #88]	; (8002140 <lm_init+0xf4>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	3306      	adds	r3, #6
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	67da      	str	r2, [r3, #124]	; 0x7c

    s->strstart = 0;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	66da      	str	r2, [r3, #108]	; 0x6c
    s->block_start = 0L;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
    s->lookahead = 0;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	675a      	str	r2, [r3, #116]	; 0x74
    s->insert = 0;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002114:	461a      	mov	r2, r3
 8002116:	2300      	movs	r3, #0
 8002118:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
    s->match_length = s->prev_length = MIN_MATCH-1;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	679a      	str	r2, [r3, #120]	; 0x78
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	661a      	str	r2, [r3, #96]	; 0x60
    s->match_available = 0;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	669a      	str	r2, [r3, #104]	; 0x68
    s->ins_h = 0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	649a      	str	r2, [r3, #72]	; 0x48
#ifndef FASTEST
#ifdef ASMV
    match_init(); /* initialize the asm code */
#endif
#endif
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800f850 	.word	0x0800f850

08002144 <longest_match>:
 * match.S. The code will be functionally equivalent.
 */
local uInt longest_match(s, cur_match)
    deflate_state *s;
    IPos cur_match;                             /* current match */
{
 8002144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002148:	b089      	sub	sp, #36	; 0x24
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
    unsigned chain_length = s->max_chain_length;/* max hash chain length */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002154:	61fb      	str	r3, [r7, #28]
    register Bytef *scan = s->window + s->strstart; /* current string */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800215e:	18d4      	adds	r4, r2, r3
    register Bytef *match;                       /* matched string */
    register int len;                           /* length of current match */
    int best_len = s->prev_length;              /* best match length so far */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002164:	61bb      	str	r3, [r7, #24]
    int nice_match = s->nice_match;             /* stop if match long enough */
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	617b      	str	r3, [r7, #20]
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
        s->strstart - (IPos)MAX_DIST(s) : NIL;
 800217a:	429a      	cmp	r2, r3
 800217c:	d907      	bls.n	800218e <longest_match+0x4a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f503 7383 	add.w	r3, r3, #262	; 0x106
 800218c:	e000      	b.n	8002190 <longest_match+0x4c>
 800218e:	2300      	movs	r3, #0
    IPos limit = s->strstart > (IPos)MAX_DIST(s) ?
 8002190:	613b      	str	r3, [r7, #16]
    /* Stop when cur_match becomes <= limit. To simplify the code,
     * we prevent matches with the string of window index 0.
     */
    Posf *prev = s->prev;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	60fb      	str	r3, [r7, #12]
    uInt wmask = s->w_mask;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	60bb      	str	r3, [r7, #8]
     */
    register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
    register ush scan_start = *(ushf*)scan;
    register ush scan_end   = *(ushf*)(scan+best_len-1);
#else
    register Bytef *strend = s->window + s->strstart + MAX_MATCH;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80021aa:	18d6      	adds	r6, r2, r3
    register Byte scan_end1  = scan[best_len-1];
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	4423      	add	r3, r4
 80021b2:	f893 8000 	ldrb.w	r8, [r3]
    register Byte scan_end   = scan[best_len];
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4423      	add	r3, r4
 80021ba:	f893 9000 	ldrb.w	r9, [r3]
#endif

    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
     * It is easy to get rid of this optimization if necessary.
     */
    Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	2b07      	cmp	r3, #7
 80021c4:	d802      	bhi.n	80021cc <longest_match+0x88>
 80021c6:	4862      	ldr	r0, [pc, #392]	; (8002350 <longest_match+0x20c>)
 80021c8:	f004 fb00 	bl	80067cc <z_error>

    /* Do not waste too much time if we already have a good match: */
    if (s->prev_length >= s->good_match) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <longest_match+0x9c>
        chain_length >>= 2;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	61fb      	str	r3, [r7, #28]
    }
    /* Do not look for matches beyond the end of the input. This is necessary
     * to make deflate deterministic.
     */
    if ((uInt)nice_match > s->lookahead) nice_match = s->lookahead;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d202      	bcs.n	80021f0 <longest_match+0xac>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ee:	617b      	str	r3, [r7, #20]

    Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d902      	bls.n	8002206 <longest_match+0xc2>
 8002200:	4854      	ldr	r0, [pc, #336]	; (8002354 <longest_match+0x210>)
 8002202:	f004 fae3 	bl	80067cc <z_error>

    do {
        Assert(cur_match < s->strstart, "no future");
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d302      	bcc.n	8002216 <longest_match+0xd2>
 8002210:	4851      	ldr	r0, [pc, #324]	; (8002358 <longest_match+0x214>)
 8002212:	f004 fadb 	bl	80067cc <z_error>
        match = s->window + cur_match;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	18d5      	adds	r5, r2, r3
        len = (MAX_MATCH - 1) - (int)(strend-scan);
        scan = strend - (MAX_MATCH-1);

#else /* UNALIGNED_OK */

        if (match[best_len]   != scan_end  ||
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	442b      	add	r3, r5
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4599      	cmp	r9, r3
 8002226:	d16e      	bne.n	8002306 <longest_match+0x1c2>
            match[best_len-1] != scan_end1 ||
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	3b01      	subs	r3, #1
 800222c:	442b      	add	r3, r5
 800222e:	781b      	ldrb	r3, [r3, #0]
        if (match[best_len]   != scan_end  ||
 8002230:	4598      	cmp	r8, r3
 8002232:	d168      	bne.n	8002306 <longest_match+0x1c2>
            *match            != *scan     ||
 8002234:	782a      	ldrb	r2, [r5, #0]
 8002236:	7823      	ldrb	r3, [r4, #0]
            match[best_len-1] != scan_end1 ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d164      	bne.n	8002306 <longest_match+0x1c2>
            *match            != *scan     ||
 800223c:	3501      	adds	r5, #1
            *++match          != scan[1])      continue;
 800223e:	782a      	ldrb	r2, [r5, #0]
 8002240:	1c63      	adds	r3, r4, #1
 8002242:	781b      	ldrb	r3, [r3, #0]
            *match            != *scan     ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d15e      	bne.n	8002306 <longest_match+0x1c2>
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2, match++;
 8002248:	3402      	adds	r4, #2
 800224a:	3501      	adds	r5, #1
        Assert(*scan == *match, "match[2]?");
 800224c:	7822      	ldrb	r2, [r4, #0]
 800224e:	782b      	ldrb	r3, [r5, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d002      	beq.n	800225a <longest_match+0x116>
 8002254:	4841      	ldr	r0, [pc, #260]	; (800235c <longest_match+0x218>)
 8002256:	f004 fab9 	bl	80067cc <z_error>
        do {
        } while (*++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 *++scan == *++match && *++scan == *++match &&
                 scan < strend);
 800225a:	3401      	adds	r4, #1
        } while (*++scan == *++match && *++scan == *++match &&
 800225c:	7822      	ldrb	r2, [r4, #0]
                 scan < strend);
 800225e:	3501      	adds	r5, #1
        } while (*++scan == *++match && *++scan == *++match &&
 8002260:	782b      	ldrb	r3, [r5, #0]
                 scan < strend);
 8002262:	429a      	cmp	r2, r3
 8002264:	d12b      	bne.n	80022be <longest_match+0x17a>
        } while (*++scan == *++match && *++scan == *++match &&
 8002266:	3401      	adds	r4, #1
 8002268:	7822      	ldrb	r2, [r4, #0]
 800226a:	3501      	adds	r5, #1
 800226c:	782b      	ldrb	r3, [r5, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d125      	bne.n	80022be <longest_match+0x17a>
 8002272:	3401      	adds	r4, #1
                 *++scan == *++match && *++scan == *++match &&
 8002274:	7822      	ldrb	r2, [r4, #0]
        } while (*++scan == *++match && *++scan == *++match &&
 8002276:	3501      	adds	r5, #1
                 *++scan == *++match && *++scan == *++match &&
 8002278:	782b      	ldrb	r3, [r5, #0]
        } while (*++scan == *++match && *++scan == *++match &&
 800227a:	429a      	cmp	r2, r3
 800227c:	d11f      	bne.n	80022be <longest_match+0x17a>
                 *++scan == *++match && *++scan == *++match &&
 800227e:	3401      	adds	r4, #1
 8002280:	7822      	ldrb	r2, [r4, #0]
 8002282:	3501      	adds	r5, #1
 8002284:	782b      	ldrb	r3, [r5, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d119      	bne.n	80022be <longest_match+0x17a>
 800228a:	3401      	adds	r4, #1
                 *++scan == *++match && *++scan == *++match &&
 800228c:	7822      	ldrb	r2, [r4, #0]
                 *++scan == *++match && *++scan == *++match &&
 800228e:	3501      	adds	r5, #1
                 *++scan == *++match && *++scan == *++match &&
 8002290:	782b      	ldrb	r3, [r5, #0]
                 *++scan == *++match && *++scan == *++match &&
 8002292:	429a      	cmp	r2, r3
 8002294:	d113      	bne.n	80022be <longest_match+0x17a>
                 *++scan == *++match && *++scan == *++match &&
 8002296:	3401      	adds	r4, #1
 8002298:	7822      	ldrb	r2, [r4, #0]
 800229a:	3501      	adds	r5, #1
 800229c:	782b      	ldrb	r3, [r5, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d10d      	bne.n	80022be <longest_match+0x17a>
 80022a2:	3401      	adds	r4, #1
                 *++scan == *++match && *++scan == *++match &&
 80022a4:	7822      	ldrb	r2, [r4, #0]
                 *++scan == *++match && *++scan == *++match &&
 80022a6:	3501      	adds	r5, #1
                 *++scan == *++match && *++scan == *++match &&
 80022a8:	782b      	ldrb	r3, [r5, #0]
                 *++scan == *++match && *++scan == *++match &&
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d107      	bne.n	80022be <longest_match+0x17a>
                 *++scan == *++match && *++scan == *++match &&
 80022ae:	3401      	adds	r4, #1
 80022b0:	7822      	ldrb	r2, [r4, #0]
 80022b2:	3501      	adds	r5, #1
 80022b4:	782b      	ldrb	r3, [r5, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d101      	bne.n	80022be <longest_match+0x17a>
 80022ba:	42b4      	cmp	r4, r6
 80022bc:	d3cd      	bcc.n	800225a <longest_match+0x116>

        Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	3b01      	subs	r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	429c      	cmp	r4, r3
 80022cc:	d902      	bls.n	80022d4 <longest_match+0x190>
 80022ce:	4824      	ldr	r0, [pc, #144]	; (8002360 <longest_match+0x21c>)
 80022d0:	f004 fa7c 	bl	80067cc <z_error>

        len = MAX_MATCH - (int)(strend - scan);
 80022d4:	1b33      	subs	r3, r6, r4
 80022d6:	f5c3 7581 	rsb	r5, r3, #258	; 0x102
        scan = strend - MAX_MATCH;
 80022da:	f5a6 7481 	sub.w	r4, r6, #258	; 0x102

#endif /* UNALIGNED_OK */

        if (len > best_len) {
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	429d      	cmp	r5, r3
 80022e2:	dd11      	ble.n	8002308 <longest_match+0x1c4>
            s->match_start = cur_match;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	671a      	str	r2, [r3, #112]	; 0x70
            best_len = len;
 80022ea:	61bd      	str	r5, [r7, #24]
            if (len >= nice_match) break;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	429d      	cmp	r5, r3
 80022f0:	da1e      	bge.n	8002330 <longest_match+0x1ec>
#ifdef UNALIGNED_OK
            scan_end = *(ushf*)(scan+best_len-1);
#else
            scan_end1  = scan[best_len-1];
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	4423      	add	r3, r4
 80022f8:	f893 8000 	ldrb.w	r8, [r3]
            scan_end   = scan[best_len];
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	4423      	add	r3, r4
 8002300:	f893 9000 	ldrb.w	r9, [r3]
 8002304:	e000      	b.n	8002308 <longest_match+0x1c4>
            *++match          != scan[1])      continue;
 8002306:	bf00      	nop
#endif
        }
    } while ((cur_match = prev[cur_match & wmask]) > limit
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	603b      	str	r3, [r7, #0]
             && --chain_length != 0);
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d908      	bls.n	8002332 <longest_match+0x1ee>
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	3b01      	subs	r3, #1
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f47f af6c 	bne.w	8002206 <longest_match+0xc2>
 800232e:	e000      	b.n	8002332 <longest_match+0x1ee>
            if (len >= nice_match) break;
 8002330:	bf00      	nop

    if ((uInt)best_len <= s->lookahead) return (uInt)best_len;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	429a      	cmp	r2, r3
 800233a:	d301      	bcc.n	8002340 <longest_match+0x1fc>
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	e001      	b.n	8002344 <longest_match+0x200>
    return s->lookahead;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 8002344:	4618      	mov	r0, r3
 8002346:	3724      	adds	r7, #36	; 0x24
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800234e:	bf00      	nop
 8002350:	0800d310 	.word	0x0800d310
 8002354:	0800d320 	.word	0x0800d320
 8002358:	0800d330 	.word	0x0800d330
 800235c:	0800d33c 	.word	0x0800d33c
 8002360:	0800d348 	.word	0x0800d348

08002364 <check_match>:
 */
local void check_match(s, start, match, length)
    deflate_state *s;
    IPos start, match;
    int length;
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b087      	sub	sp, #28
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
    /* check that the match is indeed a match */
    if (zmemcmp(s->window + match,
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	18d0      	adds	r0, r2, r3
                s->window + start, length) != EQUAL) {
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4413      	add	r3, r2
    if (zmemcmp(s->window + match,
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	f009 fdf9 	bl	800bf7c <memcmp>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d028      	beq.n	80023e2 <check_match+0x7e>
        fprintf(stderr, " start %u, match %u, length %d\n",
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <check_match+0xcc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68d8      	ldr	r0, [r3, #12]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	4925      	ldr	r1, [pc, #148]	; (8002434 <check_match+0xd0>)
 80023a0:	f009 fcf4 	bl	800bd8c <fiprintf>
                start, match, length);
        do {
            fprintf(stderr, "%c%c", s->window[match++], s->window[start++]);
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <check_match+0xcc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68d8      	ldr	r0, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	1c59      	adds	r1, r3, #1
 80023b2:	6079      	str	r1, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461c      	mov	r4, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1c59      	adds	r1, r3, #1
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	4622      	mov	r2, r4
 80023ca:	491b      	ldr	r1, [pc, #108]	; (8002438 <check_match+0xd4>)
 80023cc:	f009 fcde 	bl	800bd8c <fiprintf>
        } while (--length != 0);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e3      	bne.n	80023a4 <check_match+0x40>
        z_error("invalid match");
 80023dc:	4817      	ldr	r0, [pc, #92]	; (800243c <check_match+0xd8>)
 80023de:	f004 f9f5 	bl	80067cc <z_error>
    }
    if (z_verbose > 1) {
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <check_match+0xdc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	dd1e      	ble.n	8002428 <check_match+0xc4>
        fprintf(stderr,"\\[%d,%d]", start-match, length);
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <check_match+0xcc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68d8      	ldr	r0, [r3, #12]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	1ad2      	subs	r2, r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	4912      	ldr	r1, [pc, #72]	; (8002444 <check_match+0xe0>)
 80023fa:	f009 fcc7 	bl	800bd8c <fiprintf>
        do { putc(s->window[start++], stderr); } while (--length != 0);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1c59      	adds	r1, r3, #1
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	4413      	add	r3, r2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <check_match+0xcc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f00a f9e8 	bl	800c7ec <putc>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	3b01      	subs	r3, #1
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ea      	bne.n	80023fe <check_match+0x9a>
    }
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bd90      	pop	{r4, r7, pc}
 8002430:	20000060 	.word	0x20000060
 8002434:	0800d354 	.word	0x0800d354
 8002438:	0800d374 	.word	0x0800d374
 800243c:	0800d37c 	.word	0x0800d37c
 8002440:	20003260 	.word	0x20003260
 8002444:	0800d38c 	.word	0x0800d38c

08002448 <fill_window>:
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
local void fill_window(s)
    deflate_state *s;
{
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    register unsigned n, m;
    register Posf *p;
    unsigned more;    /* Amount of free space at the end of the window. */
    uInt wsize = s->w_size;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	613b      	str	r3, [r7, #16]

    Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800245e:	d302      	bcc.n	8002466 <fill_window+0x1e>
 8002460:	4882      	ldr	r0, [pc, #520]	; (800266c <fill_window+0x224>)
 8002462:	f004 f9b3 	bl	80067cc <z_error>

    do {
        more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	61fb      	str	r3, [r7, #28]
        }

        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s->strstart >= wsize+MAX_DIST(s)) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	440b      	add	r3, r1
 8002484:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8002488:	429a      	cmp	r2, r3
 800248a:	d348      	bcc.n	800251e <fill_window+0xd6>

            zmemcpy(s->window, s->window+wsize, (unsigned)wsize);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4619      	mov	r1, r3
 800249c:	f009 fd7e 	bl	800bf9c <memcpy>
            s->match_start -= wsize;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	671a      	str	r2, [r3, #112]	; 0x70
            s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad2      	subs	r2, r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	66da      	str	r2, [r3, #108]	; 0x6c
            s->block_start -= (long) wsize;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad2      	subs	r2, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c
               at the expense of memory usage). We slide even when level == 0
               to keep the hash table consistent if we switch back to level > 0
               later. (Using level 0 permanently is not an optimal usage of
               zlib, so we don't care about this pathological case.)
             */
            n = s->hash_size;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
            p = &s->head[n];
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024cc:	0063      	lsls	r3, r4, #1
 80024ce:	18d5      	adds	r5, r2, r3
            do {
                m = *--p;
 80024d0:	3d02      	subs	r5, #2
 80024d2:	882b      	ldrh	r3, [r5, #0]
 80024d4:	461e      	mov	r6, r3
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	429e      	cmp	r6, r3
 80024da:	d303      	bcc.n	80024e4 <fill_window+0x9c>
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1af3      	subs	r3, r6, r3
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	e000      	b.n	80024e6 <fill_window+0x9e>
 80024e4:	2300      	movs	r3, #0
 80024e6:	802b      	strh	r3, [r5, #0]
            } while (--n);
 80024e8:	3c01      	subs	r4, #1
 80024ea:	2c00      	cmp	r4, #0
 80024ec:	d1f0      	bne.n	80024d0 <fill_window+0x88>

            n = wsize;
 80024ee:	693c      	ldr	r4, [r7, #16]
#ifndef FASTEST
            p = &s->prev[n];
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f4:	0063      	lsls	r3, r4, #1
 80024f6:	18d5      	adds	r5, r2, r3
            do {
                m = *--p;
 80024f8:	3d02      	subs	r5, #2
 80024fa:	882b      	ldrh	r3, [r5, #0]
 80024fc:	461e      	mov	r6, r3
                *p = (Pos)(m >= wsize ? m-wsize : NIL);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	429e      	cmp	r6, r3
 8002502:	d303      	bcc.n	800250c <fill_window+0xc4>
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1af3      	subs	r3, r6, r3
 8002508:	b29b      	uxth	r3, r3
 800250a:	e000      	b.n	800250e <fill_window+0xc6>
 800250c:	2300      	movs	r3, #0
 800250e:	802b      	strh	r3, [r5, #0]
                /* If n is not on any hash chain, prev[n] is garbage but
                 * its value will never be used.
                 */
            } while (--n);
 8002510:	3c01      	subs	r4, #1
 8002512:	2c00      	cmp	r4, #0
 8002514:	d1f0      	bne.n	80024f8 <fill_window+0xb0>
#endif
            more += wsize;
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	61fb      	str	r3, [r7, #28]
        }
        if (s->strm->avail_in == 0) break;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a5 	beq.w	8002674 <fill_window+0x22c>
         *   window_size == input_size + MIN_LOOKAHEAD  &&
         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        Assert(more >= 2, "more < 2");
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d802      	bhi.n	8002536 <fill_window+0xee>
 8002530:	484f      	ldr	r0, [pc, #316]	; (8002670 <fill_window+0x228>)
 8002532:	f004 f94b 	bl	80067cc <z_error>

        n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002546:	440b      	add	r3, r1
 8002548:	4413      	add	r3, r2
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	4619      	mov	r1, r3
 800254e:	f7ff fd2b 	bl	8001fa8 <read_buf>
 8002552:	4603      	mov	r3, r0
 8002554:	461c      	mov	r4, r3
        s->lookahead += n;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255a:	18e2      	adds	r2, r4, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize the hash value now that we have some input: */
        if (s->lookahead + s->insert >= MIN_MATCH) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256a:	f8d3 36b4 	ldr.w	r3, [r3, #1716]	; 0x6b4
 800256e:	4413      	add	r3, r2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d96f      	bls.n	8002654 <fill_window+0x20c>
            uInt str = s->strstart - s->insert;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257e:	f8d3 36b4 	ldr.w	r3, [r3, #1716]	; 0x6b4
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	61bb      	str	r3, [r7, #24]
            s->ins_h = s->window[str];
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	649a      	str	r2, [r3, #72]	; 0x48
            UPDATE_HASH(s, s->ins_h, s->window[str + 1]);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	3201      	adds	r2, #1
 80025aa:	440a      	add	r2, r1
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	405a      	eors	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	401a      	ands	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	649a      	str	r2, [r3, #72]	; 0x48
#if MIN_MATCH != 3
            Call UPDATE_HASH() MIN_MATCH-3 more times
#endif
            while (s->insert) {
 80025ba:	e042      	b.n	8002642 <fill_window+0x1fa>
                UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	3202      	adds	r2, #2
 80025d0:	440a      	add	r2, r1
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	405a      	eors	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	401a      	ands	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	649a      	str	r2, [r3, #72]	; 0x48
#ifndef FASTEST
                s->prev[str & s->w_mask] = s->head[s->ins_h];
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4003      	ands	r3, r0
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	801a      	strh	r2, [r3, #0]
#endif
                s->head[s->ins_h] = (Pos)str;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	b292      	uxth	r2, r2
 8002610:	801a      	strh	r2, [r3, #0]
                str++;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3301      	adds	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
                s->insert--;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261e:	f8d3 36b4 	ldr.w	r3, [r3, #1716]	; 0x6b4
 8002622:	3b01      	subs	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800262a:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
                if (s->lookahead + s->insert < MIN_MATCH)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	f8d3 36b4 	ldr.w	r3, [r3, #1716]	; 0x6b4
 800263c:	4413      	add	r3, r2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d907      	bls.n	8002652 <fill_window+0x20a>
            while (s->insert) {
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	f8d3 36b4 	ldr.w	r3, [r3, #1716]	; 0x6b4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1b5      	bne.n	80025bc <fill_window+0x174>
 8002650:	e000      	b.n	8002654 <fill_window+0x20c>
                    break;
 8002652:	bf00      	nop
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

    } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002658:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800265c:	d20b      	bcs.n	8002676 <fill_window+0x22e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f47f aefe 	bne.w	8002466 <fill_window+0x1e>
 800266a:	e004      	b.n	8002676 <fill_window+0x22e>
 800266c:	0800d398 	.word	0x0800d398
 8002670:	0800d3b4 	.word	0x0800d3b4
        if (s->strm->avail_in == 0) break;
 8002674:	bf00      	nop
     * the use of uninitialized (or uninitialised as Julian writes) bytes by
     * the longest match routines.  Update the high water mark for the next
     * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
     * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
     */
    if (s->high_water < s->window_size) {
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267c:	f8d3 26c8 	ldr.w	r2, [r3, #1736]	; 0x6c8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	429a      	cmp	r2, r3
 8002686:	d26c      	bcs.n	8002762 <fill_window+0x31a>
        ulg curr = s->strstart + (ulg)(s->lookahead);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	4413      	add	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
        ulg init;

        if (s->high_water < curr) {
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269a:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	; 0x6c8
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d91d      	bls.n	80026e0 <fill_window+0x298>
            /* Previous high water mark below current data -- zero WIN_INIT
             * bytes or up to end of window, whichever is less.
             */
            init = s->window_size - curr;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
            if (init > WIN_INIT)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80026b4:	d902      	bls.n	80026bc <fill_window+0x274>
                init = WIN_INIT;
 80026b6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80026ba:	617b      	str	r3, [r7, #20]
            zmemzero(s->window + curr, (unsigned)init);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f009 fc75 	bl	800bfb8 <memset>
            s->high_water = curr + init;
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	4413      	add	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026da:	f8c2 36c8 	str.w	r3, [r2, #1736]	; 0x6c8
 80026de:	e040      	b.n	8002762 <fill_window+0x31a>
        }
        else if (s->high_water < (ulg)curr + WIN_INIT) {
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e6:	f8d3 26c8 	ldr.w	r2, [r3, #1736]	; 0x6c8
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d236      	bcs.n	8002762 <fill_window+0x31a>
            /* High water mark at or above current data, but below current data
             * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
             * to end of window, whichever is less.
             */
            init = (ulg)curr + WIN_INIT - s->high_water;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fa:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	; 0x6c8
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8002706:	617b      	str	r3, [r7, #20]
            if (init > s->window_size - s->high_water)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002712:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	; 0x6c8
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	429a      	cmp	r2, r3
 800271c:	d908      	bls.n	8002730 <fill_window+0x2e8>
                init = s->window_size - s->high_water;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002728:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	; 0x6c8
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	617b      	str	r3, [r7, #20]
            zmemzero(s->window + s->high_water, (unsigned)init);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273a:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	; 0x6c8
 800273e:	4413      	add	r3, r2
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f009 fc37 	bl	800bfb8 <memset>
            s->high_water += init;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	f8d3 26c8 	ldr.w	r2, [r3, #1736]	; 0x6c8
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	4413      	add	r3, r2
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800275e:	f8c2 36c8 	str.w	r3, [r2, #1736]	; 0x6c8
        }
    }

    Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 800276e:	429a      	cmp	r2, r3
 8002770:	d902      	bls.n	8002778 <fill_window+0x330>
 8002772:	4803      	ldr	r0, [pc, #12]	; (8002780 <fill_window+0x338>)
 8002774:	f004 f82a 	bl	80067cc <z_error>
           "not enough room for search");
}
 8002778:	bf00      	nop
 800277a:	3724      	adds	r7, #36	; 0x24
 800277c:	46bd      	mov	sp, r7
 800277e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002780:	0800d3c0 	.word	0x0800d3c0

08002784 <deflate_stored>:
 * window to pending_buf.
 */
local block_state deflate_stored(s, flush)
    deflate_state *s;
    int flush;
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
    /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
     * to pending_buf_size, and each stored block has a 5 byte header:
     */
    ulg max_block_size = 0xffff;
 800278e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002792:	60fb      	str	r3, [r7, #12]
    ulg max_start;

    if (max_block_size > s->pending_buf_size - 5) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	3b05      	subs	r3, #5
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d903      	bls.n	80027a8 <deflate_stored+0x24>
        max_block_size = s->pending_buf_size - 5;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	3b05      	subs	r3, #5
 80027a6:	60fb      	str	r3, [r7, #12]
    }

    /* Copy as much as possible from input to output: */
    for (;;) {
        /* Fill the window as much as possible: */
        if (s->lookahead <= 1) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d823      	bhi.n	80027f8 <deflate_stored+0x74>

            Assert(s->strstart < s->w_size+MAX_DIST(s) ||
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027bc:	3b83      	subs	r3, #131	; 0x83
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d308      	bcc.n	80027d6 <deflate_stored+0x52>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027cc:	4293      	cmp	r3, r2
 80027ce:	da02      	bge.n	80027d6 <deflate_stored+0x52>
 80027d0:	4897      	ldr	r0, [pc, #604]	; (8002a30 <deflate_stored+0x2ac>)
 80027d2:	f003 fffb 	bl	80067cc <z_error>
                   s->block_start >= (long)s->w_size, "slide too late");

            fill_window(s);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fe36 	bl	8002448 <fill_window>
            if (s->lookahead == 0 && flush == Z_NO_FLUSH) return need_more;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <deflate_stored+0x6a>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <deflate_stored+0x6a>
 80027ea:	2300      	movs	r3, #0
 80027ec:	e11b      	b.n	8002a26 <deflate_stored+0x2a2>

            if (s->lookahead == 0) break; /* flush the current block */
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 809c 	beq.w	8002930 <deflate_stored+0x1ac>
        }
        Assert(s->block_start >= 0L, "block gone");
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da02      	bge.n	8002806 <deflate_stored+0x82>
 8002800:	488c      	ldr	r0, [pc, #560]	; (8002a34 <deflate_stored+0x2b0>)
 8002802:	f003 ffe3 	bl	80067cc <z_error>

        s->strstart += s->lookahead;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	441a      	add	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	66da      	str	r2, [r3, #108]	; 0x6c
        s->lookahead = 0;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	675a      	str	r2, [r3, #116]	; 0x74

        /* Emit a stored block if pending_buf will be full: */
        max_start = s->block_start + max_block_size;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	60bb      	str	r3, [r7, #8]
        if (s->strstart == 0 || (ulg)s->strstart >= max_start) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <deflate_stored+0xb4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	d83b      	bhi.n	80028b0 <deflate_stored+0x12c>
            /* strstart == 0 is possible when wraparound on 16-bit machine */
            s->lookahead = (uInt)(s->strstart - max_start);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1ad2      	subs	r2, r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	675a      	str	r2, [r3, #116]	; 0x74
            s->strstart = (uInt)max_start;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	66da      	str	r2, [r3, #108]	; 0x6c
            FLUSH_BLOCK(s, 0);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	2b00      	cmp	r3, #0
 8002850:	db05      	blt.n	800285e <deflate_stored+0xda>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800285a:	1899      	adds	r1, r3, r2
 800285c:	e000      	b.n	8002860 <deflate_stored+0xdc>
 800285e:	2100      	movs	r1, #0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	461a      	mov	r2, r3
 800286e:	2300      	movs	r3, #0
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f003 facd 	bl	8005e10 <_tr_flush_block>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fd70 	bl	800136a <flush_pending>
 800288a:	4b6b      	ldr	r3, [pc, #428]	; (8002a38 <deflate_stored+0x2b4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	dd07      	ble.n	80028a2 <deflate_stored+0x11e>
 8002892:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <deflate_stored+0x2b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2207      	movs	r2, #7
 800289a:	2101      	movs	r1, #1
 800289c:	4868      	ldr	r0, [pc, #416]	; (8002a40 <deflate_stored+0x2bc>)
 800289e:	f009 fb27 	bl	800bef0 <fwrite>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <deflate_stored+0x12c>
 80028ac:	2300      	movs	r3, #0
 80028ae:	e0ba      	b.n	8002a26 <deflate_stored+0x2a2>
        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s->strstart - (uInt)s->block_start >= MAX_DIST(s)) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028b8:	1a9a      	subs	r2, r3, r2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80028c2:	429a      	cmp	r2, r3
 80028c4:	f4ff af70 	bcc.w	80027a8 <deflate_stored+0x24>
            FLUSH_BLOCK(s, 0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db05      	blt.n	80028dc <deflate_stored+0x158>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028d8:	1899      	adds	r1, r3, r2
 80028da:	e000      	b.n	80028de <deflate_stored+0x15a>
 80028dc:	2100      	movs	r1, #0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f003 fa8e 	bl	8005e10 <_tr_flush_block>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f8:	461a      	mov	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fd31 	bl	800136a <flush_pending>
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <deflate_stored+0x2b4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	dd07      	ble.n	8002920 <deflate_stored+0x19c>
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <deflate_stored+0x2b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2207      	movs	r2, #7
 8002918:	2101      	movs	r1, #1
 800291a:	4849      	ldr	r0, [pc, #292]	; (8002a40 <deflate_stored+0x2bc>)
 800291c:	f009 fae8 	bl	800bef0 <fwrite>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f47f af3e 	bne.w	80027a8 <deflate_stored+0x24>
 800292c:	2300      	movs	r3, #0
 800292e:	e07a      	b.n	8002a26 <deflate_stored+0x2a2>
            if (s->lookahead == 0) break; /* flush the current block */
 8002930:	bf00      	nop
        }
    }
    s->insert = 0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002938:	461a      	mov	r2, r3
 800293a:	2300      	movs	r3, #0
 800293c:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
    if (flush == Z_FINISH) {
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d134      	bne.n	80029b0 <deflate_stored+0x22c>
        FLUSH_BLOCK(s, 1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	2b00      	cmp	r3, #0
 800294c:	db05      	blt.n	800295a <deflate_stored+0x1d6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002956:	1899      	adds	r1, r3, r2
 8002958:	e000      	b.n	800295c <deflate_stored+0x1d8>
 800295a:	2100      	movs	r1, #0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002960:	461a      	mov	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	461a      	mov	r2, r3
 800296a:	2301      	movs	r3, #1
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f003 fa4f 	bl	8005e10 <_tr_flush_block>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe fcf2 	bl	800136a <flush_pending>
 8002986:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <deflate_stored+0x2b4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	dd07      	ble.n	800299e <deflate_stored+0x21a>
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <deflate_stored+0x2b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2207      	movs	r2, #7
 8002996:	2101      	movs	r1, #1
 8002998:	4829      	ldr	r0, [pc, #164]	; (8002a40 <deflate_stored+0x2bc>)
 800299a:	f009 faa9 	bl	800bef0 <fwrite>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <deflate_stored+0x228>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e03c      	b.n	8002a26 <deflate_stored+0x2a2>
        return finish_done;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e03a      	b.n	8002a26 <deflate_stored+0x2a2>
    }
    if ((long)s->strstart > s->block_start)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	429a      	cmp	r2, r3
 80029bc:	dd32      	ble.n	8002a24 <deflate_stored+0x2a0>
        FLUSH_BLOCK(s, 0);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db05      	blt.n	80029d2 <deflate_stored+0x24e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029ce:	1899      	adds	r1, r3, r2
 80029d0:	e000      	b.n	80029d4 <deflate_stored+0x250>
 80029d2:	2100      	movs	r1, #0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d8:	461a      	mov	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	2300      	movs	r3, #0
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f003 fa13 	bl	8005e10 <_tr_flush_block>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fcb6 	bl	800136a <flush_pending>
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <deflate_stored+0x2b4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	dd07      	ble.n	8002a16 <deflate_stored+0x292>
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <deflate_stored+0x2b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	2101      	movs	r1, #1
 8002a10:	480b      	ldr	r0, [pc, #44]	; (8002a40 <deflate_stored+0x2bc>)
 8002a12:	f009 fa6d 	bl	800bef0 <fwrite>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <deflate_stored+0x2a0>
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <deflate_stored+0x2a2>
    return block_done;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	0800d3dc 	.word	0x0800d3dc
 8002a34:	0800d3ec 	.word	0x0800d3ec
 8002a38:	20003260 	.word	0x20003260
 8002a3c:	20000060 	.word	0x20000060
 8002a40:	0800d3f8 	.word	0x0800d3f8

08002a44 <deflate_fast>:
 * matches. It is used only for the fast compression options.
 */
local block_state deflate_fast(s, flush)
    deflate_state *s;
    int flush;
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002a56:	d211      	bcs.n	8002a7c <deflate_fast+0x38>
            fill_window(s);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fcf5 	bl	8002448 <fill_window>
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002a66:	d204      	bcs.n	8002a72 <deflate_fast+0x2e>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <deflate_fast+0x2e>
                return need_more;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e1c7      	b.n	8002e02 <deflate_fast+0x3be>
            }
            if (s->lookahead == 0) break; /* flush the current block */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8145 	beq.w	8002d06 <deflate_fast+0x2c2>
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = NIL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
        if (s->lookahead >= MIN_MATCH) {
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d92f      	bls.n	8002ae8 <deflate_fast+0xa4>
            INSERT_STRING(s, s->strstart, hash_head);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002a9c:	3202      	adds	r2, #2
 8002a9e:	440a      	add	r2, r1
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	405a      	eors	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	649a      	str	r2, [r3, #72]	; 0x48
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	441a      	add	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	4003      	ands	r3, r0
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	440b      	add	r3, r1
 8002acc:	8812      	ldrh	r2, [r2, #0]
 8002ace:	801a      	strh	r2, [r3, #0]
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b28a      	uxth	r2, r1
 8002ae6:	801a      	strh	r2, [r3, #0]
        }

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <deflate_fast+0xcc>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d806      	bhi.n	8002b10 <deflate_fast+0xcc>
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            s->match_length = longest_match (s, hash_head);
 8002b02:	68f9      	ldr	r1, [r7, #12]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fb1d 	bl	8002144 <longest_match>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60
            /* longest_match() sets match_start */
        }
        if (s->match_length >= MIN_MATCH) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	f240 8098 	bls.w	8002c4a <deflate_fast+0x206>
            check_match(s, s->strstart, s->match_start, s->match_length);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff fc1c 	bl	8002364 <check_match>

            _tr_tally_dist(s, s->strstart - s->match_start,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	1ad1      	subs	r1, r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3a:	3b03      	subs	r3, #3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f003 fab8 	bl	80060b4 <_tr_tally>
 8002b44:	60b8      	str	r0, [r7, #8]
                           s->match_length - MIN_MATCH, bflush);

            s->lookahead -= s->match_length;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	1ad2      	subs	r2, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	675a      	str	r2, [r3, #116]	; 0x74

            /* Insert new strings in the hash table only if the match length
             * is not too large. This saves time but degrades compression.
             */
#ifndef FASTEST
            if (s->match_length <= s->max_insert_length &&
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d84c      	bhi.n	8002bfc <deflate_fast+0x1b8>
                s->lookahead >= MIN_MATCH) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
            if (s->match_length <= s->max_insert_length &&
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d948      	bls.n	8002bfc <deflate_fast+0x1b8>
                s->match_length--; /* string at strstart already in table */
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6e:	1e5a      	subs	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60
                do {
                    s->strstart++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	66da      	str	r2, [r3, #108]	; 0x6c
                    INSERT_STRING(s, s->strstart, hash_head);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002b92:	3202      	adds	r2, #2
 8002b94:	440a      	add	r2, r1
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	405a      	eors	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	649a      	str	r2, [r3, #72]	; 0x48
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	441a      	add	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	4003      	ands	r3, r0
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	440b      	add	r3, r1
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	b28a      	uxth	r2, r1
 8002bdc:	801a      	strh	r2, [r3, #0]
                    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                     * always MIN_MATCH bytes ahead.
                     */
                } while (--s->match_length != 0);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be2:	1e5a      	subs	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	661a      	str	r2, [r3, #96]	; 0x60
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1c1      	bne.n	8002b74 <deflate_fast+0x130>
                s->strstart++;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	66da      	str	r2, [r3, #108]	; 0x6c
 8002bfa:	e04c      	b.n	8002c96 <deflate_fast+0x252>
            } else
#endif
            {
                s->strstart += s->match_length;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	66da      	str	r2, [r3, #108]	; 0x6c
                s->match_length = 0;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	661a      	str	r2, [r3, #96]	; 0x60
                s->ins_h = s->window[s->strstart];
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	649a      	str	r2, [r3, #72]	; 0x48
                UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002c36:	3201      	adds	r2, #1
 8002c38:	440a      	add	r2, r1
 8002c3a:	7812      	ldrb	r2, [r2, #0]
 8002c3c:	405a      	eors	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	649a      	str	r2, [r3, #72]	; 0x48
 8002c48:	e025      	b.n	8002c96 <deflate_fast+0x252>
                 * matter since it will be recomputed at next deflate call.
                 */
            }
        } else {
            /* No match, output a literal byte */
            Tracevv((stderr,"%c", s->window[s->strstart]));
 8002c4a:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <deflate_fast+0x3c8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	dd0b      	ble.n	8002c6a <deflate_fast+0x226>
 8002c52:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <deflate_fast+0x3cc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68d9      	ldr	r1, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c60:	4413      	add	r3, r2
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f009 f8db 	bl	800be20 <fputc>
            _tr_tally_lit (s, s->window[s->strstart], bflush);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c72:	4413      	add	r3, r2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	2100      	movs	r1, #0
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f003 fa1a 	bl	80060b4 <_tr_tally>
 8002c80:	60b8      	str	r0, [r7, #8]
            s->lookahead--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	675a      	str	r2, [r3, #116]	; 0x74
            s->strstart++;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	66da      	str	r2, [r3, #108]	; 0x6c
        }
        if (bflush) FLUSH_BLOCK(s, 0);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f43f aed8 	beq.w	8002a4e <deflate_fast+0xa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	db05      	blt.n	8002cb2 <deflate_fast+0x26e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cae:	1899      	adds	r1, r3, r2
 8002cb0:	e000      	b.n	8002cb4 <deflate_fast+0x270>
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb8:	461a      	mov	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f003 f8a3 	bl	8005e10 <_tr_flush_block>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fb46 	bl	800136a <flush_pending>
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <deflate_fast+0x3c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	dd07      	ble.n	8002cf6 <deflate_fast+0x2b2>
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <deflate_fast+0x3cc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2207      	movs	r2, #7
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4848      	ldr	r0, [pc, #288]	; (8002e14 <deflate_fast+0x3d0>)
 8002cf2:	f009 f8fd 	bl	800bef0 <fwrite>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f47f aea6 	bne.w	8002a4e <deflate_fast+0xa>
 8002d02:	2300      	movs	r3, #0
 8002d04:	e07d      	b.n	8002e02 <deflate_fast+0x3be>
            if (s->lookahead == 0) break; /* flush the current block */
 8002d06:	bf00      	nop
    }
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	bf28      	it	cs
 8002d10:	2302      	movcs	r3, #2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d18:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
    if (flush == Z_FINISH) {
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d134      	bne.n	8002d8c <deflate_fast+0x348>
        FLUSH_BLOCK(s, 1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db05      	blt.n	8002d36 <deflate_fast+0x2f2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d32:	1899      	adds	r1, r3, r2
 8002d34:	e000      	b.n	8002d38 <deflate_fast+0x2f4>
 8002d36:	2100      	movs	r1, #0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	2301      	movs	r3, #1
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f003 f861 	bl	8005e10 <_tr_flush_block>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d52:	461a      	mov	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fb04 	bl	800136a <flush_pending>
 8002d62:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <deflate_fast+0x3c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	dd07      	ble.n	8002d7a <deflate_fast+0x336>
 8002d6a:	4b29      	ldr	r3, [pc, #164]	; (8002e10 <deflate_fast+0x3cc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2207      	movs	r2, #7
 8002d72:	2101      	movs	r1, #1
 8002d74:	4827      	ldr	r0, [pc, #156]	; (8002e14 <deflate_fast+0x3d0>)
 8002d76:	f009 f8bb 	bl	800bef0 <fwrite>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <deflate_fast+0x344>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e03c      	b.n	8002e02 <deflate_fast+0x3be>
        return finish_done;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e03a      	b.n	8002e02 <deflate_fast+0x3be>
    }
    if (s->last_lit)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d92:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d032      	beq.n	8002e00 <deflate_fast+0x3bc>
        FLUSH_BLOCK(s, 0);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db05      	blt.n	8002dae <deflate_fast+0x36a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002daa:	1899      	adds	r1, r3, r2
 8002dac:	e000      	b.n	8002db0 <deflate_fast+0x36c>
 8002dae:	2100      	movs	r1, #0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002db4:	461a      	mov	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f003 f825 	bl	8005e10 <_tr_flush_block>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dca:	461a      	mov	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fac8 	bl	800136a <flush_pending>
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <deflate_fast+0x3c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	dd07      	ble.n	8002df2 <deflate_fast+0x3ae>
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <deflate_fast+0x3cc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2207      	movs	r2, #7
 8002dea:	2101      	movs	r1, #1
 8002dec:	4809      	ldr	r0, [pc, #36]	; (8002e14 <deflate_fast+0x3d0>)
 8002dee:	f009 f87f 	bl	800bef0 <fwrite>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <deflate_fast+0x3bc>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e000      	b.n	8002e02 <deflate_fast+0x3be>
    return block_done;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20003260 	.word	0x20003260
 8002e10:	20000060 	.word	0x20000060
 8002e14:	0800d3f8 	.word	0x0800d3f8

08002e18 <deflate_slow>:
 * no better match at the next window position.
 */
local block_state deflate_slow(s, flush)
    deflate_state *s;
    int flush;
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s->lookahead < MIN_LOOKAHEAD) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002e2a:	d211      	bcs.n	8002e50 <deflate_slow+0x38>
            fill_window(s);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff fb0b 	bl	8002448 <fill_window>
            if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e36:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8002e3a:	d204      	bcs.n	8002e46 <deflate_slow+0x2e>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <deflate_slow+0x2e>
                return need_more;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e251      	b.n	80032ea <deflate_slow+0x4d2>
            }
            if (s->lookahead == 0) break; /* flush the current block */
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 81a4 	beq.w	8003198 <deflate_slow+0x380>
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = NIL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
        if (s->lookahead >= MIN_MATCH) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d92f      	bls.n	8002ebc <deflate_slow+0xa4>
            INSERT_STRING(s, s->strstart, hash_head);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002e70:	3202      	adds	r2, #2
 8002e72:	440a      	add	r2, r1
 8002e74:	7812      	ldrb	r2, [r2, #0]
 8002e76:	405a      	eors	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	649a      	str	r2, [r3, #72]	; 0x48
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	4003      	ands	r3, r0
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	440b      	add	r3, r1
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b28a      	uxth	r2, r1
 8002eba:	801a      	strh	r2, [r3, #0]
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s->prev_length = s->match_length, s->prev_match = s->match_start;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	679a      	str	r2, [r3, #120]	; 0x78
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	665a      	str	r2, [r3, #100]	; 0x64
        s->match_length = MIN_MATCH-1;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	661a      	str	r2, [r3, #96]	; 0x60

        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d02f      	beq.n	8002f38 <deflate_slow+0x120>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d228      	bcs.n	8002f38 <deflate_slow+0x120>
            s->strstart - hash_head <= MAX_DIST(s)) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1ad2      	subs	r2, r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
        if (hash_head != NIL && s->prev_length < s->max_lazy_match &&
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d81e      	bhi.n	8002f38 <deflate_slow+0x120>
            /* To simplify the code, we prevent matches with the string
             * of window index 0 (in particular we have to avoid a match
             * of the string with itself at the start of the input file).
             */
            s->match_length = longest_match (s, hash_head);
 8002efa:	6979      	ldr	r1, [r7, #20]
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff f921 	bl	8002144 <longest_match>
 8002f02:	4602      	mov	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	661a      	str	r2, [r3, #96]	; 0x60
            /* longest_match() sets match_start */

            if (s->match_length <= 5 && (s->strategy == Z_FILTERED
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d813      	bhi.n	8002f38 <deflate_slow+0x120>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d00b      	beq.n	8002f32 <deflate_slow+0x11a>
#if TOO_FAR <= 32767
                || (s->match_length == MIN_MATCH &&
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d10a      	bne.n	8002f38 <deflate_slow+0x120>
                    s->strstart - s->match_start > TOO_FAR)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	1ad3      	subs	r3, r2, r3
                || (s->match_length == MIN_MATCH &&
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f30:	d902      	bls.n	8002f38 <deflate_slow+0x120>
                )) {

                /* If prev_match is also MIN_MATCH, match_start is garbage
                 * but we will ignore the current match anyway.
                 */
                s->match_length = MIN_MATCH-1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	661a      	str	r2, [r3, #96]	; 0x60
            }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	f240 80b8 	bls.w	80030b2 <deflate_slow+0x29a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	f200 80b1 	bhi.w	80030b2 <deflate_slow+0x29a>
            uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b03      	subs	r3, #3
 8002f5c:	60fb      	str	r3, [r7, #12]
            /* Do not insert strings in hash table beyond this. */

            check_match(s, s->strstart-1, s->prev_match, s->prev_length);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f62:	1e59      	subs	r1, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff f9f9 	bl	8002364 <check_match>

            _tr_tally_dist(s, s->strstart -1 - s->prev_match,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	1e59      	subs	r1, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f82:	3b03      	subs	r3, #3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f003 f894 	bl	80060b4 <_tr_tally>
 8002f8c:	6138      	str	r0, [r7, #16]
            /* Insert in hash table all strings up to the end of the match.
             * strstart-1 and strstart are already inserted. If there is not
             * enough lookahead, the last two strings are not inserted in
             * the hash table.
             */
            s->lookahead -= s->prev_length-1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	675a      	str	r2, [r3, #116]	; 0x74
            s->prev_length -= 2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa2:	1e9a      	subs	r2, r3, #2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	679a      	str	r2, [r3, #120]	; 0x78
            do {
                if (++s->strstart <= max_insert) {
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	66da      	str	r2, [r3, #108]	; 0x6c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d32f      	bcc.n	800301c <deflate_slow+0x204>
                    INSERT_STRING(s, s->strstart, hash_head);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002fd0:	3202      	adds	r2, #2
 8002fd2:	440a      	add	r2, r1
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	405a      	eors	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	401a      	ands	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	649a      	str	r2, [r3, #72]	; 0x48
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	4003      	ands	r3, r0
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	440b      	add	r3, r1
 8003000:	8812      	ldrh	r2, [r2, #0]
 8003002:	801a      	strh	r2, [r3, #0]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	b28a      	uxth	r2, r1
 800301a:	801a      	strh	r2, [r3, #0]
                }
            } while (--s->prev_length != 0);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003020:	1e5a      	subs	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	679a      	str	r2, [r3, #120]	; 0x78
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1bc      	bne.n	8002fa8 <deflate_slow+0x190>
            s->match_available = 0;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	669a      	str	r2, [r3, #104]	; 0x68
            s->match_length = MIN_MATCH-1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	661a      	str	r2, [r3, #96]	; 0x60
            s->strstart++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	66da      	str	r2, [r3, #108]	; 0x6c

            if (bflush) FLUSH_BLOCK(s, 0);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 80a4 	beq.w	8003194 <deflate_slow+0x37c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	2b00      	cmp	r3, #0
 8003052:	db05      	blt.n	8003060 <deflate_slow+0x248>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800305c:	1899      	adds	r1, r3, r2
 800305e:	e000      	b.n	8003062 <deflate_slow+0x24a>
 8003060:	2100      	movs	r1, #0
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	461a      	mov	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f002 fecc 	bl	8005e10 <_tr_flush_block>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	65da      	str	r2, [r3, #92]	; 0x5c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe f96f 	bl	800136a <flush_pending>
 800308c:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <deflate_slow+0x4dc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	dd07      	ble.n	80030a4 <deflate_slow+0x28c>
 8003094:	4b98      	ldr	r3, [pc, #608]	; (80032f8 <deflate_slow+0x4e0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2207      	movs	r2, #7
 800309c:	2101      	movs	r1, #1
 800309e:	4897      	ldr	r0, [pc, #604]	; (80032fc <deflate_slow+0x4e4>)
 80030a0:	f008 ff26 	bl	800bef0 <fwrite>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d172      	bne.n	8003194 <deflate_slow+0x37c>
 80030ae:	2300      	movs	r3, #0
 80030b0:	e11b      	b.n	80032ea <deflate_slow+0x4d2>

        } else if (s->match_available) {
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d05e      	beq.n	8003178 <deflate_slow+0x360>
            /* If there was no match at the previous position, output a
             * single literal. If there was a match but the current match
             * is longer, truncate the previous match to a single literal.
             */
            Tracevv((stderr,"%c", s->window[s->strstart-1]));
 80030ba:	4b8e      	ldr	r3, [pc, #568]	; (80032f4 <deflate_slow+0x4dc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	dd0c      	ble.n	80030dc <deflate_slow+0x2c4>
 80030c2:	4b8d      	ldr	r3, [pc, #564]	; (80032f8 <deflate_slow+0x4e0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	3b01      	subs	r3, #1
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f008 fea2 	bl	800be20 <fputc>
            _tr_tally_lit(s, s->window[s->strstart-1], bflush);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e4:	3b01      	subs	r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	2100      	movs	r1, #0
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f002 ffe0 	bl	80060b4 <_tr_tally>
 80030f4:	6138      	str	r0, [r7, #16]
            if (bflush) {
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d02b      	beq.n	8003154 <deflate_slow+0x33c>
                FLUSH_BLOCK_ONLY(s, 0);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2b00      	cmp	r3, #0
 8003102:	db05      	blt.n	8003110 <deflate_slow+0x2f8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800310c:	1899      	adds	r1, r3, r2
 800310e:	e000      	b.n	8003112 <deflate_slow+0x2fa>
 8003110:	2100      	movs	r1, #0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003116:	461a      	mov	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	461a      	mov	r2, r3
 8003120:	2300      	movs	r3, #0
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f002 fe74 	bl	8005e10 <_tr_flush_block>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	65da      	str	r2, [r3, #92]	; 0x5c
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f917 	bl	800136a <flush_pending>
 800313c:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <deflate_slow+0x4dc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	dd07      	ble.n	8003154 <deflate_slow+0x33c>
 8003144:	4b6c      	ldr	r3, [pc, #432]	; (80032f8 <deflate_slow+0x4e0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2207      	movs	r2, #7
 800314c:	2101      	movs	r1, #1
 800314e:	486b      	ldr	r0, [pc, #428]	; (80032fc <deflate_slow+0x4e4>)
 8003150:	f008 fece 	bl	800bef0 <fwrite>
            }
            s->strstart++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	66da      	str	r2, [r3, #108]	; 0x6c
            s->lookahead--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	675a      	str	r2, [r3, #116]	; 0x74
            if (s->strm->avail_out == 0) return need_more;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f ae57 	bne.w	8002e22 <deflate_slow+0xa>
 8003174:	2300      	movs	r3, #0
 8003176:	e0b8      	b.n	80032ea <deflate_slow+0x4d2>
        } else {
            /* There is no previous match to compare with, wait for
             * the next step to decide.
             */
            s->match_available = 1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	669a      	str	r2, [r3, #104]	; 0x68
            s->strstart++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	66da      	str	r2, [r3, #108]	; 0x6c
            s->lookahead--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	1e5a      	subs	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	675a      	str	r2, [r3, #116]	; 0x74
 8003192:	e646      	b.n	8002e22 <deflate_slow+0xa>
        if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {
 8003194:	bf00      	nop
        if (s->lookahead < MIN_LOOKAHEAD) {
 8003196:	e644      	b.n	8002e22 <deflate_slow+0xa>
            if (s->lookahead == 0) break; /* flush the current block */
 8003198:	bf00      	nop
        }
    }
    Assert (flush != Z_NO_FLUSH, "no flush?");
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <deflate_slow+0x38e>
 80031a0:	4857      	ldr	r0, [pc, #348]	; (8003300 <deflate_slow+0x4e8>)
 80031a2:	f003 fb13 	bl	80067cc <z_error>
    if (s->match_available) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d020      	beq.n	80031f0 <deflate_slow+0x3d8>
        Tracevv((stderr,"%c", s->window[s->strstart-1]));
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <deflate_slow+0x4dc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	dd0c      	ble.n	80031d0 <deflate_slow+0x3b8>
 80031b6:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <deflate_slow+0x4e0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68d9      	ldr	r1, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c4:	3b01      	subs	r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f008 fe28 	bl	800be20 <fputc>
        _tr_tally_lit(s, s->window[s->strstart-1], bflush);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d8:	3b01      	subs	r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	2100      	movs	r1, #0
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f002 ff66 	bl	80060b4 <_tr_tally>
 80031e8:	6138      	str	r0, [r7, #16]
        s->match_available = 0;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	bf28      	it	cs
 80031f8:	2302      	movcs	r3, #2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003200:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
    if (flush == Z_FINISH) {
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d134      	bne.n	8003274 <deflate_slow+0x45c>
        FLUSH_BLOCK(s, 1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2b00      	cmp	r3, #0
 8003210:	db05      	blt.n	800321e <deflate_slow+0x406>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800321a:	1899      	adds	r1, r3, r2
 800321c:	e000      	b.n	8003220 <deflate_slow+0x408>
 800321e:	2100      	movs	r1, #0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	461a      	mov	r2, r3
 800322e:	2301      	movs	r3, #1
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f002 fded 	bl	8005e10 <_tr_flush_block>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	461a      	mov	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe f890 	bl	800136a <flush_pending>
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <deflate_slow+0x4dc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	dd07      	ble.n	8003262 <deflate_slow+0x44a>
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <deflate_slow+0x4e0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2207      	movs	r2, #7
 800325a:	2101      	movs	r1, #1
 800325c:	4827      	ldr	r0, [pc, #156]	; (80032fc <deflate_slow+0x4e4>)
 800325e:	f008 fe47 	bl	800bef0 <fwrite>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <deflate_slow+0x458>
 800326c:	2302      	movs	r3, #2
 800326e:	e03c      	b.n	80032ea <deflate_slow+0x4d2>
        return finish_done;
 8003270:	2303      	movs	r3, #3
 8003272:	e03a      	b.n	80032ea <deflate_slow+0x4d2>
    }
    if (s->last_lit)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800327a:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d032      	beq.n	80032e8 <deflate_slow+0x4d0>
        FLUSH_BLOCK(s, 0);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2b00      	cmp	r3, #0
 8003288:	db05      	blt.n	8003296 <deflate_slow+0x47e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003292:	1899      	adds	r1, r3, r2
 8003294:	e000      	b.n	8003298 <deflate_slow+0x480>
 8003296:	2100      	movs	r1, #0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	2300      	movs	r3, #0
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f002 fdb1 	bl	8005e10 <_tr_flush_block>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b2:	461a      	mov	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe f854 	bl	800136a <flush_pending>
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <deflate_slow+0x4dc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dd07      	ble.n	80032da <deflate_slow+0x4c2>
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <deflate_slow+0x4e0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2207      	movs	r2, #7
 80032d2:	2101      	movs	r1, #1
 80032d4:	4809      	ldr	r0, [pc, #36]	; (80032fc <deflate_slow+0x4e4>)
 80032d6:	f008 fe0b 	bl	800bef0 <fwrite>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <deflate_slow+0x4d0>
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <deflate_slow+0x4d2>
    return block_done;
 80032e8:	2301      	movs	r3, #1
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20003260 	.word	0x20003260
 80032f8:	20000060 	.word	0x20000060
 80032fc:	0800d3f8 	.word	0x0800d3f8
 8003300:	0800d400 	.word	0x0800d400

08003304 <deflate_rle>:
 * deflate switches away from Z_RLE.)
 */
local block_state deflate_rle(s, flush)
    deflate_state *s;
    int flush;
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
    for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the longest run, plus one for the unrolled loop.
         */
        if (s->lookahead <= MAX_MATCH) {
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003312:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8003316:	d811      	bhi.n	800333c <deflate_rle+0x38>
            fill_window(s);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff f895 	bl	8002448 <fill_window>
            if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8003326:	d804      	bhi.n	8003332 <deflate_rle+0x2e>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <deflate_rle+0x2e>
                return need_more;
 800332e:	2300      	movs	r3, #0
 8003330:	e1aa      	b.n	8003688 <deflate_rle+0x384>
            }
            if (s->lookahead == 0) break; /* flush the current block */
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 812b 	beq.w	8003592 <deflate_rle+0x28e>
        }

        /* See how many times the previous byte repeats */
        s->match_length = 0;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	661a      	str	r2, [r3, #96]	; 0x60
        if (s->lookahead >= MIN_MATCH && s->strstart > 0) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003346:	2b02      	cmp	r3, #2
 8003348:	f240 809c 	bls.w	8003484 <deflate_rle+0x180>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8097 	beq.w	8003484 <deflate_rle+0x180>
            scan = s->window + s->strstart - 1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335e:	3b01      	subs	r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
            prev = *scan;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]
            if (prev == *++scan && prev == *++scan && prev == *++scan) {
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3301      	adds	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4293      	cmp	r3, r2
 800337a:	d177      	bne.n	800346c <deflate_rle+0x168>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	3301      	adds	r3, #1
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4293      	cmp	r3, r2
 800338c:	d16e      	bne.n	800346c <deflate_rle+0x168>
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3301      	adds	r3, #1
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4293      	cmp	r3, r2
 800339e:	d165      	bne.n	800346c <deflate_rle+0x168>
                strend = s->window + s->strstart + MAX_MATCH;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a8:	f503 7381 	add.w	r3, r3, #258	; 0x102
 80033ac:	4413      	add	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
                do {
                } while (prev == *++scan && prev == *++scan &&
                         prev == *++scan && prev == *++scan &&
                         prev == *++scan && prev == *++scan &&
                         prev == *++scan && prev == *++scan &&
                         scan < strend);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	3301      	adds	r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
                } while (prev == *++scan && prev == *++scan &&
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
                         scan < strend);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4293      	cmp	r3, r2
 80033c0:	d142      	bne.n	8003448 <deflate_rle+0x144>
                } while (prev == *++scan && prev == *++scan &&
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	3301      	adds	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d139      	bne.n	8003448 <deflate_rle+0x144>
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	3301      	adds	r3, #1
 80033d8:	613b      	str	r3, [r7, #16]
                         prev == *++scan && prev == *++scan &&
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
                } while (prev == *++scan && prev == *++scan &&
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d130      	bne.n	8003448 <deflate_rle+0x144>
                         prev == *++scan && prev == *++scan &&
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	3301      	adds	r3, #1
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d127      	bne.n	8003448 <deflate_rle+0x144>
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	3301      	adds	r3, #1
 80033fc:	613b      	str	r3, [r7, #16]
                         prev == *++scan && prev == *++scan &&
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
                         prev == *++scan && prev == *++scan &&
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4293      	cmp	r3, r2
 8003408:	d11e      	bne.n	8003448 <deflate_rle+0x144>
                         prev == *++scan && prev == *++scan &&
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	3301      	adds	r3, #1
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4293      	cmp	r3, r2
 800341a:	d115      	bne.n	8003448 <deflate_rle+0x144>
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	3301      	adds	r3, #1
 8003420:	613b      	str	r3, [r7, #16]
                         prev == *++scan && prev == *++scan &&
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
                         prev == *++scan && prev == *++scan &&
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4293      	cmp	r3, r2
 800342c:	d10c      	bne.n	8003448 <deflate_rle+0x144>
                         prev == *++scan && prev == *++scan &&
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	3301      	adds	r3, #1
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <deflate_rle+0x144>
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	d3b3      	bcc.n	80033b0 <deflate_rle+0xac>
                s->match_length = MAX_MATCH - (int)(strend - scan);
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f5c3 7381 	rsb	r3, r3, #258	; 0x102
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	661a      	str	r2, [r3, #96]	; 0x60
                if (s->match_length > s->lookahead)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	429a      	cmp	r2, r3
 8003462:	d903      	bls.n	800346c <deflate_rle+0x168>
                    s->match_length = s->lookahead;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	661a      	str	r2, [r3, #96]	; 0x60
            }
            Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	3b01      	subs	r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	429a      	cmp	r2, r3
 800347c:	d902      	bls.n	8003484 <deflate_rle+0x180>
 800347e:	4884      	ldr	r0, [pc, #528]	; (8003690 <deflate_rle+0x38c>)
 8003480:	f003 f9a4 	bl	80067cc <z_error>
        }

        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
        if (s->match_length >= MIN_MATCH) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003488:	2b02      	cmp	r3, #2
 800348a:	d924      	bls.n	80034d6 <deflate_rle+0x1d2>
            check_match(s, s->strstart, s->strstart - 1, s->match_length);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003494:	1e5a      	subs	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe ff62 	bl	8002364 <check_match>

            _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a4:	3b03      	subs	r3, #3
 80034a6:	461a      	mov	r2, r3
 80034a8:	2101      	movs	r1, #1
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f002 fe02 	bl	80060b4 <_tr_tally>
 80034b0:	6178      	str	r0, [r7, #20]

            s->lookahead -= s->match_length;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	1ad2      	subs	r2, r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	675a      	str	r2, [r3, #116]	; 0x74
            s->strstart += s->match_length;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	66da      	str	r2, [r3, #108]	; 0x6c
            s->match_length = 0;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
 80034d4:	e025      	b.n	8003522 <deflate_rle+0x21e>
        } else {
            /* No match, output a literal byte */
            Tracevv((stderr,"%c", s->window[s->strstart]));
 80034d6:	4b6f      	ldr	r3, [pc, #444]	; (8003694 <deflate_rle+0x390>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	dd0b      	ble.n	80034f6 <deflate_rle+0x1f2>
 80034de:	4b6e      	ldr	r3, [pc, #440]	; (8003698 <deflate_rle+0x394>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68d9      	ldr	r1, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f008 fc95 	bl	800be20 <fputc>
            _tr_tally_lit (s, s->window[s->strstart], bflush);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	2100      	movs	r1, #0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f002 fdd4 	bl	80060b4 <_tr_tally>
 800350c:	6178      	str	r0, [r7, #20]
            s->lookahead--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	675a      	str	r2, [r3, #116]	; 0x74
            s->strstart++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	66da      	str	r2, [r3, #108]	; 0x6c
        }
        if (bflush) FLUSH_BLOCK(s, 0);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f43f aef2 	beq.w	800330e <deflate_rle+0xa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	2b00      	cmp	r3, #0
 8003530:	db05      	blt.n	800353e <deflate_rle+0x23a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800353a:	1899      	adds	r1, r3, r2
 800353c:	e000      	b.n	8003540 <deflate_rle+0x23c>
 800353e:	2100      	movs	r1, #0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003544:	461a      	mov	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	461a      	mov	r2, r3
 800354e:	2300      	movs	r3, #0
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f002 fc5d 	bl	8005e10 <_tr_flush_block>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	461a      	mov	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd ff00 	bl	800136a <flush_pending>
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <deflate_rle+0x390>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	dd07      	ble.n	8003582 <deflate_rle+0x27e>
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <deflate_rle+0x394>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2207      	movs	r2, #7
 800357a:	2101      	movs	r1, #1
 800357c:	4847      	ldr	r0, [pc, #284]	; (800369c <deflate_rle+0x398>)
 800357e:	f008 fcb7 	bl	800bef0 <fwrite>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f47f aec0 	bne.w	800330e <deflate_rle+0xa>
 800358e:	2300      	movs	r3, #0
 8003590:	e07a      	b.n	8003688 <deflate_rle+0x384>
            if (s->lookahead == 0) break; /* flush the current block */
 8003592:	bf00      	nop
    }
    s->insert = 0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359a:	461a      	mov	r2, r3
 800359c:	2300      	movs	r3, #0
 800359e:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
    if (flush == Z_FINISH) {
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d134      	bne.n	8003612 <deflate_rle+0x30e>
        FLUSH_BLOCK(s, 1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	db05      	blt.n	80035bc <deflate_rle+0x2b8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035b8:	1899      	adds	r1, r3, r2
 80035ba:	e000      	b.n	80035be <deflate_rle+0x2ba>
 80035bc:	2100      	movs	r1, #0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	2301      	movs	r3, #1
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f002 fc1e 	bl	8005e10 <_tr_flush_block>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d8:	461a      	mov	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fec1 	bl	800136a <flush_pending>
 80035e8:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <deflate_rle+0x390>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	dd07      	ble.n	8003600 <deflate_rle+0x2fc>
 80035f0:	4b29      	ldr	r3, [pc, #164]	; (8003698 <deflate_rle+0x394>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2207      	movs	r2, #7
 80035f8:	2101      	movs	r1, #1
 80035fa:	4828      	ldr	r0, [pc, #160]	; (800369c <deflate_rle+0x398>)
 80035fc:	f008 fc78 	bl	800bef0 <fwrite>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <deflate_rle+0x30a>
 800360a:	2302      	movs	r3, #2
 800360c:	e03c      	b.n	8003688 <deflate_rle+0x384>
        return finish_done;
 800360e:	2303      	movs	r3, #3
 8003610:	e03a      	b.n	8003688 <deflate_rle+0x384>
    }
    if (s->last_lit)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003618:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d032      	beq.n	8003686 <deflate_rle+0x382>
        FLUSH_BLOCK(s, 0);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2b00      	cmp	r3, #0
 8003626:	db05      	blt.n	8003634 <deflate_rle+0x330>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003630:	1899      	adds	r1, r3, r2
 8003632:	e000      	b.n	8003636 <deflate_rle+0x332>
 8003634:	2100      	movs	r1, #0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	461a      	mov	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f002 fbe2 	bl	8005e10 <_tr_flush_block>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003650:	461a      	mov	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	65da      	str	r2, [r3, #92]	; 0x5c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fe85 	bl	800136a <flush_pending>
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <deflate_rle+0x390>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	dd07      	ble.n	8003678 <deflate_rle+0x374>
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <deflate_rle+0x394>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2207      	movs	r2, #7
 8003670:	2101      	movs	r1, #1
 8003672:	480a      	ldr	r0, [pc, #40]	; (800369c <deflate_rle+0x398>)
 8003674:	f008 fc3c 	bl	800bef0 <fwrite>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <deflate_rle+0x382>
 8003682:	2300      	movs	r3, #0
 8003684:	e000      	b.n	8003688 <deflate_rle+0x384>
    return block_done;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	0800d348 	.word	0x0800d348
 8003694:	20003260 	.word	0x20003260
 8003698:	20000060 	.word	0x20000060
 800369c:	0800d3f8 	.word	0x0800d3f8

080036a0 <deflate_huff>:
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
local block_state deflate_huff(s, flush)
    deflate_state *s;
    int flush;
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
    int bflush;             /* set if current block must be flushed */

    for (;;) {
        /* Make sure that we have a literal to write. */
        if (s->lookahead == 0) {
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <deflate_huff+0x2a>
            fill_window(s);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe fec8 	bl	8002448 <fill_window>
            if (s->lookahead == 0) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <deflate_huff+0x2a>
                if (flush == Z_NO_FLUSH)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d160      	bne.n	8003788 <deflate_huff+0xe8>
                    return need_more;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e0d9      	b.n	800387e <deflate_huff+0x1de>
                break;      /* flush the current block */
            }
        }

        /* Output a literal byte */
        s->match_length = 0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	661a      	str	r2, [r3, #96]	; 0x60
        Tracevv((stderr,"%c", s->window[s->strstart]));
 80036d0:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <deflate_huff+0x1e8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	dd0b      	ble.n	80036f0 <deflate_huff+0x50>
 80036d8:	4b6c      	ldr	r3, [pc, #432]	; (800388c <deflate_huff+0x1ec>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68d9      	ldr	r1, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f008 fb98 	bl	800be20 <fputc>
        _tr_tally_lit (s, s->window[s->strstart], bflush);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	4413      	add	r3, r2
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	2100      	movs	r1, #0
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f002 fcd7 	bl	80060b4 <_tr_tally>
 8003706:	60f8      	str	r0, [r7, #12]
        s->lookahead--;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	675a      	str	r2, [r3, #116]	; 0x74
        s->strstart++;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	66da      	str	r2, [r3, #108]	; 0x6c
        if (bflush) FLUSH_BLOCK(s, 0);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0c3      	beq.n	80036aa <deflate_huff+0xa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	2b00      	cmp	r3, #0
 8003728:	db05      	blt.n	8003736 <deflate_huff+0x96>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003732:	1899      	adds	r1, r3, r2
 8003734:	e000      	b.n	8003738 <deflate_huff+0x98>
 8003736:	2100      	movs	r1, #0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373c:	461a      	mov	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	461a      	mov	r2, r3
 8003746:	2300      	movs	r3, #0
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f002 fb61 	bl	8005e10 <_tr_flush_block>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	65da      	str	r2, [r3, #92]	; 0x5c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fe04 	bl	800136a <flush_pending>
 8003762:	4b49      	ldr	r3, [pc, #292]	; (8003888 <deflate_huff+0x1e8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dd07      	ble.n	800377a <deflate_huff+0xda>
 800376a:	4b48      	ldr	r3, [pc, #288]	; (800388c <deflate_huff+0x1ec>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2207      	movs	r2, #7
 8003772:	2101      	movs	r1, #1
 8003774:	4846      	ldr	r0, [pc, #280]	; (8003890 <deflate_huff+0x1f0>)
 8003776:	f008 fbbb 	bl	800bef0 <fwrite>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d192      	bne.n	80036aa <deflate_huff+0xa>
 8003784:	2300      	movs	r3, #0
 8003786:	e07a      	b.n	800387e <deflate_huff+0x1de>
                break;      /* flush the current block */
 8003788:	bf00      	nop
    }
    s->insert = 0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003790:	461a      	mov	r2, r3
 8003792:	2300      	movs	r3, #0
 8003794:	f8c2 36b4 	str.w	r3, [r2, #1716]	; 0x6b4
    if (flush == Z_FINISH) {
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b04      	cmp	r3, #4
 800379c:	d134      	bne.n	8003808 <deflate_huff+0x168>
        FLUSH_BLOCK(s, 1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db05      	blt.n	80037b2 <deflate_huff+0x112>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037ae:	1899      	adds	r1, r3, r2
 80037b0:	e000      	b.n	80037b4 <deflate_huff+0x114>
 80037b2:	2100      	movs	r1, #0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b8:	461a      	mov	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	2301      	movs	r3, #1
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f002 fb23 	bl	8005e10 <_tr_flush_block>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ce:	461a      	mov	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fdc6 	bl	800136a <flush_pending>
 80037de:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <deflate_huff+0x1e8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	dd07      	ble.n	80037f6 <deflate_huff+0x156>
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <deflate_huff+0x1ec>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2207      	movs	r2, #7
 80037ee:	2101      	movs	r1, #1
 80037f0:	4827      	ldr	r0, [pc, #156]	; (8003890 <deflate_huff+0x1f0>)
 80037f2:	f008 fb7d 	bl	800bef0 <fwrite>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <deflate_huff+0x164>
 8003800:	2302      	movs	r3, #2
 8003802:	e03c      	b.n	800387e <deflate_huff+0x1de>
        return finish_done;
 8003804:	2303      	movs	r3, #3
 8003806:	e03a      	b.n	800387e <deflate_huff+0x1de>
    }
    if (s->last_lit)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380e:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d032      	beq.n	800387c <deflate_huff+0x1dc>
        FLUSH_BLOCK(s, 0);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	2b00      	cmp	r3, #0
 800381c:	db05      	blt.n	800382a <deflate_huff+0x18a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003826:	1899      	adds	r1, r3, r2
 8003828:	e000      	b.n	800382c <deflate_huff+0x18c>
 800382a:	2100      	movs	r1, #0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003830:	461a      	mov	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	461a      	mov	r2, r3
 800383a:	2300      	movs	r3, #0
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f002 fae7 	bl	8005e10 <_tr_flush_block>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003846:	461a      	mov	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	65da      	str	r2, [r3, #92]	; 0x5c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fd fd8a 	bl	800136a <flush_pending>
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <deflate_huff+0x1e8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	dd07      	ble.n	800386e <deflate_huff+0x1ce>
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <deflate_huff+0x1ec>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2207      	movs	r2, #7
 8003866:	2101      	movs	r1, #1
 8003868:	4809      	ldr	r0, [pc, #36]	; (8003890 <deflate_huff+0x1f0>)
 800386a:	f008 fb41 	bl	800bef0 <fwrite>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <deflate_huff+0x1dc>
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <deflate_huff+0x1de>
    return block_done;
 800387c:	2301      	movs	r3, #1
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20003260 	.word	0x20003260
 800388c:	20000060 	.word	0x20000060
 8003890:	0800d3f8 	.word	0x0800d3f8

08003894 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003898:	2200      	movs	r2, #0
 800389a:	2110      	movs	r1, #16
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <SELECT+0x18>)
 800389e:	f003 faf5 	bl	8006e8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f003 f85c 	bl	8006960 <HAL_Delay>
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40020000 	.word	0x40020000

080038b0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80038b4:	2201      	movs	r2, #1
 80038b6:	2110      	movs	r1, #16
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <DESELECT+0x18>)
 80038ba:	f003 fae7 	bl	8006e8c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80038be:	2001      	movs	r0, #1
 80038c0:	f003 f84e 	bl	8006960 <HAL_Delay>
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40020000 	.word	0x40020000

080038cc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80038d6:	bf00      	nop
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <SPI_TxByte+0x30>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d1f8      	bne.n	80038d8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80038e6:	1df9      	adds	r1, r7, #7
 80038e8:	2364      	movs	r3, #100	; 0x64
 80038ea:	2201      	movs	r2, #1
 80038ec:	4803      	ldr	r0, [pc, #12]	; (80038fc <SPI_TxByte+0x30>)
 80038ee:	f004 f922 	bl	8007b36 <HAL_SPI_Transmit>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20003180 	.word	0x20003180

08003900 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800390c:	bf00      	nop
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <SPI_TxBuffer+0x30>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d1f8      	bne.n	800390e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800391c:	887a      	ldrh	r2, [r7, #2]
 800391e:	2364      	movs	r3, #100	; 0x64
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4803      	ldr	r0, [pc, #12]	; (8003930 <SPI_TxBuffer+0x30>)
 8003924:	f004 f907 	bl	8007b36 <HAL_SPI_Transmit>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20003180 	.word	0x20003180

08003934 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800393a:	23ff      	movs	r3, #255	; 0xff
 800393c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800393e:	bf00      	nop
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <SPI_RxByte+0x34>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d1f8      	bne.n	8003940 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800394e:	1dba      	adds	r2, r7, #6
 8003950:	1df9      	adds	r1, r7, #7
 8003952:	2364      	movs	r3, #100	; 0x64
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	2301      	movs	r3, #1
 8003958:	4803      	ldr	r0, [pc, #12]	; (8003968 <SPI_RxByte+0x34>)
 800395a:	f004 fa28 	bl	8007dae <HAL_SPI_TransmitReceive>

	return data;
 800395e:	79bb      	ldrb	r3, [r7, #6]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20003180 	.word	0x20003180

0800396c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003974:	f7ff ffde 	bl	8003934 <SPI_RxByte>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	701a      	strb	r2, [r3, #0]
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <SD_ReadyWait+0x30>)
 8003990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003994:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003996:	f7ff ffcd 	bl	8003934 <SPI_RxByte>
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2bff      	cmp	r3, #255	; 0xff
 80039a2:	d003      	beq.n	80039ac <SD_ReadyWait+0x24>
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <SD_ReadyWait+0x30>)
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f4      	bne.n	8003996 <SD_ReadyWait+0xe>

	return res;
 80039ac:	79fb      	ldrb	r3, [r7, #7]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200000e2 	.word	0x200000e2

080039bc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80039c2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80039c6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80039c8:	f7ff ff72 	bl	80038b0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	e005      	b.n	80039de <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80039d2:	20ff      	movs	r0, #255	; 0xff
 80039d4:	f7ff ff7a 	bl	80038cc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	3301      	adds	r3, #1
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	ddf6      	ble.n	80039d2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80039e4:	f7ff ff56 	bl	8003894 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80039e8:	2340      	movs	r3, #64	; 0x40
 80039ea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80039f8:	2300      	movs	r3, #0
 80039fa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80039fc:	2395      	movs	r3, #149	; 0x95
 80039fe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003a00:	463b      	mov	r3, r7
 8003a02:	2106      	movs	r1, #6
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff7b 	bl	8003900 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003a0a:	e002      	b.n	8003a12 <SD_PowerOn+0x56>
	{
		cnt--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003a12:	f7ff ff8f 	bl	8003934 <SPI_RxByte>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d002      	beq.n	8003a22 <SD_PowerOn+0x66>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f4      	bne.n	8003a0c <SD_PowerOn+0x50>
	}

	DESELECT();
 8003a22:	f7ff ff45 	bl	80038b0 <DESELECT>
	SPI_TxByte(0XFF);
 8003a26:	20ff      	movs	r0, #255	; 0xff
 8003a28:	f7ff ff50 	bl	80038cc <SPI_TxByte>

	PowerFlag = 1;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <SD_PowerOn+0x80>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200000e5 	.word	0x200000e5

08003a40 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <SD_PowerOff+0x14>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	200000e5 	.word	0x200000e5

08003a58 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003a5c:	4b02      	ldr	r3, [pc, #8]	; (8003a68 <SD_CheckPower+0x10>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	200000e5 	.word	0x200000e5

08003a6c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <SD_RxDataBlock+0x58>)
 8003a78:	22c8      	movs	r2, #200	; 0xc8
 8003a7a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003a7c:	f7ff ff5a 	bl	8003934 <SPI_RxByte>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2bff      	cmp	r3, #255	; 0xff
 8003a88:	d103      	bne.n	8003a92 <SD_RxDataBlock+0x26>
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <SD_RxDataBlock+0x58>)
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f4      	bne.n	8003a7c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2bfe      	cmp	r3, #254	; 0xfe
 8003a96:	d001      	beq.n	8003a9c <SD_RxDataBlock+0x30>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e00f      	b.n	8003abc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff62 	bl	800396c <SPI_RxBytePtr>
	} while(len--);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1e5a      	subs	r2, r3, #1
 8003aac:	603a      	str	r2, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f4      	bne.n	8003a9c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8003ab2:	f7ff ff3f 	bl	8003934 <SPI_RxByte>
	SPI_RxByte();
 8003ab6:	f7ff ff3d 	bl	8003934 <SPI_RxByte>

	return TRUE;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200000e0 	.word	0x200000e0

08003ac8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003ad8:	f7ff ff56 	bl	8003988 <SD_ReadyWait>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2bff      	cmp	r3, #255	; 0xff
 8003ae0:	d001      	beq.n	8003ae6 <SD_TxDataBlock+0x1e>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e02f      	b.n	8003b46 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff feef 	bl	80038cc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	2bfd      	cmp	r3, #253	; 0xfd
 8003af2:	d020      	beq.n	8003b36 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff01 	bl	8003900 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003afe:	f7ff ff19 	bl	8003934 <SPI_RxByte>
		SPI_RxByte();
 8003b02:	f7ff ff17 	bl	8003934 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003b06:	e00b      	b.n	8003b20 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003b08:	f7ff ff14 	bl	8003934 <SPI_RxByte>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d006      	beq.n	8003b28 <SD_TxDataBlock+0x60>
			i++;
 8003b1a:	7bbb      	ldrb	r3, [r7, #14]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003b20:	7bbb      	ldrb	r3, [r7, #14]
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d9f0      	bls.n	8003b08 <SD_TxDataBlock+0x40>
 8003b26:	e000      	b.n	8003b2a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003b28:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003b2a:	bf00      	nop
 8003b2c:	f7ff ff02 	bl	8003934 <SPI_RxByte>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0fa      	beq.n	8003b2c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d101      	bne.n	8003b44 <SD_TxDataBlock+0x7c>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	4603      	mov	r3, r0
 8003b56:	6039      	str	r1, [r7, #0]
 8003b58:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003b5a:	f7ff ff15 	bl	8003988 <SD_ReadyWait>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2bff      	cmp	r3, #255	; 0xff
 8003b62:	d001      	beq.n	8003b68 <SD_SendCmd+0x1a>
 8003b64:	23ff      	movs	r3, #255	; 0xff
 8003b66:	e042      	b.n	8003bee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff feae 	bl	80038cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	0e1b      	lsrs	r3, r3, #24
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fea8 	bl	80038cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff fea2 	bl	80038cc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fe9c 	bl	80038cc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fe97 	bl	80038cc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d102      	bne.n	8003baa <SD_SendCmd+0x5c>
 8003ba4:	2395      	movs	r3, #149	; 0x95
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e007      	b.n	8003bba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b48      	cmp	r3, #72	; 0x48
 8003bae:	d102      	bne.n	8003bb6 <SD_SendCmd+0x68>
 8003bb0:	2387      	movs	r3, #135	; 0x87
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e001      	b.n	8003bba <SD_SendCmd+0x6c>
	else crc = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fe85 	bl	80038cc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	2b4c      	cmp	r3, #76	; 0x4c
 8003bc6:	d101      	bne.n	8003bcc <SD_SendCmd+0x7e>
 8003bc8:	f7ff feb4 	bl	8003934 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003bcc:	230a      	movs	r3, #10
 8003bce:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003bd0:	f7ff feb0 	bl	8003934 <SPI_RxByte>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003bd8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	da05      	bge.n	8003bec <SD_SendCmd+0x9e>
 8003be0:	7bbb      	ldrb	r3, [r7, #14]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	73bb      	strb	r3, [r7, #14]
 8003be6:	7bbb      	ldrb	r3, [r7, #14]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f1      	bne.n	8003bd0 <SD_SendCmd+0x82>

	return res;
 8003bec:	7b7b      	ldrb	r3, [r7, #13]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <SD_disk_initialize+0x14>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0d1      	b.n	8003db0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <SD_disk_initialize+0x1c0>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <SD_disk_initialize+0x2a>
 8003c1a:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <SD_disk_initialize+0x1c0>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	e0c6      	b.n	8003db0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8003c22:	f7ff fecb 	bl	80039bc <SD_PowerOn>

	/* slave select */
	SELECT();
 8003c26:	f7ff fe35 	bl	8003894 <SELECT>

	/* check disk type */
	type = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003c2e:	2100      	movs	r1, #0
 8003c30:	2040      	movs	r0, #64	; 0x40
 8003c32:	f7ff ff8c 	bl	8003b4e <SD_SendCmd>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f040 80a1 	bne.w	8003d80 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <SD_disk_initialize+0x1c4>)
 8003c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c44:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003c46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c4a:	2048      	movs	r0, #72	; 0x48
 8003c4c:	f7ff ff7f 	bl	8003b4e <SD_SendCmd>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d155      	bne.n	8003d02 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	e00c      	b.n	8003c76 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003c5c:	7bfc      	ldrb	r4, [r7, #15]
 8003c5e:	f7ff fe69 	bl	8003934 <SPI_RxByte>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	f104 0310 	add.w	r3, r4, #16
 8003c6a:	443b      	add	r3, r7
 8003c6c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	3301      	adds	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d9ef      	bls.n	8003c5c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003c7c:	7abb      	ldrb	r3, [r7, #10]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d17e      	bne.n	8003d80 <SD_disk_initialize+0x188>
 8003c82:	7afb      	ldrb	r3, [r7, #11]
 8003c84:	2baa      	cmp	r3, #170	; 0xaa
 8003c86:	d17b      	bne.n	8003d80 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2077      	movs	r0, #119	; 0x77
 8003c8c:	f7ff ff5f 	bl	8003b4e <SD_SendCmd>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d807      	bhi.n	8003ca6 <SD_disk_initialize+0xae>
 8003c96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c9a:	2069      	movs	r0, #105	; 0x69
 8003c9c:	f7ff ff57 	bl	8003b4e <SD_SendCmd>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8003ca6:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <SD_disk_initialize+0x1c4>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1ec      	bne.n	8003c88 <SD_disk_initialize+0x90>
 8003cae:	e000      	b.n	8003cb2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003cb0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <SD_disk_initialize+0x1c4>)
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d062      	beq.n	8003d80 <SD_disk_initialize+0x188>
 8003cba:	2100      	movs	r1, #0
 8003cbc:	207a      	movs	r0, #122	; 0x7a
 8003cbe:	f7ff ff46 	bl	8003b4e <SD_SendCmd>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d15b      	bne.n	8003d80 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8003cc8:	2300      	movs	r3, #0
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e00c      	b.n	8003ce8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8003cce:	7bfc      	ldrb	r4, [r7, #15]
 8003cd0:	f7ff fe30 	bl	8003934 <SPI_RxByte>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f104 0310 	add.w	r3, r4, #16
 8003cdc:	443b      	add	r3, r7
 8003cde:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d9ef      	bls.n	8003cce <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003cee:	7a3b      	ldrb	r3, [r7, #8]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <SD_disk_initialize+0x104>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	e000      	b.n	8003cfe <SD_disk_initialize+0x106>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	73bb      	strb	r3, [r7, #14]
 8003d00:	e03e      	b.n	8003d80 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003d02:	2100      	movs	r1, #0
 8003d04:	2077      	movs	r0, #119	; 0x77
 8003d06:	f7ff ff22 	bl	8003b4e <SD_SendCmd>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d808      	bhi.n	8003d22 <SD_disk_initialize+0x12a>
 8003d10:	2100      	movs	r1, #0
 8003d12:	2069      	movs	r0, #105	; 0x69
 8003d14:	f7ff ff1b 	bl	8003b4e <SD_SendCmd>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d801      	bhi.n	8003d22 <SD_disk_initialize+0x12a>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e000      	b.n	8003d24 <SD_disk_initialize+0x12c>
 8003d22:	2301      	movs	r3, #1
 8003d24:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003d26:	7bbb      	ldrb	r3, [r7, #14]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d10e      	bne.n	8003d4a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	2077      	movs	r0, #119	; 0x77
 8003d30:	f7ff ff0d 	bl	8003b4e <SD_SendCmd>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d80e      	bhi.n	8003d58 <SD_disk_initialize+0x160>
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	2069      	movs	r0, #105	; 0x69
 8003d3e:	f7ff ff06 	bl	8003b4e <SD_SendCmd>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <SD_disk_initialize+0x160>
 8003d48:	e00c      	b.n	8003d64 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	2041      	movs	r0, #65	; 0x41
 8003d4e:	f7ff fefe 	bl	8003b4e <SD_SendCmd>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <SD_disk_initialize+0x1c4>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e2      	bne.n	8003d26 <SD_disk_initialize+0x12e>
 8003d60:	e000      	b.n	8003d64 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003d62:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <SD_disk_initialize+0x1c4>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <SD_disk_initialize+0x184>
 8003d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d70:	2050      	movs	r0, #80	; 0x50
 8003d72:	f7ff feec 	bl	8003b4e <SD_SendCmd>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <SD_disk_initialize+0x188>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003d80:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <SD_disk_initialize+0x1c8>)
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003d86:	f7ff fd93 	bl	80038b0 <DESELECT>
	SPI_RxByte();
 8003d8a:	f7ff fdd3 	bl	8003934 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8003d8e:	7bbb      	ldrb	r3, [r7, #14]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <SD_disk_initialize+0x1c0>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <SD_disk_initialize+0x1c0>)
 8003da2:	701a      	strb	r2, [r3, #0]
 8003da4:	e001      	b.n	8003daa <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003da6:	f7ff fe4b 	bl	8003a40 <SD_PowerOff>
	}

	return Stat;
 8003daa:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <SD_disk_initialize+0x1c0>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd90      	pop	{r4, r7, pc}
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	200000e0 	.word	0x200000e0
 8003dc0:	200000e4 	.word	0x200000e4

08003dc4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <SD_disk_status+0x14>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e002      	b.n	8003dde <SD_disk_status+0x1a>
	return Stat;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <SD_disk_status+0x24>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b2db      	uxtb	r3, r3
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	20000000 	.word	0x20000000

08003dec <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4603      	mov	r3, r0
 8003dfa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <SD_disk_read+0x1c>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <SD_disk_read+0x20>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e051      	b.n	8003eb0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <SD_disk_read+0xcc>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <SD_disk_read+0x32>
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e048      	b.n	8003eb0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003e1e:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <SD_disk_read+0xd0>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <SD_disk_read+0x44>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	025b      	lsls	r3, r3, #9
 8003e2e:	607b      	str	r3, [r7, #4]

	SELECT();
 8003e30:	f7ff fd30 	bl	8003894 <SELECT>

	if (count == 1)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d111      	bne.n	8003e5e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	2051      	movs	r0, #81	; 0x51
 8003e3e:	f7ff fe86 	bl	8003b4e <SD_SendCmd>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d129      	bne.n	8003e9c <SD_disk_read+0xb0>
 8003e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e4c:	68b8      	ldr	r0, [r7, #8]
 8003e4e:	f7ff fe0d 	bl	8003a6c <SD_RxDataBlock>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d021      	beq.n	8003e9c <SD_disk_read+0xb0>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	e01e      	b.n	8003e9c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	2052      	movs	r0, #82	; 0x52
 8003e62:	f7ff fe74 	bl	8003b4e <SD_SendCmd>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d117      	bne.n	8003e9c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e70:	68b8      	ldr	r0, [r7, #8]
 8003e72:	f7ff fdfb 	bl	8003a6c <SD_RxDataBlock>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <SD_disk_read+0xa6>
				buff += 512;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e82:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ed      	bne.n	8003e6c <SD_disk_read+0x80>
 8003e90:	e000      	b.n	8003e94 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003e92:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003e94:	2100      	movs	r1, #0
 8003e96:	204c      	movs	r0, #76	; 0x4c
 8003e98:	f7ff fe59 	bl	8003b4e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003e9c:	f7ff fd08 	bl	80038b0 <DESELECT>
	SPI_RxByte();
 8003ea0:	f7ff fd48 	bl	8003934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	200000e4 	.word	0x200000e4

08003ec0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d102      	bne.n	8003edc <SD_disk_write+0x1c>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <SD_disk_write+0x20>
 8003edc:	2304      	movs	r3, #4
 8003ede:	e06b      	b.n	8003fb8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <SD_disk_write+0x100>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <SD_disk_write+0x32>
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e062      	b.n	8003fb8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003ef2:	4b33      	ldr	r3, [pc, #204]	; (8003fc0 <SD_disk_write+0x100>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <SD_disk_write+0x44>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e059      	b.n	8003fb8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <SD_disk_write+0x104>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <SD_disk_write+0x56>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	025b      	lsls	r3, r3, #9
 8003f14:	607b      	str	r3, [r7, #4]

	SELECT();
 8003f16:	f7ff fcbd 	bl	8003894 <SELECT>

	if (count == 1)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d110      	bne.n	8003f42 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	2058      	movs	r0, #88	; 0x58
 8003f24:	f7ff fe13 	bl	8003b4e <SD_SendCmd>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d13a      	bne.n	8003fa4 <SD_disk_write+0xe4>
 8003f2e:	21fe      	movs	r1, #254	; 0xfe
 8003f30:	68b8      	ldr	r0, [r7, #8]
 8003f32:	f7ff fdc9 	bl	8003ac8 <SD_TxDataBlock>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d033      	beq.n	8003fa4 <SD_disk_write+0xe4>
			count = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	e030      	b.n	8003fa4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003f42:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <SD_disk_write+0x104>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	2077      	movs	r0, #119	; 0x77
 8003f52:	f7ff fdfc 	bl	8003b4e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	2057      	movs	r0, #87	; 0x57
 8003f5a:	f7ff fdf8 	bl	8003b4e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	2059      	movs	r0, #89	; 0x59
 8003f62:	f7ff fdf4 	bl	8003b4e <SD_SendCmd>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11b      	bne.n	8003fa4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003f6c:	21fc      	movs	r1, #252	; 0xfc
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f7ff fdaa 	bl	8003ac8 <SD_TxDataBlock>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <SD_disk_write+0xd0>
				buff += 512;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f80:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ee      	bne.n	8003f6c <SD_disk_write+0xac>
 8003f8e:	e000      	b.n	8003f92 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003f90:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003f92:	21fd      	movs	r1, #253	; 0xfd
 8003f94:	2000      	movs	r0, #0
 8003f96:	f7ff fd97 	bl	8003ac8 <SD_TxDataBlock>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <SD_disk_write+0xe4>
			{
				count = 1;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003fa4:	f7ff fc84 	bl	80038b0 <DESELECT>
	SPI_RxByte();
 8003fa8:	f7ff fcc4 	bl	8003934 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf14      	ite	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2300      	moveq	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	200000e4 	.word	0x200000e4

08003fc8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b08b      	sub	sp, #44	; 0x2c
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	603a      	str	r2, [r7, #0]
 8003fd2:	71fb      	strb	r3, [r7, #7]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <SD_disk_ioctl+0x1e>
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	e115      	b.n	8004212 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003fec:	79bb      	ldrb	r3, [r7, #6]
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	d124      	bne.n	800403c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d012      	beq.n	8004020 <SD_disk_ioctl+0x58>
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	dc1a      	bgt.n	8004034 <SD_disk_ioctl+0x6c>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <SD_disk_ioctl+0x40>
 8004002:	2b01      	cmp	r3, #1
 8004004:	d006      	beq.n	8004014 <SD_disk_ioctl+0x4c>
 8004006:	e015      	b.n	8004034 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004008:	f7ff fd1a 	bl	8003a40 <SD_PowerOff>
			res = RES_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004012:	e0fc      	b.n	800420e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8004014:	f7ff fcd2 	bl	80039bc <SD_PowerOn>
			res = RES_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800401e:	e0f6      	b.n	800420e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	1c5c      	adds	r4, r3, #1
 8004024:	f7ff fd18 	bl	8003a58 <SD_CheckPower>
 8004028:	4603      	mov	r3, r0
 800402a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800402c:	2300      	movs	r3, #0
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004032:	e0ec      	b.n	800420e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8004034:	2304      	movs	r3, #4
 8004036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800403a:	e0e8      	b.n	800420e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800403c:	4b77      	ldr	r3, [pc, #476]	; (800421c <SD_disk_ioctl+0x254>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <SD_disk_ioctl+0x86>
 800404a:	2303      	movs	r3, #3
 800404c:	e0e1      	b.n	8004212 <SD_disk_ioctl+0x24a>

		SELECT();
 800404e:	f7ff fc21 	bl	8003894 <SELECT>

		switch (ctrl)
 8004052:	79bb      	ldrb	r3, [r7, #6]
 8004054:	2b0d      	cmp	r3, #13
 8004056:	f200 80cb 	bhi.w	80041f0 <SD_disk_ioctl+0x228>
 800405a:	a201      	add	r2, pc, #4	; (adr r2, 8004060 <SD_disk_ioctl+0x98>)
 800405c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004060:	0800415b 	.word	0x0800415b
 8004064:	08004099 	.word	0x08004099
 8004068:	0800414b 	.word	0x0800414b
 800406c:	080041f1 	.word	0x080041f1
 8004070:	080041f1 	.word	0x080041f1
 8004074:	080041f1 	.word	0x080041f1
 8004078:	080041f1 	.word	0x080041f1
 800407c:	080041f1 	.word	0x080041f1
 8004080:	080041f1 	.word	0x080041f1
 8004084:	080041f1 	.word	0x080041f1
 8004088:	080041f1 	.word	0x080041f1
 800408c:	0800416d 	.word	0x0800416d
 8004090:	08004191 	.word	0x08004191
 8004094:	080041b5 	.word	0x080041b5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004098:	2100      	movs	r1, #0
 800409a:	2049      	movs	r0, #73	; 0x49
 800409c:	f7ff fd57 	bl	8003b4e <SD_SendCmd>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 80a8 	bne.w	80041f8 <SD_disk_ioctl+0x230>
 80040a8:	f107 030c 	add.w	r3, r7, #12
 80040ac:	2110      	movs	r1, #16
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fcdc 	bl	8003a6c <SD_RxDataBlock>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 809e 	beq.w	80041f8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80040bc:	7b3b      	ldrb	r3, [r7, #12]
 80040be:	099b      	lsrs	r3, r3, #6
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d10e      	bne.n	80040e4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80040c6:	7d7b      	ldrb	r3, [r7, #21]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	7d3b      	ldrb	r3, [r7, #20]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80040da:	8bfb      	ldrh	r3, [r7, #30]
 80040dc:	029a      	lsls	r2, r3, #10
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e02e      	b.n	8004142 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80040e4:	7c7b      	ldrb	r3, [r7, #17]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	7dbb      	ldrb	r3, [r7, #22]
 80040ee:	09db      	lsrs	r3, r3, #7
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	7d7b      	ldrb	r3, [r7, #21]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 0306 	and.w	r3, r3, #6
 8004100:	b2db      	uxtb	r3, r3
 8004102:	4413      	add	r3, r2
 8004104:	b2db      	uxtb	r3, r3
 8004106:	3302      	adds	r3, #2
 8004108:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800410c:	7d3b      	ldrb	r3, [r7, #20]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	b2db      	uxtb	r3, r3
 8004112:	b29a      	uxth	r2, r3
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	b29b      	uxth	r3, r3
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	b29b      	uxth	r3, r3
 800411c:	4413      	add	r3, r2
 800411e:	b29a      	uxth	r2, r3
 8004120:	7cbb      	ldrb	r3, [r7, #18]
 8004122:	029b      	lsls	r3, r3, #10
 8004124:	b29b      	uxth	r3, r3
 8004126:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800412a:	b29b      	uxth	r3, r3
 800412c:	4413      	add	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	3301      	adds	r3, #1
 8004132:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004134:	8bfa      	ldrh	r2, [r7, #30]
 8004136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800413a:	3b09      	subs	r3, #9
 800413c:	409a      	lsls	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004148:	e056      	b.n	80041f8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004150:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004158:	e055      	b.n	8004206 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800415a:	f7ff fc15 	bl	8003988 <SD_ReadyWait>
 800415e:	4603      	mov	r3, r0
 8004160:	2bff      	cmp	r3, #255	; 0xff
 8004162:	d14b      	bne.n	80041fc <SD_disk_ioctl+0x234>
 8004164:	2300      	movs	r3, #0
 8004166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800416a:	e047      	b.n	80041fc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800416c:	2100      	movs	r1, #0
 800416e:	2049      	movs	r0, #73	; 0x49
 8004170:	f7ff fced 	bl	8003b4e <SD_SendCmd>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d142      	bne.n	8004200 <SD_disk_ioctl+0x238>
 800417a:	2110      	movs	r1, #16
 800417c:	6a38      	ldr	r0, [r7, #32]
 800417e:	f7ff fc75 	bl	8003a6c <SD_RxDataBlock>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d03b      	beq.n	8004200 <SD_disk_ioctl+0x238>
 8004188:	2300      	movs	r3, #0
 800418a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800418e:	e037      	b.n	8004200 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004190:	2100      	movs	r1, #0
 8004192:	204a      	movs	r0, #74	; 0x4a
 8004194:	f7ff fcdb 	bl	8003b4e <SD_SendCmd>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d132      	bne.n	8004204 <SD_disk_ioctl+0x23c>
 800419e:	2110      	movs	r1, #16
 80041a0:	6a38      	ldr	r0, [r7, #32]
 80041a2:	f7ff fc63 	bl	8003a6c <SD_RxDataBlock>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02b      	beq.n	8004204 <SD_disk_ioctl+0x23c>
 80041ac:	2300      	movs	r3, #0
 80041ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80041b2:	e027      	b.n	8004204 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80041b4:	2100      	movs	r1, #0
 80041b6:	207a      	movs	r0, #122	; 0x7a
 80041b8:	f7ff fcc9 	bl	8003b4e <SD_SendCmd>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80041c8:	e00b      	b.n	80041e2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80041ca:	6a3c      	ldr	r4, [r7, #32]
 80041cc:	1c63      	adds	r3, r4, #1
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	f7ff fbb0 	bl	8003934 <SPI_RxByte>
 80041d4:	4603      	mov	r3, r0
 80041d6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80041d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041dc:	3301      	adds	r3, #1
 80041de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80041e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d9ef      	bls.n	80041ca <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80041f0:	2304      	movs	r3, #4
 80041f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041f6:	e006      	b.n	8004206 <SD_disk_ioctl+0x23e>
			break;
 80041f8:	bf00      	nop
 80041fa:	e004      	b.n	8004206 <SD_disk_ioctl+0x23e>
			break;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <SD_disk_ioctl+0x23e>
			break;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <SD_disk_ioctl+0x23e>
			break;
 8004204:	bf00      	nop
		}

		DESELECT();
 8004206:	f7ff fb53 	bl	80038b0 <DESELECT>
		SPI_RxByte();
 800420a:	f7ff fb93 	bl	8003934 <SPI_RxByte>
	}

	return res;
 800420e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004212:	4618      	mov	r0, r3
 8004214:	372c      	adds	r7, #44	; 0x2c
 8004216:	46bd      	mov	sp, r7
 8004218:	bd90      	pop	{r4, r7, pc}
 800421a:	bf00      	nop
 800421c:	20000000 	.word	0x20000000

08004220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004228:	f002 fb2b 	bl	8006882 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800422c:	f000 f8e0 	bl	80043f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004230:	f000 f9c4 	bl	80045bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8004234:	f000 f928 	bl	8004488 <MX_SPI1_Init>
  MX_FATFS_Init();
 8004238:	f004 fc88 	bl	8008b4c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800423c:	f000 f994 	bl	8004568 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8004240:	f000 f958 	bl	80044f4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_Delay(500);
 8004244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004248:	f002 fb8a 	bl	8006960 <HAL_Delay>

  	  f_mount(&fs, "", 0);
 800424c:	2200      	movs	r2, #0
 800424e:	495b      	ldr	r1, [pc, #364]	; (80043bc <main+0x19c>)
 8004250:	485b      	ldr	r0, [pc, #364]	; (80043c0 <main+0x1a0>)
 8004252:	f006 feb7 	bl	800afc4 <f_mount>
  	  // Open the data.csv file for reading
      FRESULT result = f_open(&input_file, "testfile.csv", FA_READ);
 8004256:	2201      	movs	r2, #1
 8004258:	495a      	ldr	r1, [pc, #360]	; (80043c4 <main+0x1a4>)
 800425a:	485b      	ldr	r0, [pc, #364]	; (80043c8 <main+0x1a8>)
 800425c:	f006 fef8 	bl	800b050 <f_open>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
      if (result != FR_OK)
 8004266:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800426a:	2b00      	cmp	r3, #0
 800426c:	d004      	beq.n	8004278 <main+0x58>
      {
          my_printf("Error opening data.csv for reading\n");
 800426e:	4857      	ldr	r0, [pc, #348]	; (80043cc <main+0x1ac>)
 8004270:	f000 fa12 	bl	8004698 <my_printf>
          return 1;
 8004274:	2301      	movs	r3, #1
 8004276:	e09c      	b.n	80043b2 <main+0x192>
      }
      // Get the size of the input file
      DWORD input_size = f_size(&input_file);
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <main+0x1a8>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      my_printf("Original file size: %d bytes\n", input_size);
 8004280:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8004284:	4852      	ldr	r0, [pc, #328]	; (80043d0 <main+0x1b0>)
 8004286:	f000 fa07 	bl	8004698 <my_printf>

      FRESULT res = f_open(&output_file, "testfile.zlib", FA_WRITE | FA_CREATE_ALWAYS);
 800428a:	220a      	movs	r2, #10
 800428c:	4951      	ldr	r1, [pc, #324]	; (80043d4 <main+0x1b4>)
 800428e:	4852      	ldr	r0, [pc, #328]	; (80043d8 <main+0x1b8>)
 8004290:	f006 fede 	bl	800b050 <f_open>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	  if (res != FR_OK)
 800429a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <main+0x8c>
	  {
	      my_printf("Error opening compressed.zlib for writing\n");
 80042a2:	484e      	ldr	r0, [pc, #312]	; (80043dc <main+0x1bc>)
 80042a4:	f000 f9f8 	bl	8004698 <my_printf>
	      return 1;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e082      	b.n	80043b2 <main+0x192>
      // Allocate a buffer to hold the data from the file
      char buffer[CHUNK_SIZE];

      // Read the data from the file into the buffer
      UINT bytes_read;
      result = f_read(&input_file, buffer, CHUNK_SIZE, &bytes_read);
 80042ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042b0:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80042b4:	22fa      	movs	r2, #250	; 0xfa
 80042b6:	4844      	ldr	r0, [pc, #272]	; (80043c8 <main+0x1a8>)
 80042b8:	f007 f896 	bl	800b3e8 <f_read>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217

      // Start timer
      HAL_TIM_Base_Start(&htim10);
 80042c2:	4847      	ldr	r0, [pc, #284]	; (80043e0 <main+0x1c0>)
 80042c4:	f004 f820 	bl	8008308 <HAL_TIM_Base_Start>


      while (result == FR_OK && bytes_read > 0)
 80042c8:	e053      	b.n	8004372 <main+0x152>
      {
          // Get current time (microseconds)
          timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 80042ca:	4b45      	ldr	r3, [pc, #276]	; (80043e0 <main+0x1c0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

    	  // Compress the data in the buffer using DEFLATE
    	  char compressed_buffer[CHUNK_SIZE];
    	  size_t compressed_size = CHUNK_SIZE;
 80042d4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80042d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042dc:	22fa      	movs	r2, #250	; 0xfa
 80042de:	601a      	str	r2, [r3, #0]
    	  deflate_compress(buffer, bytes_read, compressed_buffer, &compressed_size);
 80042e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80042e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80042ee:	1d3a      	adds	r2, r7, #4
 80042f0:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 80042f4:	f000 f9e2 	bl	80046bc <deflate_compress>

          // Get time elapsed
          timer_val = __HAL_TIM_GET_COUNTER(&htim10) - timer_val;
 80042f8:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <main+0x1c0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	b29a      	uxth	r2, r3
 8004300:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
          my_printf("Timer: %u us\n", timer_val);
 800430a:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800430e:	4619      	mov	r1, r3
 8004310:	4834      	ldr	r0, [pc, #208]	; (80043e4 <main+0x1c4>)
 8004312:	f000 f9c1 	bl	8004698 <my_printf>

    	  // Write the compressed data back to the SD card
    	  UINT bytes_written;
    	  result = f_write(&output_file, compressed_buffer, compressed_size, &bytes_written);
 8004316:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800431a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004324:	1d39      	adds	r1, r7, #4
 8004326:	482c      	ldr	r0, [pc, #176]	; (80043d8 <main+0x1b8>)
 8004328:	f007 f9bd 	bl	800b6a6 <f_write>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
    	  if (result != FR_OK || bytes_written != compressed_size)
 8004332:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <main+0x132>
 800433a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800433e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8004348:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d004      	beq.n	800435c <main+0x13c>
    	  {
    	      my_printf("Error writing compressed data to file\n");
 8004352:	4825      	ldr	r0, [pc, #148]	; (80043e8 <main+0x1c8>)
 8004354:	f000 f9a0 	bl	8004698 <my_printf>
    	      return 1;
 8004358:	2301      	movs	r3, #1
 800435a:	e02a      	b.n	80043b2 <main+0x192>
    	  }

    	  // Read the next chunk of data from the file
    	  result = f_read(&input_file, buffer, CHUNK_SIZE, &bytes_read);
 800435c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004360:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8004364:	22fa      	movs	r2, #250	; 0xfa
 8004366:	4818      	ldr	r0, [pc, #96]	; (80043c8 <main+0x1a8>)
 8004368:	f007 f83e 	bl	800b3e8 <f_read>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
      while (result == FR_OK && bytes_read > 0)
 8004372:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <main+0x168>
 800437a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800437e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1a0      	bne.n	80042ca <main+0xaa>
    }

      // Get the size of the input file
      DWORD output_size = f_size(&output_file);
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <main+0x1b8>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
      my_printf("Compressed file size: %d bytes\n", output_size);
 8004390:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8004394:	4815      	ldr	r0, [pc, #84]	; (80043ec <main+0x1cc>)
 8004396:	f000 f97f 	bl	8004698 <my_printf>

      // Close the input file and output file, and unmount the SD card
      f_close(&input_file);
 800439a:	480b      	ldr	r0, [pc, #44]	; (80043c8 <main+0x1a8>)
 800439c:	f007 fb95 	bl	800baca <f_close>
      f_close(&output_file);
 80043a0:	480d      	ldr	r0, [pc, #52]	; (80043d8 <main+0x1b8>)
 80043a2:	f007 fb92 	bl	800baca <f_close>
      f_mount(NULL, "", 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	4904      	ldr	r1, [pc, #16]	; (80043bc <main+0x19c>)
 80043aa:	2000      	movs	r0, #0
 80043ac:	f006 fe0a 	bl	800afc4 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80043b0:	e7fe      	b.n	80043b0 <main+0x190>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	0800d40c 	.word	0x0800d40c
 80043c0:	200000e8 	.word	0x200000e8
 80043c4:	0800d410 	.word	0x0800d410
 80043c8:	20001120 	.word	0x20001120
 80043cc:	0800d420 	.word	0x0800d420
 80043d0:	0800d444 	.word	0x0800d444
 80043d4:	0800d464 	.word	0x0800d464
 80043d8:	20002150 	.word	0x20002150
 80043dc:	0800d474 	.word	0x0800d474
 80043e0:	200031d8 	.word	0x200031d8
 80043e4:	0800d4a0 	.word	0x0800d4a0
 80043e8:	0800d4b0 	.word	0x0800d4b0
 80043ec:	0800d4d8 	.word	0x0800d4d8

080043f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b092      	sub	sp, #72	; 0x48
 80043f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	2234      	movs	r2, #52	; 0x34
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f007 fdda 	bl	800bfb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004404:	463b      	mov	r3, r7
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004412:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <SystemClock_Config+0x94>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800441a:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <SystemClock_Config+0x94>)
 800441c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004420:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004422:	2302      	movs	r3, #2
 8004424:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004426:	2301      	movs	r3, #1
 8004428:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800442a:	2310      	movs	r3, #16
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800442e:	2302      	movs	r3, #2
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004432:	2300      	movs	r3, #0
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8004436:	2300      	movs	r3, #0
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800443a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800443e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004440:	f107 0314 	add.w	r3, r7, #20
 8004444:	4618      	mov	r0, r3
 8004446:	f002 fd39 	bl	8006ebc <HAL_RCC_OscConfig>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8004450:	f000 f97c 	bl	800474c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004454:	230f      	movs	r3, #15
 8004456:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004458:	2303      	movs	r3, #3
 800445a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800445c:	2300      	movs	r3, #0
 800445e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004468:	463b      	mov	r3, r7
 800446a:	2101      	movs	r1, #1
 800446c:	4618      	mov	r0, r3
 800446e:	f003 f855 	bl	800751c <HAL_RCC_ClockConfig>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004478:	f000 f968 	bl	800474c <Error_Handler>
  }
}
 800447c:	bf00      	nop
 800447e:	3748      	adds	r7, #72	; 0x48
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40007000 	.word	0x40007000

08004488 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <MX_SPI1_Init+0x64>)
 800448e:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <MX_SPI1_Init+0x68>)
 8004490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004492:	4b16      	ldr	r3, [pc, #88]	; (80044ec <MX_SPI1_Init+0x64>)
 8004494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <MX_SPI1_Init+0x64>)
 800449c:	2200      	movs	r2, #0
 800449e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <MX_SPI1_Init+0x64>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <MX_SPI1_Init+0x64>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <MX_SPI1_Init+0x64>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <MX_SPI1_Init+0x64>)
 80044b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <MX_SPI1_Init+0x64>)
 80044bc:	2200      	movs	r2, #0
 80044be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <MX_SPI1_Init+0x64>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044c6:	4b09      	ldr	r3, [pc, #36]	; (80044ec <MX_SPI1_Init+0x64>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <MX_SPI1_Init+0x64>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <MX_SPI1_Init+0x64>)
 80044d4:	220a      	movs	r2, #10
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044d8:	4804      	ldr	r0, [pc, #16]	; (80044ec <MX_SPI1_Init+0x64>)
 80044da:	f003 faa3 	bl	8007a24 <HAL_SPI_Init>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80044e4:	f000 f932 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044e8:	bf00      	nop
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20003180 	.word	0x20003180
 80044f0:	40013000 	.word	0x40013000

080044f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044fa:	463b      	mov	r3, r7
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <MX_TIM10_Init+0x6c>)
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <MX_TIM10_Init+0x70>)
 800450a:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 24-1;
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <MX_TIM10_Init+0x6c>)
 800450e:	2217      	movs	r2, #23
 8004510:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <MX_TIM10_Init+0x6c>)
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <MX_TIM10_Init+0x6c>)
 800451a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800451e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <MX_TIM10_Init+0x6c>)
 8004522:	2200      	movs	r2, #0
 8004524:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004526:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <MX_TIM10_Init+0x6c>)
 8004528:	2200      	movs	r2, #0
 800452a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800452c:	480c      	ldr	r0, [pc, #48]	; (8004560 <MX_TIM10_Init+0x6c>)
 800452e:	f003 feab 	bl	8008288 <HAL_TIM_Base_Init>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8004538:	f000 f908 	bl	800474c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800453c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004540:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 8004542:	463b      	mov	r3, r7
 8004544:	4619      	mov	r1, r3
 8004546:	4806      	ldr	r0, [pc, #24]	; (8004560 <MX_TIM10_Init+0x6c>)
 8004548:	f003 ff28 	bl	800839c <HAL_TIM_ConfigClockSource>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 8004552:	f000 f8fb 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	200031d8 	.word	0x200031d8
 8004564:	40010c00 	.word	0x40010c00

08004568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 800456e:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <MX_USART2_UART_Init+0x50>)
 8004570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 8004574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800457a:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 800457c:	2200      	movs	r2, #0
 800457e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 8004582:	2200      	movs	r2, #0
 8004584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 8004588:	2200      	movs	r2, #0
 800458a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 800458e:	220c      	movs	r2, #12
 8004590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 8004594:	2200      	movs	r2, #0
 8004596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 800459a:	2200      	movs	r2, #0
 800459c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800459e:	4805      	ldr	r0, [pc, #20]	; (80045b4 <MX_USART2_UART_Init+0x4c>)
 80045a0:	f004 f8c6 	bl	8008730 <HAL_UART_Init>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045aa:	f000 f8cf 	bl	800474c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20003218 	.word	0x20003218
 80045b8:	40004400 	.word	0x40004400

080045bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c2:	f107 030c 	add.w	r3, r7, #12
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	609a      	str	r2, [r3, #8]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <MX_GPIO_Init+0x8c>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <MX_GPIO_Init+0x8c>)
 80045d8:	f043 0320 	orr.w	r3, r3, #32
 80045dc:	61d3      	str	r3, [r2, #28]
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <MX_GPIO_Init+0x8c>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <MX_GPIO_Init+0x8c>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4a16      	ldr	r2, [pc, #88]	; (8004648 <MX_GPIO_Init+0x8c>)
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	61d3      	str	r3, [r2, #28]
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <MX_GPIO_Init+0x8c>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <MX_GPIO_Init+0x8c>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4a10      	ldr	r2, [pc, #64]	; (8004648 <MX_GPIO_Init+0x8c>)
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	61d3      	str	r3, [r2, #28]
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <MX_GPIO_Init+0x8c>)
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800461a:	2200      	movs	r2, #0
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	480b      	ldr	r0, [pc, #44]	; (800464c <MX_GPIO_Init+0x90>)
 8004620:	f002 fc34 	bl	8006e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004624:	2340      	movs	r3, #64	; 0x40
 8004626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004628:	2301      	movs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	4619      	mov	r1, r3
 800463a:	4804      	ldr	r0, [pc, #16]	; (800464c <MX_GPIO_Init+0x90>)
 800463c:	f002 fa96 	bl	8006b6c <HAL_GPIO_Init>

}
 8004640:	bf00      	nop
 8004642:	3720      	adds	r7, #32
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	40020400 	.word	0x40020400

08004650 <vprint>:

/* USER CODE BEGIN 4 */
void vprint(const char *fmt, va_list argp)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0b4      	sub	sp, #208	; 0xd0
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800465a:	f107 0308 	add.w	r3, r7, #8
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	f008 f8f0 	bl	800c848 <vsiprintf>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	dd0d      	ble.n	800468a <vprint+0x3a>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	4618      	mov	r0, r3
 8004674:	f7fb fd82 	bl	800017c <strlen>
 8004678:	4603      	mov	r3, r0
 800467a:	b29a      	uxth	r2, r3
 800467c:	f107 0108 	add.w	r1, r7, #8
 8004680:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004684:	4803      	ldr	r0, [pc, #12]	; (8004694 <vprint+0x44>)
 8004686:	f004 f8a0 	bl	80087ca <HAL_UART_Transmit>
    }
}
 800468a:	bf00      	nop
 800468c:	37d0      	adds	r7, #208	; 0xd0
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20003218 	.word	0x20003218

08004698 <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 8004698:	b40f      	push	{r0, r1, r2, r3}
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	6938      	ldr	r0, [r7, #16]
 80046aa:	f7ff ffd1 	bl	8004650 <vprint>
    va_end(argp);
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b8:	b004      	add	sp, #16
 80046ba:	4770      	bx	lr

080046bc <deflate_compress>:

void deflate_compress(const char* input, size_t input_size, char* output, size_t* output_size)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b094      	sub	sp, #80	; 0x50
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
    z_stream stream;
    stream.zalloc = Z_NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
    stream.zfree = Z_NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	63bb      	str	r3, [r7, #56]	; 0x38
    stream.opaque = Z_NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    int ret = deflateInit(&stream, Z_DEFAULT_COMPRESSION);
 80046d6:	f107 0014 	add.w	r0, r7, #20
 80046da:	2338      	movs	r3, #56	; 0x38
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <deflate_compress+0x84>)
 80046de:	f04f 31ff 	mov.w	r1, #4294967295
 80046e2:	f7fc fc3d 	bl	8000f60 <deflateInit_>
 80046e6:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (ret != Z_OK)
 80046e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <deflate_compress+0x3c>
    {
        my_printf("Error initializing zlib: %d\n", ret);
 80046ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046f0:	4814      	ldr	r0, [pc, #80]	; (8004744 <deflate_compress+0x88>)
 80046f2:	f7ff ffd1 	bl	8004698 <my_printf>
        return;
 80046f6:	e01f      	b.n	8004738 <deflate_compress+0x7c>
    }

    stream.avail_in = input_size;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	61bb      	str	r3, [r7, #24]
    stream.next_in = (Bytef*)input;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	617b      	str	r3, [r7, #20]
    stream.avail_out = *output_size;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
    stream.next_out = (Bytef*)output;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	623b      	str	r3, [r7, #32]
    ret = deflate(&stream, Z_FINISH);
 800470a:	f107 0314 	add.w	r3, r7, #20
 800470e:	2104      	movs	r1, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f7fc fe75 	bl	8001400 <deflate>
 8004716:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (ret != Z_STREAM_END)
 8004718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d004      	beq.n	8004728 <deflate_compress+0x6c>
    {
        my_printf("Error compressing data: %d\n", ret);
 800471e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004720:	4809      	ldr	r0, [pc, #36]	; (8004748 <deflate_compress+0x8c>)
 8004722:	f7ff ffb9 	bl	8004698 <my_printf>
        return;
 8004726:	e007      	b.n	8004738 <deflate_compress+0x7c>
    }
    *output_size = stream.total_out;
 8004728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	601a      	str	r2, [r3, #0]
    deflateEnd(&stream);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd fbbe 	bl	8001eb4 <deflateEnd>
}
 8004738:	3750      	adds	r7, #80	; 0x50
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	0800d4f8 	.word	0x0800d4f8
 8004744:	0800d500 	.word	0x0800d500
 8004748:	0800d520 	.word	0x0800d520

0800474c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004750:	b672      	cpsid	i
}
 8004752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004754:	e7fe      	b.n	8004754 <Error_Handler+0x8>
	...

08004758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800475e:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <HAL_MspInit+0x58>)
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <HAL_MspInit+0x58>)
 8004764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004768:	6253      	str	r3, [r2, #36]	; 0x24
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_MspInit+0x58>)
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_MspInit+0x58>)
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <HAL_MspInit+0x58>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	6213      	str	r3, [r2, #32]
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_MspInit+0x58>)
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_MspInit+0x58>)
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	4a07      	ldr	r2, [pc, #28]	; (80047b0 <HAL_MspInit+0x58>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6253      	str	r3, [r2, #36]	; 0x24
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_MspInit+0x58>)
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	40023800 	.word	0x40023800

080047b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	; 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047bc:	f107 0314 	add.w	r3, r7, #20
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a17      	ldr	r2, [pc, #92]	; (8004830 <HAL_SPI_MspInit+0x7c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d127      	bne.n	8004826 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_SPI_MspInit+0x80>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_SPI_MspInit+0x80>)
 80047dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047e0:	6213      	str	r3, [r2, #32]
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_SPI_MspInit+0x80>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_SPI_MspInit+0x80>)
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <HAL_SPI_MspInit+0x80>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	61d3      	str	r3, [r2, #28]
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <HAL_SPI_MspInit+0x80>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004806:	23e0      	movs	r3, #224	; 0xe0
 8004808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480a:	2302      	movs	r3, #2
 800480c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004812:	2303      	movs	r3, #3
 8004814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004816:	2305      	movs	r3, #5
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481a:	f107 0314 	add.w	r3, r7, #20
 800481e:	4619      	mov	r1, r3
 8004820:	4805      	ldr	r0, [pc, #20]	; (8004838 <HAL_SPI_MspInit+0x84>)
 8004822:	f002 f9a3 	bl	8006b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004826:	bf00      	nop
 8004828:	3728      	adds	r7, #40	; 0x28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40013000 	.word	0x40013000
 8004834:	40023800 	.word	0x40023800
 8004838:	40020000 	.word	0x40020000

0800483c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_TIM_Base_MspInit+0x34>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d10b      	bne.n	8004866 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_TIM_Base_MspInit+0x38>)
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	4a08      	ldr	r2, [pc, #32]	; (8004874 <HAL_TIM_Base_MspInit+0x38>)
 8004854:	f043 0308 	orr.w	r3, r3, #8
 8004858:	6213      	str	r3, [r2, #32]
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_TIM_Base_MspInit+0x38>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	40010c00 	.word	0x40010c00
 8004874:	40023800 	.word	0x40023800

08004878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	605a      	str	r2, [r3, #4]
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <HAL_UART_MspInit+0x7c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d127      	bne.n	80048ea <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800489a:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <HAL_UART_MspInit+0x80>)
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_UART_MspInit+0x80>)
 80048a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a4:	6253      	str	r3, [r2, #36]	; 0x24
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <HAL_UART_MspInit+0x80>)
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <HAL_UART_MspInit+0x80>)
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	4a10      	ldr	r2, [pc, #64]	; (80048f8 <HAL_UART_MspInit+0x80>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	61d3      	str	r3, [r2, #28]
 80048be:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_UART_MspInit+0x80>)
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048ca:	230c      	movs	r3, #12
 80048cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d6:	2303      	movs	r3, #3
 80048d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048da:	2307      	movs	r3, #7
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048de:	f107 0314 	add.w	r3, r7, #20
 80048e2:	4619      	mov	r1, r3
 80048e4:	4805      	ldr	r0, [pc, #20]	; (80048fc <HAL_UART_MspInit+0x84>)
 80048e6:	f002 f941 	bl	8006b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80048ea:	bf00      	nop
 80048ec:	3728      	adds	r7, #40	; 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40004400 	.word	0x40004400
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40020000 	.word	0x40020000

08004900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004904:	e7fe      	b.n	8004904 <NMI_Handler+0x4>

08004906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004906:	b480      	push	{r7}
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800490a:	e7fe      	b.n	800490a <HardFault_Handler+0x4>

0800490c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004910:	e7fe      	b.n	8004910 <MemManage_Handler+0x4>

08004912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004916:	e7fe      	b.n	8004916 <BusFault_Handler+0x4>

08004918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800491c:	e7fe      	b.n	800491c <UsageFault_Handler+0x4>

0800491e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr

0800492a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800492a:	b480      	push	{r7}
 800492c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800492e:	bf00      	nop
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004936:	b480      	push	{r7}
 8004938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800493a:	bf00      	nop
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
	...

08004944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <SysTick_Handler+0x34>)
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <SysTick_Handler+0x18>
	  Timer1--;
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <SysTick_Handler+0x34>)
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <SysTick_Handler+0x34>)
 800495a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <SysTick_Handler+0x38>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <SysTick_Handler+0x2c>
	  Timer2--;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <SysTick_Handler+0x38>)
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <SysTick_Handler+0x38>)
 800496e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004970:	f001 ffda 	bl	8006928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200000e0 	.word	0x200000e0
 800497c:	200000e2 	.word	0x200000e2

08004980 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800498a:	f007 f9e5 	bl	800bd58 <__errno>
 800498e:	4603      	mov	r3, r0
 8004990:	2216      	movs	r2, #22
 8004992:	601a      	str	r2, [r3, #0]
  return -1;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_exit>:

void _exit (int status)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049a8:	f04f 31ff 	mov.w	r1, #4294967295
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ffe7 	bl	8004980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80049b2:	e7fe      	b.n	80049b2 <_exit+0x12>

080049b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e00a      	b.n	80049dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049c6:	f3af 8000 	nop.w
 80049ca:	4601      	mov	r1, r0
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	60ba      	str	r2, [r7, #8]
 80049d2:	b2ca      	uxtb	r2, r1
 80049d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	3301      	adds	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	dbf0      	blt.n	80049c6 <_read+0x12>
  }

  return len;
 80049e4:	687b      	ldr	r3, [r7, #4]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e009      	b.n	8004a14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	60ba      	str	r2, [r7, #8]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3301      	adds	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	dbf1      	blt.n	8004a00 <_write+0x12>
  }
  return len;
 8004a1c:	687b      	ldr	r3, [r7, #4]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <_close>:

int _close(int file)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a4c:	605a      	str	r2, [r3, #4]
  return 0;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr

08004a5a <_isatty>:

int _isatty(int file)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr
	...

08004a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a90:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <_sbrk+0x5c>)
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <_sbrk+0x60>)
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a9c:	4b13      	ldr	r3, [pc, #76]	; (8004aec <_sbrk+0x64>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004aa4:	4b11      	ldr	r3, [pc, #68]	; (8004aec <_sbrk+0x64>)
 8004aa6:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <_sbrk+0x68>)
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <_sbrk+0x64>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d207      	bcs.n	8004ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ab8:	f007 f94e 	bl	800bd58 <__errno>
 8004abc:	4603      	mov	r3, r0
 8004abe:	220c      	movs	r2, #12
 8004ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac6:	e009      	b.n	8004adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ac8:	4b08      	ldr	r3, [pc, #32]	; (8004aec <_sbrk+0x64>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <_sbrk+0x64>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	4a05      	ldr	r2, [pc, #20]	; (8004aec <_sbrk+0x64>)
 8004ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ada:	68fb      	ldr	r3, [r7, #12]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20014000 	.word	0x20014000
 8004ae8:	00000400 	.word	0x00000400
 8004aec:	2000325c 	.word	0x2000325c
 8004af0:	200034b8 	.word	0x200034b8

08004af4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <send_bits>:

local void send_bits(s, value, length)
    deflate_state *s;
    int value;  /* value to send */
    int length; /* number of bits */
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
    Tracevv((stderr," l %2d v %4x ", length, value));
 8004b0c:	4b56      	ldr	r3, [pc, #344]	; (8004c68 <send_bits+0x168>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	dd07      	ble.n	8004b24 <send_bits+0x24>
 8004b14:	4b55      	ldr	r3, [pc, #340]	; (8004c6c <send_bits+0x16c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68d8      	ldr	r0, [r3, #12]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4954      	ldr	r1, [pc, #336]	; (8004c70 <send_bits+0x170>)
 8004b20:	f007 f934 	bl	800bd8c <fiprintf>
    Assert(length > 0 && length <= 15, "invalid length");
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dd02      	ble.n	8004b30 <send_bits+0x30>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b0f      	cmp	r3, #15
 8004b2e:	dd02      	ble.n	8004b36 <send_bits+0x36>
 8004b30:	4850      	ldr	r0, [pc, #320]	; (8004c74 <send_bits+0x174>)
 8004b32:	f001 fe4b 	bl	80067cc <z_error>
    s->bits_sent += (ulg)length;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	f8d3 26bc 	ldr.w	r2, [r3, #1724]	; 0x6bc
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b4a:	f8c2 36bc 	str.w	r3, [r2, #1724]	; 0x6bc

    /* If not enough room in bi_buf, use (valid) bits from bi_buf and
     * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
     * unused bits in value.
     */
    if (s->bi_valid > (int)Buf_size - length) {
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b54:	f8d3 26c4 	ldr.w	r2, [r3, #1732]	; 0x6c4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1c3 0310 	rsb	r3, r3, #16
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	dd58      	ble.n	8004c14 <send_bits+0x114>
        s->bi_buf |= (ush)value << s->bi_valid;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b68:	f8b3 36c0 	ldrh.w	r3, [r3, #1728]	; 0x6c0
 8004b6c:	b21a      	sxth	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	4619      	mov	r1, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7a:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 8004b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b82:	b21b      	sxth	r3, r3
 8004b84:	4313      	orrs	r3, r2
 8004b86:	b21b      	sxth	r3, r3
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b90:	f8a3 26c0 	strh.w	r2, [r3, #1728]	; 0x6c0
        put_short(s, s->bi_buf);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9a:	f8b3 46c0 	ldrh.w	r4, [r3, #1728]	; 0x6c0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	1c58      	adds	r0, r3, #1
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	6148      	str	r0, [r1, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	b2e2      	uxtb	r2, r4
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb8:	f8b3 36c0 	ldrh.w	r3, [r3, #1728]	; 0x6c0
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	b29c      	uxth	r4, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	1c58      	adds	r0, r3, #1
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	6148      	str	r0, [r1, #20]
 8004bce:	4413      	add	r3, r2
 8004bd0:	b2e2      	uxtb	r2, r4
 8004bd2:	701a      	strb	r2, [r3, #0]
        s->bi_buf = (ush)value >> (Buf_size - s->bi_valid);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 8004be4:	f1c3 0310 	rsb	r3, r3, #16
 8004be8:	fa42 f303 	asr.w	r3, r2, r3
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf4:	f8a3 26c0 	strh.w	r2, [r3, #1728]	; 0x6c0
        s->bi_valid += length - Buf_size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfe:	f8d3 26c4 	ldr.w	r2, [r3, #1732]	; 0x6c4
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3b10      	subs	r3, #16
 8004c06:	4413      	add	r3, r2
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c0e:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
    } else {
        s->bi_buf |= (ush)value << s->bi_valid;
        s->bi_valid += length;
    }
}
 8004c12:	e024      	b.n	8004c5e <send_bits+0x15e>
        s->bi_buf |= (ush)value << s->bi_valid;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1a:	f8b3 36c0 	ldrh.w	r3, [r3, #1728]	; 0x6c0
 8004c1e:	b21a      	sxth	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	4619      	mov	r1, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2c:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	b21b      	sxth	r3, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b21b      	sxth	r3, r3
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c42:	f8a3 26c0 	strh.w	r2, [r3, #1728]	; 0x6c0
        s->bi_valid += length;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4c:	f8d3 26c4 	ldr.w	r2, [r3, #1732]	; 0x6c4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4413      	add	r3, r2
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c5a:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20003260 	.word	0x20003260
 8004c6c:	20000060 	.word	0x20000060
 8004c70:	0800d53c 	.word	0x0800d53c
 8004c74:	0800d54c 	.word	0x0800d54c

08004c78 <tr_static_init>:

/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
local void tr_static_init()
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0

#  ifdef GEN_TREES_H
    gen_trees_header();
#  endif
#endif /* defined(GEN_TREES_H) || !defined(STDC) */
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <_tr_init>:
/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
void ZLIB_INTERNAL _tr_init(s)
    deflate_state *s;
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    tr_static_init();
 8004c8c:	f7ff fff4 	bl	8004c78 <tr_static_init>

    s->l_desc.dyn_tree = s->dyn_ltree;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f103 0294 	add.w	r2, r3, #148	; 0x94
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8c3 2b18 	str.w	r2, [r3, #2840]	; 0xb18
    s->l_desc.stat_desc = &static_l_desc;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <_tr_init+0x8c>)
 8004ca0:	f8c3 2b20 	str.w	r2, [r3, #2848]	; 0xb20

    s->d_desc.dyn_tree = s->dyn_dtree;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f603 1288 	addw	r2, r3, #2440	; 0x988
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8c3 2b24 	str.w	r2, [r3, #2852]	; 0xb24
    s->d_desc.stat_desc = &static_d_desc;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <_tr_init+0x90>)
 8004cb4:	f8c3 2b2c 	str.w	r2, [r3, #2860]	; 0xb2c

    s->bl_desc.dyn_tree = s->bl_tree;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f603 227c 	addw	r2, r3, #2684	; 0xa7c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8c3 2b30 	str.w	r2, [r3, #2864]	; 0xb30
    s->bl_desc.stat_desc = &static_bl_desc;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <_tr_init+0x94>)
 8004cc8:	f8c3 2b38 	str.w	r2, [r3, #2872]	; 0xb38

    s->bi_buf = 0;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8a3 26c0 	strh.w	r2, [r3, #1728]	; 0x6c0
    s->bi_valid = 0;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cde:	461a      	mov	r2, r3
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
#ifdef DEBUG
    s->compressed_len = 0L;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	461a      	mov	r2, r3
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f8c2 36b8 	str.w	r3, [r2, #1720]	; 0x6b8
    s->bits_sent = 0L;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c2 36bc 	str.w	r3, [r2, #1724]	; 0x6bc
#endif

    /* Initialize the first block of the first file: */
    init_block(s);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f80a 	bl	8004d1c <init_block>
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000008 	.word	0x20000008
 8004d14:	2000001c 	.word	0x2000001c
 8004d18:	20000030 	.word	0x20000030

08004d1c <init_block>:
/* ===========================================================================
 * Initialize a new block.
 */
local void init_block(s)
    deflate_state *s;
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
    int n; /* iterates over tree elements */

    /* Initialize the trees. */
    for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e009      	b.n	8004d3e <init_block+0x22>
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3324      	adds	r3, #36	; 0x24
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	2200      	movs	r2, #0
 8004d36:	809a      	strh	r2, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8004d44:	dbf1      	blt.n	8004d2a <init_block+0xe>
    for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e009      	b.n	8004d60 <init_block+0x44>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f202 2262 	addw	r2, r2, #610	; 0x262
 8004d54:	2100      	movs	r1, #0
 8004d56:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b1d      	cmp	r3, #29
 8004d64:	ddf2      	ble.n	8004d4c <init_block+0x30>
    for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e00a      	b.n	8004d82 <init_block+0x66>
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	809a      	strh	r2, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b12      	cmp	r3, #18
 8004d86:	ddf1      	ble.n	8004d6c <init_block+0x50>

    s->dyn_ltree[END_BLOCK].Freq = 1;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f8a3 2494 	strh.w	r2, [r3, #1172]	; 0x494
    s->opt_len = s->static_len = 0L;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d96:	461a      	mov	r2, r3
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c2 36ac 	str.w	r3, [r2, #1708]	; 0x6ac
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dae:	f8c2 36a8 	str.w	r3, [r2, #1704]	; 0x6a8
    s->last_lit = s->matches = 0;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db8:	461a      	mov	r2, r3
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c2 36b0 	str.w	r3, [r2, #1712]	; 0x6b0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc6:	f8d3 36b0 	ldr.w	r3, [r3, #1712]	; 0x6b0
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dd0:	f8c2 36a0 	str.w	r3, [r2, #1696]	; 0x6a0
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <pqdownheap>:
 */
local void pqdownheap(s, tree, k)
    deflate_state *s;
    ct_data *tree;  /* the tree to restore */
    int k;               /* node to move down */
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
    int v = s->heap[k];
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]
    int j = k << 1;  /* left son of k */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
    while (j <= s->heap_len) {
 8004e00:	e0a6      	b.n	8004f50 <pqdownheap+0x172>
        /* Set j to the smallest of the two sons: */
        if (j < s->heap_len &&
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e08:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	da51      	bge.n	8004eb6 <pqdownheap+0xd8>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	3301      	adds	r3, #1
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	4413      	add	r3, r2
 8004e28:	881a      	ldrh	r2, [r3, #0]
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	440b      	add	r3, r1
 8004e3e:	881b      	ldrh	r3, [r3, #0]
        if (j < s->heap_len &&
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d335      	bcc.n	8004eb0 <pqdownheap+0xd2>
            smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3301      	adds	r3, #1
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	4413      	add	r3, r2
 8004e5a:	881a      	ldrh	r2, [r3, #0]
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	440b      	add	r3, r1
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d11f      	bne.n	8004eb6 <pqdownheap+0xd8>
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8004e8e:	3318      	adds	r3, #24
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	440b      	add	r3, r1
 8004ea4:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d802      	bhi.n	8004eb6 <pqdownheap+0xd8>
            j++;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s->heap[j], s->depth)) break;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	68f9      	ldr	r1, [r7, #12]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	440b      	add	r3, r1
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d343      	bcc.n	8004f62 <pqdownheap+0x184>
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881a      	ldrh	r2, [r3, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	440b      	add	r3, r1
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d115      	bne.n	8004f2a <pqdownheap+0x14c>
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8004f08:	3318      	adds	r3, #24
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	68f9      	ldr	r1, [r7, #12]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8004f22:	3318      	adds	r3, #24
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d91b      	bls.n	8004f62 <pqdownheap+0x184>

        /* Exchange v with the smallest son */
        s->heap[k] = s->heap[j];  k = j;
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	440b      	add	r3, r1
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	607b      	str	r3, [r7, #4]

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	617b      	str	r3, [r7, #20]
    while (j <= s->heap_len) {
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f56:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	f77f af50 	ble.w	8004e02 <pqdownheap+0x24>
    }
    s->heap[k] = v;
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	605a      	str	r2, [r3, #4]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <gen_bitlen>:
 *     not null.
 */
local void gen_bitlen(s, desc)
    deflate_state *s;
    tree_desc *desc;    /* the tree descriptor */
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b092      	sub	sp, #72	; 0x48
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
    ct_data *tree        = desc->dyn_tree;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    int max_code         = desc->max_code;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    const ct_data *stree = desc->stat_desc->static_tree;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	623b      	str	r3, [r7, #32]
    const intf *extra    = desc->stat_desc->extra_bits;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	61fb      	str	r3, [r7, #28]
    int base             = desc->stat_desc->extra_base;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	61bb      	str	r3, [r7, #24]
    int max_length       = desc->stat_desc->max_length;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	617b      	str	r3, [r7, #20]
    int h;              /* heap index */
    int n, m;           /* iterate over the tree elements */
    int bits;           /* bit length */
    int xbits;          /* extra bits */
    ush f;              /* frequency */
    int overflow = 0;   /* number of elements with bit length too large */
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

    for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fba:	e00a      	b.n	8004fd2 <gen_bitlen+0x56>
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc0:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	2200      	movs	r2, #0
 8004fca:	809a      	strh	r2, [r3, #4]
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	3301      	adds	r3, #1
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	2b0f      	cmp	r3, #15
 8004fd6:	ddf1      	ble.n	8004fbc <gen_bitlen+0x40>

    /* In a first pass, compute the optimal bit lengths (which may
     * overflow in the case of the bit length tree).
     */
    tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fde:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff2:	4413      	add	r3, r2
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	805a      	strh	r2, [r3, #2]

    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffe:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8005002:	3301      	adds	r3, #1
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005006:	e07a      	b.n	80050fe <gen_bitlen+0x182>
        n = s->heap[h];
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800500c:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
        bits = tree[tree[n].Dad].Len + 1;
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501e:	4413      	add	r3, r2
 8005020:	885b      	ldrh	r3, [r3, #2]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005026:	4413      	add	r3, r2
 8005028:	885b      	ldrh	r3, [r3, #2]
 800502a:	3301      	adds	r3, #1
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
        if (bits > max_length) bits = max_length, overflow++;
 800502e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	429a      	cmp	r2, r3
 8005034:	dd04      	ble.n	8005040 <gen_bitlen+0xc4>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	3301      	adds	r3, #1
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
        tree[n].Len = (ush)bits;
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005046:	4413      	add	r3, r2
 8005048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800504a:	b292      	uxth	r2, r2
 800504c:	805a      	strh	r2, [r3, #2]
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) continue; /* not a leaf node */
 800504e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	429a      	cmp	r2, r3
 8005054:	dc4f      	bgt.n	80050f6 <gen_bitlen+0x17a>

        s->bl_count[bits]++;
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	889b      	ldrh	r3, [r3, #4]
 8005064:	3301      	adds	r3, #1
 8005066:	b299      	uxth	r1, r3
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800506c:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	460a      	mov	r2, r1
 8005076:	809a      	strh	r2, [r3, #4]
        xbits = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	633b      	str	r3, [r7, #48]	; 0x30
        if (n >= base) xbits = extra[n-base];
 800507c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	db07      	blt.n	8005094 <gen_bitlen+0x118>
 8005084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	633b      	str	r3, [r7, #48]	; 0x30
        f = tree[n].Freq;
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	81fb      	strh	r3, [r7, #14]
        s->opt_len += (ulg)f * (bits + xbits);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a6:	f8d3 26a8 	ldr.w	r2, [r3, #1704]	; 0x6a8
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80050ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b0:	4401      	add	r1, r0
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050be:	f8c2 36a8 	str.w	r3, [r2, #1704]	; 0x6a8
        if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d017      	beq.n	80050f8 <gen_bitlen+0x17c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ce:	f8d3 26ac 	ldr.w	r2, [r3, #1708]	; 0x6ac
 80050d2:	89fb      	ldrh	r3, [r7, #14]
 80050d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050d6:	0089      	lsls	r1, r1, #2
 80050d8:	6a38      	ldr	r0, [r7, #32]
 80050da:	4401      	add	r1, r0
 80050dc:	8849      	ldrh	r1, [r1, #2]
 80050de:	4608      	mov	r0, r1
 80050e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e2:	4401      	add	r1, r0
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	4413      	add	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050f0:	f8c2 36ac 	str.w	r3, [r2, #1708]	; 0x6ac
 80050f4:	e000      	b.n	80050f8 <gen_bitlen+0x17c>
        if (n > max_code) continue; /* not a leaf node */
 80050f6:	bf00      	nop
    for (h = s->heap_max+1; h < HEAP_SIZE; h++) {
 80050f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fa:	3301      	adds	r3, #1
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005100:	f5b3 7f0f 	cmp.w	r3, #572	; 0x23c
 8005104:	dd80      	ble.n	8005008 <gen_bitlen+0x8c>
    }
    if (overflow == 0) return;
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80be 	beq.w	800528a <gen_bitlen+0x30e>

    Trace((stderr,"\nbit length overflow\n"));
 800510e:	4b61      	ldr	r3, [pc, #388]	; (8005294 <gen_bitlen+0x318>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	db07      	blt.n	8005126 <gen_bitlen+0x1aa>
 8005116:	4b60      	ldr	r3, [pc, #384]	; (8005298 <gen_bitlen+0x31c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2215      	movs	r2, #21
 800511e:	2101      	movs	r1, #1
 8005120:	485e      	ldr	r0, [pc, #376]	; (800529c <gen_bitlen+0x320>)
 8005122:	f006 fee5 	bl	800bef0 <fwrite>
    /* This happens for example on obj2 and pic of the Calgary corpus */

    /* Find the first bit length which could increase: */
    do {
        bits = max_length-1;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3b01      	subs	r3, #1
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
        while (s->bl_count[bits] == 0) bits--;
 800512c:	e002      	b.n	8005134 <gen_bitlen+0x1b8>
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	3b01      	subs	r3, #1
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005138:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	4413      	add	r3, r2
 8005140:	889b      	ldrh	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f3      	beq.n	800512e <gen_bitlen+0x1b2>
        s->bl_count[bits]--;      /* move one leaf down the tree */
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800514a:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	889b      	ldrh	r3, [r3, #4]
 8005154:	3b01      	subs	r3, #1
 8005156:	b299      	uxth	r1, r3
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515c:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	460a      	mov	r2, r1
 8005166:	809a      	strh	r2, [r3, #4]
        s->bl_count[bits+1] += 2; /* move one overflow item as its brother */
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	3301      	adds	r3, #1
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	889a      	ldrh	r2, [r3, #4]
 8005178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517a:	3301      	adds	r3, #1
 800517c:	3202      	adds	r2, #2
 800517e:	b291      	uxth	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	460a      	mov	r2, r1
 800518c:	809a      	strh	r2, [r3, #4]
        s->bl_count[max_length]--;
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	889b      	ldrh	r3, [r3, #4]
 800519c:	3b01      	subs	r3, #1
 800519e:	b299      	uxth	r1, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	460a      	mov	r2, r1
 80051ae:	809a      	strh	r2, [r3, #4]
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	3b02      	subs	r3, #2
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    } while (overflow > 0);
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dcb4      	bgt.n	8005126 <gen_bitlen+0x1aa>
    /* Now recompute all bit lengths, scanning in increasing frequency.
     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
     * lengths instead of fixing only the wrong ones. This idea is taken
     * from 'ar' written by Haruhiko Okumura.)
     */
    for (bits = max_length; bits != 0; bits--) {
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
 80051c0:	e05f      	b.n	8005282 <gen_bitlen+0x306>
        n = s->bl_count[bits];
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	f203 539c 	addw	r3, r3, #1436	; 0x59c
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	889b      	ldrh	r3, [r3, #4]
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
        while (n != 0) {
 80051d2:	e050      	b.n	8005276 <gen_bitlen+0x2fa>
            m = s->heap[--h];
 80051d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d6:	3b01      	subs	r3, #1
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051de:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]
            if (m > max_code) continue;
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	429a      	cmp	r2, r3
 80051f0:	dd00      	ble.n	80051f4 <gen_bitlen+0x278>
 80051f2:	e040      	b.n	8005276 <gen_bitlen+0x2fa>
            if ((unsigned) tree[m].Len != (unsigned) bits) {
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fa:	4413      	add	r3, r2
 80051fc:	885b      	ldrh	r3, [r3, #2]
 80051fe:	461a      	mov	r2, r3
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	429a      	cmp	r2, r3
 8005204:	d034      	beq.n	8005270 <gen_bitlen+0x2f4>
                Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <gen_bitlen+0x318>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	db0f      	blt.n	800522e <gen_bitlen+0x2b2>
 800520e:	4b22      	ldr	r3, [pc, #136]	; (8005298 <gen_bitlen+0x31c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68d8      	ldr	r0, [r3, #12]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800521a:	4413      	add	r3, r2
 800521c:	885b      	ldrh	r3, [r3, #2]
 800521e:	461a      	mov	r2, r3
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	491d      	ldr	r1, [pc, #116]	; (80052a0 <gen_bitlen+0x324>)
 800522a:	f006 fdaf 	bl	800bd8c <fiprintf>
                s->opt_len += ((long)bits - (long)tree[m].Len)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005234:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800523e:	440a      	add	r2, r1
 8005240:	8852      	ldrh	r2, [r2, #2]
 8005242:	4611      	mov	r1, r2
 8005244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005246:	1a52      	subs	r2, r2, r1
                              *(long)tree[m].Freq;
 8005248:	6939      	ldr	r1, [r7, #16]
 800524a:	0089      	lsls	r1, r1, #2
 800524c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800524e:	4401      	add	r1, r0
 8005250:	8809      	ldrh	r1, [r1, #0]
 8005252:	fb01 f202 	mul.w	r2, r1, r2
                s->opt_len += ((long)bits - (long)tree[m].Len)
 8005256:	4413      	add	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800525e:	f8c2 36a8 	str.w	r3, [r2, #1704]	; 0x6a8
                tree[m].Len = (ush)bits;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005268:	4413      	add	r3, r2
 800526a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800526c:	b292      	uxth	r2, r2
 800526e:	805a      	strh	r2, [r3, #2]
            }
            n--;
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	3b01      	subs	r3, #1
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
        while (n != 0) {
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ab      	bne.n	80051d4 <gen_bitlen+0x258>
    for (bits = max_length; bits != 0; bits--) {
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	3b01      	subs	r3, #1
 8005280:	637b      	str	r3, [r7, #52]	; 0x34
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	2b00      	cmp	r3, #0
 8005286:	d19c      	bne.n	80051c2 <gen_bitlen+0x246>
 8005288:	e000      	b.n	800528c <gen_bitlen+0x310>
    if (overflow == 0) return;
 800528a:	bf00      	nop
        }
    }
}
 800528c:	3740      	adds	r7, #64	; 0x40
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20003260 	.word	0x20003260
 8005298:	20000060 	.word	0x20000060
 800529c:	0800d55c 	.word	0x0800d55c
 80052a0:	0800d574 	.word	0x0800d574

080052a4 <gen_codes>:
 */
local void gen_codes (tree, max_code, bl_count)
    ct_data *tree;             /* the tree to decorate */
    int max_code;              /* largest code with non zero frequency */
    ushf *bl_count;            /* number of codes at each bit length */
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b094      	sub	sp, #80	; 0x50
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
    ush next_code[MAX_BITS+1]; /* next code value for each bit length */
    ush code = 0;              /* running code value */
 80052b0:	2300      	movs	r3, #0
 80052b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    int n;                     /* code index */

    /* The distribution counts are first used to generate the code values
     * without bit reversal.
     */
    for (bits = 1; bits <= MAX_BITS; bits++) {
 80052b4:	2301      	movs	r3, #1
 80052b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b8:	e016      	b.n	80052e8 <gen_codes+0x44>
        next_code[bits] = code = (code + bl_count[bits-1]) << 1;
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052c0:	3b01      	subs	r3, #1
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4413      	add	r3, r2
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052cc:	4413      	add	r3, r2
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	3340      	adds	r3, #64	; 0x40
 80052da:	443b      	add	r3, r7
 80052dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80052de:	f823 2c30 	strh.w	r2, [r3, #-48]
    for (bits = 1; bits <= MAX_BITS; bits++) {
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	3301      	adds	r3, #1
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	dde5      	ble.n	80052ba <gen_codes+0x16>
    }
    /* Check that the bit counts in bl_count are consistent. The last code
     * must be all ones.
     */
    Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
 80052ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	321e      	adds	r2, #30
 80052f4:	8812      	ldrh	r2, [r2, #0]
 80052f6:	4413      	add	r3, r2
 80052f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fc:	d002      	beq.n	8005304 <gen_codes+0x60>
 80052fe:	4838      	ldr	r0, [pc, #224]	; (80053e0 <gen_codes+0x13c>)
 8005300:	f001 fa64 	bl	80067cc <z_error>
            "inconsistent bit counts");
    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
 8005304:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <gen_codes+0x140>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	dd07      	ble.n	800531c <gen_codes+0x78>
 800530c:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <gen_codes+0x144>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4935      	ldr	r1, [pc, #212]	; (80053ec <gen_codes+0x148>)
 8005316:	4618      	mov	r0, r3
 8005318:	f006 fd38 	bl	800bd8c <fiprintf>

    for (n = 0;  n <= max_code; n++) {
 800531c:	2300      	movs	r3, #0
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
 8005320:	e054      	b.n	80053cc <gen_codes+0x128>
        int len = tree[n].Len;
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	885b      	ldrh	r3, [r3, #2]
 800532c:	633b      	str	r3, [r7, #48]	; 0x30
        if (len == 0) continue;
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	2b00      	cmp	r3, #0
 8005332:	d047      	beq.n	80053c4 <gen_codes+0x120>
        /* Now reverse the bits */
        tree[n].Code = bi_reverse(next_code[len]++, len);
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	3340      	adds	r3, #64	; 0x40
 800533a:	443b      	add	r3, r7
 800533c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005340:	1c53      	adds	r3, r2, #1
 8005342:	b299      	uxth	r1, r3
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	3340      	adds	r3, #64	; 0x40
 800534a:	443b      	add	r3, r7
 800534c:	f823 1c30 	strh.w	r1, [r3, #-48]
 8005350:	4613      	mov	r3, r2
 8005352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005354:	4618      	mov	r0, r3
 8005356:	f001 f8df 	bl	8006518 <bi_reverse>
 800535a:	4601      	mov	r1, r0
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	b28a      	uxth	r2, r1
 8005366:	801a      	strh	r2, [r3, #0]

        Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
 8005368:	4b1e      	ldr	r3, [pc, #120]	; (80053e4 <gen_codes+0x140>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	dd2a      	ble.n	80053c6 <gen_codes+0x122>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4a1f      	ldr	r2, [pc, #124]	; (80053f0 <gen_codes+0x14c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d026      	beq.n	80053c6 <gen_codes+0x122>
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <gen_codes+0x144>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68d8      	ldr	r0, [r3, #12]
 800537e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005380:	3301      	adds	r3, #1
 8005382:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <gen_codes+0x150>)
 8005384:	4413      	add	r3, r2
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	f003 0317 	and.w	r3, r3, #23
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <gen_codes+0xf0>
 8005390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005392:	e000      	b.n	8005396 <gen_codes+0xf2>
 8005394:	2220      	movs	r2, #32
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	440b      	add	r3, r1
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	4619      	mov	r1, r3
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	3340      	adds	r3, #64	; 0x40
 80053a8:	443b      	add	r3, r7
 80053aa:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	9302      	str	r3, [sp, #8]
 80053b2:	9101      	str	r1, [sp, #4]
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053bc:	490e      	ldr	r1, [pc, #56]	; (80053f8 <gen_codes+0x154>)
 80053be:	f006 fce5 	bl	800bd8c <fiprintf>
 80053c2:	e000      	b.n	80053c6 <gen_codes+0x122>
        if (len == 0) continue;
 80053c4:	bf00      	nop
    for (n = 0;  n <= max_code; n++) {
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	3301      	adds	r3, #1
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
 80053cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	dda6      	ble.n	8005322 <gen_codes+0x7e>
             n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3740      	adds	r7, #64	; 0x40
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	0800d58c 	.word	0x0800d58c
 80053e4:	20003260 	.word	0x20003260
 80053e8:	20000060 	.word	0x20000060
 80053ec:	0800d5a4 	.word	0x0800d5a4
 80053f0:	0800fa40 	.word	0x0800fa40
 80053f4:	0801078c 	.word	0x0801078c
 80053f8:	0800d5c0 	.word	0x0800d5c0

080053fc <build_tree>:
 *     also updated if stree is not null. The field max_code is set.
 */
local void build_tree(s, desc)
    deflate_state *s;
    tree_desc *desc; /* the tree descriptor */
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
    ct_data *tree         = desc->dyn_tree;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	61bb      	str	r3, [r7, #24]
    const ct_data *stree  = desc->stat_desc->static_tree;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	617b      	str	r3, [r7, #20]
    int elems             = desc->stat_desc->elems;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	613b      	str	r3, [r7, #16]
    int n, m;          /* iterate over heap elements */
    int max_code = -1; /* largest code with non zero frequency */
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	623b      	str	r3, [r7, #32]

    /* Construct the initial heap, with least frequent element in
     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
     * heap[0] is not used.
     */
    s->heap_len = 0, s->heap_max = HEAP_SIZE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005436:	461a      	mov	r2, r3
 8005438:	f240 233d 	movw	r3, #573	; 0x23d
 800543c:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    for (n = 0; n < elems; n++) {
 8005440:	2300      	movs	r3, #0
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
 8005444:	e031      	b.n	80054aa <build_tree+0xae>
        if (tree[n].Freq != 0) {
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d021      	beq.n	8005498 <build_tree+0x9c>
            s->heap[++(s->heap_len)] = max_code = n;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8005462:	3301      	adds	r3, #1
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800546a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005474:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	605a      	str	r2, [r3, #4]
            s->depth[n] = 0;
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	4413      	add	r3, r2
 800548c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005490:	3318      	adds	r3, #24
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e005      	b.n	80054a4 <build_tree+0xa8>
        } else {
            tree[n].Len = 0;
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4413      	add	r3, r2
 80054a0:	2200      	movs	r2, #0
 80054a2:	805a      	strh	r2, [r3, #2]
    for (n = 0; n < elems; n++) {
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	3301      	adds	r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	dbc9      	blt.n	8005446 <build_tree+0x4a>
    /* The pkzip format requires that at least one distance code exists,
     * and that at least one bit should be sent even if there is only one
     * possible code. So to avoid special checks later on we force at least
     * two codes of non zero frequency.
     */
    while (s->heap_len < 2) {
 80054b2:	e051      	b.n	8005558 <build_tree+0x15c>
        node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	dc04      	bgt.n	80054c4 <build_tree+0xc8>
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	3301      	adds	r3, #1
 80054be:	623b      	str	r3, [r7, #32]
 80054c0:	6a39      	ldr	r1, [r7, #32]
 80054c2:	e000      	b.n	80054c6 <build_tree+0xca>
 80054c4:	2100      	movs	r1, #0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054cc:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80054d0:	3301      	adds	r3, #1
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054d8:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e2:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f202 23d6 	addw	r3, r2, #726	; 0x2d6
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4403      	add	r3, r0
 80054f0:	6059      	str	r1, [r3, #4]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	f202 23d6 	addw	r3, r2, #726	; 0x2d6
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	61fb      	str	r3, [r7, #28]
        tree[node].Freq = 1;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4413      	add	r3, r2
 8005508:	2201      	movs	r2, #1
 800550a:	801a      	strh	r2, [r3, #0]
        s->depth[node] = 0;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005516:	3318      	adds	r3, #24
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
        s->opt_len--; if (stree) s->static_len -= stree[node].Len;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005522:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
 8005526:	3b01      	subs	r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800552e:	f8c2 36a8 	str.w	r3, [r2, #1704]	; 0x6a8
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00f      	beq.n	8005558 <build_tree+0x15c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553e:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	0092      	lsls	r2, r2, #2
 8005546:	6979      	ldr	r1, [r7, #20]
 8005548:	440a      	add	r2, r1
 800554a:	8852      	ldrh	r2, [r2, #2]
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005554:	f8c2 36ac 	str.w	r3, [r2, #1708]	; 0x6ac
    while (s->heap_len < 2) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8005562:	2b01      	cmp	r3, #1
 8005564:	dda6      	ble.n	80054b4 <build_tree+0xb8>
        /* node is 0 or 1 so it does not have extra bits */
    }
    desc->max_code = max_code;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	605a      	str	r2, [r3, #4]

    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
     * establish sub-heaps of increasing lengths:
     */
    for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005572:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8005576:	0fda      	lsrs	r2, r3, #31
 8005578:	4413      	add	r3, r2
 800557a:	105b      	asrs	r3, r3, #1
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
 800557e:	e007      	b.n	8005590 <build_tree+0x194>
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	69b9      	ldr	r1, [r7, #24]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fc2a 	bl	8004dde <pqdownheap>
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	3b01      	subs	r3, #1
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	dcf4      	bgt.n	8005580 <build_tree+0x184>

    /* Construct the Huffman tree by repeatedly combining the least two
     * frequent nodes.
     */
    node = elems;              /* next internal node of the tree */
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	61fb      	str	r3, [r7, #28]
    do {
        pqremove(s, tree, n);  /* n = node of least frequency */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3b60 	ldr.w	r3, [r3, #2912]	; 0xb60
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a8:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80055b4:	f8c1 2450 	str.w	r2, [r1, #1104]	; 0x450
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8c3 2b60 	str.w	r2, [r3, #2912]	; 0xb60
 80055ca:	2201      	movs	r2, #1
 80055cc:	69b9      	ldr	r1, [r7, #24]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff fc05 	bl	8004dde <pqdownheap>
        m = s->heap[SMALLEST]; /* m = node of next least frequency */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 3b60 	ldr.w	r3, [r3, #2912]	; 0xb60
 80055da:	60fb      	str	r3, [r7, #12]

        s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e2:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80055e6:	3b01      	subs	r3, #1
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055ee:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f8:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005608:	605a      	str	r2, [r3, #4]
        s->heap[--(s->heap_max)] = m;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005610:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8005614:	3b01      	subs	r3, #1
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800561c:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005626:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	605a      	str	r2, [r3, #4]

        /* Create a new node father of n and m */
        tree[node].Freq = tree[n].Freq + tree[m].Freq;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4413      	add	r3, r2
 8005640:	8819      	ldrh	r1, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4413      	add	r3, r2
 800564a:	881a      	ldrh	r2, [r3, #0]
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	69b8      	ldr	r0, [r7, #24]
 8005652:	4403      	add	r3, r0
 8005654:	440a      	add	r2, r1
 8005656:	b292      	uxth	r2, r2
 8005658:	801a      	strh	r2, [r3, #0]
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	4413      	add	r3, r2
 8005660:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005664:	3318      	adds	r3, #24
 8005666:	781a      	ldrb	r2, [r3, #0]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	440b      	add	r3, r1
 800566e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005672:	3318      	adds	r3, #24
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d309      	bcc.n	800568e <build_tree+0x292>
                                s->depth[n] : s->depth[m]) + 1);
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	4413      	add	r3, r2
 8005680:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005684:	3318      	adds	r3, #24
 8005686:	781b      	ldrb	r3, [r3, #0]
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
 8005688:	3301      	adds	r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	e008      	b.n	80056a0 <build_tree+0x2a4>
                                s->depth[n] : s->depth[m]) + 1);
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005698:	3318      	adds	r3, #24
 800569a:	781b      	ldrb	r3, [r3, #0]
        s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
 800569c:	3301      	adds	r3, #1
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	440b      	add	r3, r1
 80056a6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80056aa:	3318      	adds	r3, #24
 80056ac:	701a      	strb	r2, [r3, #0]
        tree[n].Dad = tree[m].Dad = (ush)node;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	4413      	add	r3, r2
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	b292      	uxth	r2, r2
 80056ba:	805a      	strh	r2, [r3, #2]
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	0092      	lsls	r2, r2, #2
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	440a      	add	r2, r1
 80056c4:	885b      	ldrh	r3, [r3, #2]
 80056c6:	8053      	strh	r3, [r2, #2]
            fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
                    node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
        }
#endif
        /* and insert the new node in the heap */
        s->heap[SMALLEST] = node++;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	61fa      	str	r2, [r7, #28]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	f8c2 3b60 	str.w	r3, [r2, #2912]	; 0xb60
        pqdownheap(s, tree, SMALLEST);
 80056d4:	2201      	movs	r2, #1
 80056d6:	69b9      	ldr	r1, [r7, #24]
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff fb80 	bl	8004dde <pqdownheap>

    } while (s->heap_len >= 2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e4:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	f73f af56 	bgt.w	800559a <build_tree+0x19e>

    s->heap[--(s->heap_max)] = s->heap[SMALLEST];
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f4:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80056f8:	3b01      	subs	r3, #1
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005700:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800570a:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	f8d2 2b60 	ldr.w	r2, [r2, #2912]	; 0xb60
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	f203 23d6 	addw	r3, r3, #726	; 0x2d6
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	605a      	str	r2, [r3, #4]

    /* At this point, the fields freq and dad are set. We can now
     * generate the bit lengths.
     */
    gen_bitlen(s, (tree_desc *)desc);
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff fc2a 	bl	8004f7c <gen_bitlen>

    /* The field len is now set, we can generate the bit codes */
    gen_codes ((ct_data *)tree, max_code, s->bl_count);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f603 333c 	addw	r3, r3, #2876	; 0xb3c
 800572e:	461a      	mov	r2, r3
 8005730:	6a39      	ldr	r1, [r7, #32]
 8005732:	69b8      	ldr	r0, [r7, #24]
 8005734:	f7ff fdb6 	bl	80052a4 <gen_codes>
}
 8005738:	bf00      	nop
 800573a:	3728      	adds	r7, #40	; 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <scan_tree>:
 */
local void scan_tree (s, tree, max_code)
    deflate_state *s;
    ct_data *tree;   /* the tree to be scanned */
    int max_code;    /* and its largest code of non zero frequency */
{
 8005740:	b480      	push	{r7}
 8005742:	b08d      	sub	sp, #52	; 0x34
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
    int n;                     /* iterates over all tree elements */
    int prevlen = -1;          /* last emitted length */
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	62bb      	str	r3, [r7, #40]	; 0x28
    int curlen;                /* length of current code */
    int nextlen = tree[0].Len; /* length of next code */
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	885b      	ldrh	r3, [r3, #2]
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
    int count = 0;             /* repeat count of the current code */
 8005758:	2300      	movs	r3, #0
 800575a:	623b      	str	r3, [r7, #32]
    int max_count = 7;         /* max repeat count */
 800575c:	2307      	movs	r3, #7
 800575e:	61fb      	str	r3, [r7, #28]
    int min_count = 4;         /* min repeat count */
 8005760:	2304      	movs	r3, #4
 8005762:	61bb      	str	r3, [r7, #24]

    if (nextlen == 0) max_count = 138, min_count = 3;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <scan_tree+0x32>
 800576a:	238a      	movs	r3, #138	; 0x8a
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	2303      	movs	r3, #3
 8005770:	61bb      	str	r3, [r7, #24]
    tree[max_code+1].Len = (ush)0xffff; /* guard */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3301      	adds	r3, #1
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	4413      	add	r3, r2
 800577c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005780:	805a      	strh	r2, [r3, #2]

    for (n = 0; n <= max_code; n++) {
 8005782:	2300      	movs	r3, #0
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005786:	e07e      	b.n	8005886 <scan_tree+0x146>
        curlen = nextlen; nextlen = tree[n+1].Len;
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	3301      	adds	r3, #1
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4413      	add	r3, r2
 8005796:	885b      	ldrh	r3, [r3, #2]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
        if (++count < max_count && curlen == nextlen) {
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	3301      	adds	r3, #1
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	da03      	bge.n	80057b0 <scan_tree+0x70>
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d066      	beq.n	800587e <scan_tree+0x13e>
            continue;
        } else if (count < min_count) {
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	da13      	bge.n	80057e0 <scan_tree+0xa0>
            s->bl_tree[curlen].Freq += count;
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f203 239e 	addw	r3, r3, #670	; 0x29e
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	889a      	ldrh	r2, [r3, #4]
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	b299      	uxth	r1, r3
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f203 239e 	addw	r3, r3, #670	; 0x29e
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	460a      	mov	r2, r1
 80057dc:	809a      	strh	r2, [r3, #4]
 80057de:	e034      	b.n	800584a <scan_tree+0x10a>
        } else if (curlen != 0) {
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01d      	beq.n	8005822 <scan_tree+0xe2>
            if (curlen != prevlen) s->bl_tree[curlen].Freq++;
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d010      	beq.n	8005810 <scan_tree+0xd0>
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f203 239e 	addw	r3, r3, #670	; 0x29e
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	889b      	ldrh	r3, [r3, #4]
 80057fc:	3301      	adds	r3, #1
 80057fe:	b299      	uxth	r1, r3
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	460a      	mov	r2, r1
 800580e:	809a      	strh	r2, [r3, #4]
            s->bl_tree[REP_3_6].Freq++;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8b3 3abc 	ldrh.w	r3, [r3, #2748]	; 0xabc
 8005816:	3301      	adds	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8a3 2abc 	strh.w	r2, [r3, #2748]	; 0xabc
 8005820:	e013      	b.n	800584a <scan_tree+0x10a>
        } else if (count <= 10) {
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b0a      	cmp	r3, #10
 8005826:	dc08      	bgt.n	800583a <scan_tree+0xfa>
            s->bl_tree[REPZ_3_10].Freq++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 3ac0 	ldrh.w	r3, [r3, #2752]	; 0xac0
 800582e:	3301      	adds	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8a3 2ac0 	strh.w	r2, [r3, #2752]	; 0xac0
 8005838:	e007      	b.n	800584a <scan_tree+0x10a>
        } else {
            s->bl_tree[REPZ_11_138].Freq++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8b3 3ac4 	ldrh.w	r3, [r3, #2756]	; 0xac4
 8005840:	3301      	adds	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8a3 2ac4 	strh.w	r2, [r3, #2756]	; 0xac4
        }
        count = 0; prevlen = curlen;
 800584a:	2300      	movs	r3, #0
 800584c:	623b      	str	r3, [r7, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
        if (nextlen == 0) {
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <scan_tree+0x122>
            max_count = 138, min_count = 3;
 8005858:	238a      	movs	r3, #138	; 0x8a
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	2303      	movs	r3, #3
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e00e      	b.n	8005880 <scan_tree+0x140>
        } else if (curlen == nextlen) {
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	429a      	cmp	r2, r3
 8005868:	d104      	bne.n	8005874 <scan_tree+0x134>
            max_count = 6, min_count = 3;
 800586a:	2306      	movs	r3, #6
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	2303      	movs	r3, #3
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e005      	b.n	8005880 <scan_tree+0x140>
        } else {
            max_count = 7, min_count = 4;
 8005874:	2307      	movs	r3, #7
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	2304      	movs	r3, #4
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e000      	b.n	8005880 <scan_tree+0x140>
            continue;
 800587e:	bf00      	nop
    for (n = 0; n <= max_code; n++) {
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	3301      	adds	r3, #1
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	f77f af7c 	ble.w	8005788 <scan_tree+0x48>
        }
    }
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	3734      	adds	r7, #52	; 0x34
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <send_tree>:
 */
local void send_tree (s, tree, max_code)
    deflate_state *s;
    ct_data *tree; /* the tree to be scanned */
    int max_code;       /* and its largest code of non zero frequency */
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
    int n;                     /* iterates over all tree elements */
    int prevlen = -1;          /* last emitted length */
 80058a8:	f04f 33ff 	mov.w	r3, #4294967295
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
    int curlen;                /* length of current code */
    int nextlen = tree[0].Len; /* length of next code */
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	885b      	ldrh	r3, [r3, #2]
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
    int count = 0;             /* repeat count of the current code */
 80058b4:	2300      	movs	r3, #0
 80058b6:	623b      	str	r3, [r7, #32]
    int max_count = 7;         /* max repeat count */
 80058b8:	2307      	movs	r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
    int min_count = 4;         /* min repeat count */
 80058bc:	2304      	movs	r3, #4
 80058be:	61bb      	str	r3, [r7, #24]

    /* tree[max_code+1].Len = -1; */  /* guard already set */
    if (nextlen == 0) max_count = 138, min_count = 3;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <send_tree+0x32>
 80058c6:	238a      	movs	r3, #138	; 0x8a
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	2303      	movs	r3, #3
 80058cc:	61bb      	str	r3, [r7, #24]

    for (n = 0; n <= max_code; n++) {
 80058ce:	2300      	movs	r3, #0
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d2:	e0ed      	b.n	8005ab0 <send_tree+0x214>
        curlen = nextlen; nextlen = tree[n+1].Len;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	3301      	adds	r3, #1
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4413      	add	r3, r2
 80058e2:	885b      	ldrh	r3, [r3, #2]
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
        if (++count < max_count && curlen == nextlen) {
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	3301      	adds	r3, #1
 80058ea:	623b      	str	r3, [r7, #32]
 80058ec:	6a3a      	ldr	r2, [r7, #32]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	da04      	bge.n	80058fe <send_tree+0x62>
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	429a      	cmp	r2, r3
 80058fa:	f000 80d5 	beq.w	8005aa8 <send_tree+0x20c>
            continue;
        } else if (count < min_count) {
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	429a      	cmp	r2, r3
 8005904:	da25      	bge.n	8005952 <send_tree+0xb6>
            do { send_code(s, curlen, s->bl_tree); } while (--count != 0);
 8005906:	4b6f      	ldr	r3, [pc, #444]	; (8005ac4 <send_tree+0x228>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b02      	cmp	r3, #2
 800590c:	dd07      	ble.n	800591e <send_tree+0x82>
 800590e:	4b6e      	ldr	r3, [pc, #440]	; (8005ac8 <send_tree+0x22c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	496d      	ldr	r1, [pc, #436]	; (8005acc <send_tree+0x230>)
 8005918:	4618      	mov	r0, r3
 800591a:	f006 fa37 	bl	800bd8c <fiprintf>
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	889b      	ldrh	r3, [r3, #4]
 800592c:	4619      	mov	r1, r3
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	88db      	ldrh	r3, [r3, #6]
 800593c:	461a      	mov	r2, r3
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff f8de 	bl	8004b00 <send_bits>
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	3b01      	subs	r3, #1
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1da      	bne.n	8005906 <send_tree+0x6a>
 8005950:	e090      	b.n	8005a74 <send_tree+0x1d8>

        } else if (curlen != 0) {
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d04d      	beq.n	80059f4 <send_tree+0x158>
            if (curlen != prevlen) {
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	429a      	cmp	r2, r3
 800595e:	d021      	beq.n	80059a4 <send_tree+0x108>
                send_code(s, curlen, s->bl_tree); count--;
 8005960:	4b58      	ldr	r3, [pc, #352]	; (8005ac4 <send_tree+0x228>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b02      	cmp	r3, #2
 8005966:	dd07      	ble.n	8005978 <send_tree+0xdc>
 8005968:	4b57      	ldr	r3, [pc, #348]	; (8005ac8 <send_tree+0x22c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	4956      	ldr	r1, [pc, #344]	; (8005acc <send_tree+0x230>)
 8005972:	4618      	mov	r0, r3
 8005974:	f006 fa0a 	bl	800bd8c <fiprintf>
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	889b      	ldrh	r3, [r3, #4]
 8005986:	4619      	mov	r1, r3
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	88db      	ldrh	r3, [r3, #6]
 8005996:	461a      	mov	r2, r3
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff f8b1 	bl	8004b00 <send_bits>
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	623b      	str	r3, [r7, #32]
            }
            Assert(count >= 3 && count <= 6, " 3_6?");
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	dd02      	ble.n	80059b0 <send_tree+0x114>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	dd02      	ble.n	80059b6 <send_tree+0x11a>
 80059b0:	4847      	ldr	r0, [pc, #284]	; (8005ad0 <send_tree+0x234>)
 80059b2:	f000 ff0b 	bl	80067cc <z_error>
            send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);
 80059b6:	4b43      	ldr	r3, [pc, #268]	; (8005ac4 <send_tree+0x228>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	dd07      	ble.n	80059ce <send_tree+0x132>
 80059be:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <send_tree+0x22c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	2210      	movs	r2, #16
 80059c6:	4941      	ldr	r1, [pc, #260]	; (8005acc <send_tree+0x230>)
 80059c8:	4618      	mov	r0, r3
 80059ca:	f006 f9df 	bl	800bd8c <fiprintf>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8b3 3abc 	ldrh.w	r3, [r3, #2748]	; 0xabc
 80059d4:	4619      	mov	r1, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8b3 3abe 	ldrh.w	r3, [r3, #2750]	; 0xabe
 80059dc:	461a      	mov	r2, r3
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff f88e 	bl	8004b00 <send_bits>
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	3b03      	subs	r3, #3
 80059e8:	2202      	movs	r2, #2
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff f887 	bl	8004b00 <send_bits>
 80059f2:	e03f      	b.n	8005a74 <send_tree+0x1d8>

        } else if (count <= 10) {
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	2b0a      	cmp	r3, #10
 80059f8:	dc1e      	bgt.n	8005a38 <send_tree+0x19c>
            send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);
 80059fa:	4b32      	ldr	r3, [pc, #200]	; (8005ac4 <send_tree+0x228>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	dd07      	ble.n	8005a12 <send_tree+0x176>
 8005a02:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <send_tree+0x22c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2211      	movs	r2, #17
 8005a0a:	4930      	ldr	r1, [pc, #192]	; (8005acc <send_tree+0x230>)
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f006 f9bd 	bl	800bd8c <fiprintf>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 3ac0 	ldrh.w	r3, [r3, #2752]	; 0xac0
 8005a18:	4619      	mov	r1, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8b3 3ac2 	ldrh.w	r3, [r3, #2754]	; 0xac2
 8005a20:	461a      	mov	r2, r3
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff f86c 	bl	8004b00 <send_bits>
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	3b03      	subs	r3, #3
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	4619      	mov	r1, r3
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff f865 	bl	8004b00 <send_bits>
 8005a36:	e01d      	b.n	8005a74 <send_tree+0x1d8>

        } else {
            send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);
 8005a38:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <send_tree+0x228>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	dd07      	ble.n	8005a50 <send_tree+0x1b4>
 8005a40:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <send_tree+0x22c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	2212      	movs	r2, #18
 8005a48:	4920      	ldr	r1, [pc, #128]	; (8005acc <send_tree+0x230>)
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f006 f99e 	bl	800bd8c <fiprintf>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3ac4 	ldrh.w	r3, [r3, #2756]	; 0xac4
 8005a56:	4619      	mov	r1, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8b3 3ac6 	ldrh.w	r3, [r3, #2758]	; 0xac6
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff f84d 	bl	8004b00 <send_bits>
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	3b0b      	subs	r3, #11
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff f846 	bl	8004b00 <send_bits>
        }
        count = 0; prevlen = curlen;
 8005a74:	2300      	movs	r3, #0
 8005a76:	623b      	str	r3, [r7, #32]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (nextlen == 0) {
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <send_tree+0x1f0>
            max_count = 138, min_count = 3;
 8005a82:	238a      	movs	r3, #138	; 0x8a
 8005a84:	61fb      	str	r3, [r7, #28]
 8005a86:	2303      	movs	r3, #3
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e00e      	b.n	8005aaa <send_tree+0x20e>
        } else if (curlen == nextlen) {
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d104      	bne.n	8005a9e <send_tree+0x202>
            max_count = 6, min_count = 3;
 8005a94:	2306      	movs	r3, #6
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	2303      	movs	r3, #3
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e005      	b.n	8005aaa <send_tree+0x20e>
        } else {
            max_count = 7, min_count = 4;
 8005a9e:	2307      	movs	r3, #7
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e000      	b.n	8005aaa <send_tree+0x20e>
            continue;
 8005aa8:	bf00      	nop
    for (n = 0; n <= max_code; n++) {
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	3301      	adds	r3, #1
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	f77f af0d 	ble.w	80058d4 <send_tree+0x38>
        }
    }
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	3730      	adds	r7, #48	; 0x30
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20003260 	.word	0x20003260
 8005ac8:	20000060 	.word	0x20000060
 8005acc:	0800d5dc 	.word	0x0800d5dc
 8005ad0:	0800d5e8 	.word	0x0800d5e8

08005ad4 <build_bl_tree>:
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
local int build_bl_tree(s)
    deflate_state *s;
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
    int max_blindex;  /* index of last bit length code of non zero freq */

    /* Determine the bit length frequencies for literal and distance trees */
    scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f103 0194 	add.w	r1, r3, #148	; 0x94
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	; 0xb1c
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff fe28 	bl	8005740 <scan_tree>
    scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f603 1188 	addw	r1, r3, #2440	; 0x988
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3b28 	ldr.w	r3, [r3, #2856]	; 0xb28
 8005afc:	461a      	mov	r2, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7ff fe1e 	bl	8005740 <scan_tree>

    /* Build the bit length tree: */
    build_tree(s, (tree_desc *)(&(s->bl_desc)));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f503 6333 	add.w	r3, r3, #2864	; 0xb30
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fc75 	bl	80053fc <build_tree>

    /* Determine the number of bit length codes to send. The pkzip format
     * requires that at least 4 bit length codes be sent. (appnote.txt says
     * 3 but the actual value used is 4.)
     */
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
 8005b12:	2312      	movs	r3, #18
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e00e      	b.n	8005b36 <build_bl_tree+0x62>
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
 8005b18:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <build_bl_tree+0xc0>)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	88db      	ldrh	r3, [r3, #6]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <build_bl_tree+0x6a>
    for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	dced      	bgt.n	8005b18 <build_bl_tree+0x44>
 8005b3c:	e000      	b.n	8005b40 <build_bl_tree+0x6c>
        if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;
 8005b3e:	bf00      	nop
    }
    /* Update opt_len to include the bit length tree and counts */
    s->opt_len += 3*(max_blindex+1) + 5+5+4;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b46:	f8d3 16a8 	ldr.w	r1, [r3, #1704]	; 0x6a8
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	4613      	mov	r3, r2
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	440b      	add	r3, r1
 8005b56:	330e      	adds	r3, #14
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b5e:	f8c2 36a8 	str.w	r3, [r2, #1704]	; 0x6a8
    Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
 8005b62:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <build_bl_tree+0xc4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	dd0f      	ble.n	8005b8a <build_bl_tree+0xb6>
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <build_bl_tree+0xc8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68d8      	ldr	r0, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b76:	f8d3 26a8 	ldr.w	r2, [r3, #1704]	; 0x6a8
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b80:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8005b84:	4906      	ldr	r1, [pc, #24]	; (8005ba0 <build_bl_tree+0xcc>)
 8005b86:	f006 f901 	bl	800bd8c <fiprintf>
            s->opt_len, s->static_len));

    return max_blindex;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	0800fa2c 	.word	0x0800fa2c
 8005b98:	20003260 	.word	0x20003260
 8005b9c:	20000060 	.word	0x20000060
 8005ba0:	0800d5f0 	.word	0x0800d5f0

08005ba4 <send_all_trees>:
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
local void send_all_trees(s, lcodes, dcodes, blcodes)
    deflate_state *s;
    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	603b      	str	r3, [r7, #0]
    int rank;                    /* index in bl_order */

    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb8:	dd05      	ble.n	8005bc6 <send_all_trees+0x22>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dd02      	ble.n	8005bc6 <send_all_trees+0x22>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	dc02      	bgt.n	8005bcc <send_all_trees+0x28>
 8005bc6:	4850      	ldr	r0, [pc, #320]	; (8005d08 <send_all_trees+0x164>)
 8005bc8:	f000 fe00 	bl	80067cc <z_error>
    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8005bd2:	dc05      	bgt.n	8005be0 <send_all_trees+0x3c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b1e      	cmp	r3, #30
 8005bd8:	dc02      	bgt.n	8005be0 <send_all_trees+0x3c>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b13      	cmp	r3, #19
 8005bde:	dd02      	ble.n	8005be6 <send_all_trees+0x42>
 8005be0:	484a      	ldr	r0, [pc, #296]	; (8005d0c <send_all_trees+0x168>)
 8005be2:	f000 fdf3 	bl	80067cc <z_error>
            "too many codes");
    Tracev((stderr, "\nbl counts: "));
 8005be6:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <send_all_trees+0x16c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dd07      	ble.n	8005bfe <send_all_trees+0x5a>
 8005bee:	4b49      	ldr	r3, [pc, #292]	; (8005d14 <send_all_trees+0x170>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	220c      	movs	r2, #12
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4847      	ldr	r0, [pc, #284]	; (8005d18 <send_all_trees+0x174>)
 8005bfa:	f006 f979 	bl	800bef0 <fwrite>
    send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8005c04:	2205      	movs	r2, #5
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7fe ff79 	bl	8004b00 <send_bits>
    send_bits(s, dcodes-1,   5);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	2205      	movs	r2, #5
 8005c14:	4619      	mov	r1, r3
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7fe ff72 	bl	8004b00 <send_bits>
    send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	2204      	movs	r2, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7fe ff6b 	bl	8004b00 <send_bits>
    for (rank = 0; rank < blcodes; rank++) {
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e020      	b.n	8005c72 <send_all_trees+0xce>
        Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
 8005c30:	4b37      	ldr	r3, [pc, #220]	; (8005d10 <send_all_trees+0x16c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	dd0a      	ble.n	8005c4e <send_all_trees+0xaa>
 8005c38:	4b36      	ldr	r3, [pc, #216]	; (8005d14 <send_all_trees+0x170>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68d8      	ldr	r0, [r3, #12]
 8005c3e:	4a37      	ldr	r2, [pc, #220]	; (8005d1c <send_all_trees+0x178>)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	4413      	add	r3, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	4935      	ldr	r1, [pc, #212]	; (8005d20 <send_all_trees+0x17c>)
 8005c4a:	f006 f89f 	bl	800bd8c <fiprintf>
        send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);
 8005c4e:	4a33      	ldr	r2, [pc, #204]	; (8005d1c <send_all_trees+0x178>)
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	f203 239e 	addw	r3, r3, #670	; 0x29e
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	88db      	ldrh	r3, [r3, #6]
 8005c62:	2203      	movs	r2, #3
 8005c64:	4619      	mov	r1, r3
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7fe ff4a 	bl	8004b00 <send_bits>
    for (rank = 0; rank < blcodes; rank++) {
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	dbda      	blt.n	8005c30 <send_all_trees+0x8c>
    }
    Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
 8005c7a:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <send_all_trees+0x16c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	dd0b      	ble.n	8005c9a <send_all_trees+0xf6>
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <send_all_trees+0x170>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68d8      	ldr	r0, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	; 0x6bc
 8005c92:	461a      	mov	r2, r3
 8005c94:	4923      	ldr	r1, [pc, #140]	; (8005d24 <send_all_trees+0x180>)
 8005c96:	f006 f879 	bl	800bd8c <fiprintf>

    send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f103 0194 	add.w	r1, r3, #148	; 0x94
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff fdf8 	bl	800589c <send_tree>
    Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
 8005cac:	4b18      	ldr	r3, [pc, #96]	; (8005d10 <send_all_trees+0x16c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	dd0b      	ble.n	8005ccc <send_all_trees+0x128>
 8005cb4:	4b17      	ldr	r3, [pc, #92]	; (8005d14 <send_all_trees+0x170>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68d8      	ldr	r0, [r3, #12]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc0:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	; 0x6bc
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4918      	ldr	r1, [pc, #96]	; (8005d28 <send_all_trees+0x184>)
 8005cc8:	f006 f860 	bl	800bd8c <fiprintf>

    send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f603 1188 	addw	r1, r3, #2440	; 0x988
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff fddf 	bl	800589c <send_tree>
    Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
 8005cde:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <send_all_trees+0x16c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dd0b      	ble.n	8005cfe <send_all_trees+0x15a>
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <send_all_trees+0x170>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68d8      	ldr	r0, [r3, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf2:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	; 0x6bc
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	490c      	ldr	r1, [pc, #48]	; (8005d2c <send_all_trees+0x188>)
 8005cfa:	f006 f847 	bl	800bd8c <fiprintf>
}
 8005cfe:	bf00      	nop
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	0800d610 	.word	0x0800d610
 8005d0c:	0800d624 	.word	0x0800d624
 8005d10:	20003260 	.word	0x20003260
 8005d14:	20000060 	.word	0x20000060
 8005d18:	0800d634 	.word	0x0800d634
 8005d1c:	0800fa2c 	.word	0x0800fa2c
 8005d20:	0800d644 	.word	0x0800d644
 8005d24:	0800d654 	.word	0x0800d654
 8005d28:	0800d668 	.word	0x0800d668
 8005d2c:	0800d67c 	.word	0x0800d67c

08005d30 <_tr_stored_block>:
void ZLIB_INTERNAL _tr_stored_block(s, buf, stored_len, last)
    deflate_state *s;
    charf *buf;       /* input block */
    ulg stored_len;   /* length of input block */
    int last;         /* one if this is the last block for a file */
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
    send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */
 8005d3e:	2203      	movs	r2, #3
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7fe fedc 	bl	8004b00 <send_bits>
#ifdef DEBUG
    s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4e:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	; 0x6b8
 8005d52:	330a      	adds	r3, #10
 8005d54:	f023 0307 	bic.w	r3, r3, #7
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d5e:	f8c2 36b8 	str.w	r3, [r2, #1720]	; 0x6b8
    s->compressed_len += (stored_len + 4) << 3;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	f8d3 26b8 	ldr.w	r2, [r3, #1720]	; 0x6b8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d7a:	f8c2 36b8 	str.w	r3, [r2, #1720]	; 0x6b8
#endif
    copy_block(s, buf, (unsigned)stored_len, 1); /* with header */
 8005d7e:	2301      	movs	r3, #1
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fcad 	bl	80066e4 <copy_block>
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <_tr_flush_bits>:
/* ===========================================================================
 * Flush the bits in the bit buffer to pending output (leaves at most 7 bits)
 */
void ZLIB_INTERNAL _tr_flush_bits(s)
    deflate_state *s;
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
    bi_flush(s);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fbd6 	bl	800654c <bi_flush>
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <_tr_align>:
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
void ZLIB_INTERNAL _tr_align(s)
    deflate_state *s;
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
    send_bits(s, STATIC_TREES<<1, 3);
 8005db0:	2203      	movs	r2, #3
 8005db2:	2102      	movs	r1, #2
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fe fea3 	bl	8004b00 <send_bits>
    send_code(s, END_BLOCK, static_ltree);
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <_tr_align+0x5c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	dd08      	ble.n	8005dd4 <_tr_align+0x2c>
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <_tr_align+0x60>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dcc:	490f      	ldr	r1, [pc, #60]	; (8005e0c <_tr_align+0x64>)
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f005 ffdc 	bl	800bd8c <fiprintf>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2207      	movs	r2, #7
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fe fe90 	bl	8004b00 <send_bits>
#ifdef DEBUG
    s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de6:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	; 0x6b8
 8005dea:	330a      	adds	r3, #10
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005df2:	f8c2 36b8 	str.w	r3, [r2, #1720]	; 0x6b8
#endif
    bi_flush(s);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fba8 	bl	800654c <bi_flush>
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20003260 	.word	0x20003260
 8005e08:	20000060 	.word	0x20000060
 8005e0c:	0800d5dc 	.word	0x0800d5dc

08005e10 <_tr_flush_block>:
void ZLIB_INTERNAL _tr_flush_block(s, buf, stored_len, last)
    deflate_state *s;
    charf *buf;       /* input block, or NULL if too old */
    ulg stored_len;   /* length of input block */
    int last;         /* one if this is the last block for a file */
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b08d      	sub	sp, #52	; 0x34
 8005e14:	af04      	add	r7, sp, #16
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
    ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
    int max_blindex = 0;  /* index of last bit length code of non zero freq */
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]

    /* Build the Huffman trees unless a stored block is forced */
    if (s->level > 0) {
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	dd7d      	ble.n	8005f28 <_tr_flush_block+0x118>

        /* Check if the file is binary or text */
        if (s->strm->data_type == Z_UNKNOWN)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d106      	bne.n	8005e44 <_tr_flush_block+0x34>
            s->strm->data_type = detect_data_type(s);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681c      	ldr	r4, [r3, #0]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 fb1e 	bl	800647c <detect_data_type>
 8005e40:	4603      	mov	r3, r0
 8005e42:	62e3      	str	r3, [r4, #44]	; 0x2c

        /* Construct the literal and distance trees */
        build_tree(s, (tree_desc *)(&(s->l_desc)));
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f603 3318 	addw	r3, r3, #2840	; 0xb18
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff fad5 	bl	80053fc <build_tree>
        Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
 8005e52:	4b8e      	ldr	r3, [pc, #568]	; (800608c <_tr_flush_block+0x27c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dd0f      	ble.n	8005e7a <_tr_flush_block+0x6a>
 8005e5a:	4b8d      	ldr	r3, [pc, #564]	; (8006090 <_tr_flush_block+0x280>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68d8      	ldr	r0, [r3, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	f8d3 26a8 	ldr.w	r2, [r3, #1704]	; 0x6a8
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e70:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8005e74:	4987      	ldr	r1, [pc, #540]	; (8006094 <_tr_flush_block+0x284>)
 8005e76:	f005 ff89 	bl	800bd8c <fiprintf>
                s->static_len));

        build_tree(s, (tree_desc *)(&(s->d_desc)));
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f603 3324 	addw	r3, r3, #2852	; 0xb24
 8005e80:	4619      	mov	r1, r3
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f7ff faba 	bl	80053fc <build_tree>
        Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
 8005e88:	4b80      	ldr	r3, [pc, #512]	; (800608c <_tr_flush_block+0x27c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dd0f      	ble.n	8005eb0 <_tr_flush_block+0xa0>
 8005e90:	4b7f      	ldr	r3, [pc, #508]	; (8006090 <_tr_flush_block+0x280>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68d8      	ldr	r0, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9c:	f8d3 26a8 	ldr.w	r2, [r3, #1704]	; 0x6a8
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea6:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8005eaa:	497b      	ldr	r1, [pc, #492]	; (8006098 <_tr_flush_block+0x288>)
 8005eac:	f005 ff6e 	bl	800bd8c <fiprintf>
         */

        /* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff fe0f 	bl	8005ad4 <build_bl_tree>
 8005eb6:	6178      	str	r0, [r7, #20]

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s->opt_len+3+7)>>3;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebe:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
 8005ec2:	330a      	adds	r3, #10
 8005ec4:	08db      	lsrs	r3, r3, #3
 8005ec6:	61fb      	str	r3, [r7, #28]
        static_lenb = (s->static_len+3+7)>>3;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ece:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8005ed2:	330a      	adds	r3, #10
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	61bb      	str	r3, [r7, #24]

        Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
 8005ed8:	4b6c      	ldr	r3, [pc, #432]	; (800608c <_tr_flush_block+0x27c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	dd1c      	ble.n	8005f1a <_tr_flush_block+0x10a>
 8005ee0:	4b6b      	ldr	r3, [pc, #428]	; (8006090 <_tr_flush_block+0x280>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68d8      	ldr	r0, [r3, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eec:	f8d3 16a8 	ldr.w	r1, [r3, #1704]	; 0x6a8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef6:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f00:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 8005f04:	9203      	str	r2, [sp, #12]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	9202      	str	r2, [sp, #8]
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	460b      	mov	r3, r1
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	4961      	ldr	r1, [pc, #388]	; (800609c <_tr_flush_block+0x28c>)
 8005f16:	f005 ff39 	bl	800bd8c <fiprintf>
                opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
                s->last_lit));

        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d80d      	bhi.n	8005f3e <_tr_flush_block+0x12e>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	61fb      	str	r3, [r7, #28]
 8005f26:	e00a      	b.n	8005f3e <_tr_flush_block+0x12e>

    } else {
        Assert(buf != (char*)0, "lost buf");
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <_tr_flush_block+0x124>
 8005f2e:	485c      	ldr	r0, [pc, #368]	; (80060a0 <_tr_flush_block+0x290>)
 8005f30:	f000 fc4c 	bl	80067cc <z_error>
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3305      	adds	r3, #5
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	61fb      	str	r3, [r7, #28]
    }

#ifdef FORCE_STORED
    if (buf != (char*)0) { /* force stored block */
#else
    if (stored_len+4 <= opt_lenb && buf != (char*)0) {
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3304      	adds	r3, #4
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d309      	bcc.n	8005f5c <_tr_flush_block+0x14c>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <_tr_flush_block+0x14c>
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7ff feeb 	bl	8005d30 <_tr_stored_block>
 8005f5a:	e055      	b.n	8006008 <_tr_flush_block+0x1f8>

#ifdef FORCE_STATIC
    } else if (static_lenb >= 0) { /* force static trees */
#else
    } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d003      	beq.n	8005f6e <_tr_flush_block+0x15e>
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d11d      	bne.n	8005faa <_tr_flush_block+0x19a>
#endif
        send_bits(s, (STATIC_TREES<<1)+last, 3);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	3302      	adds	r3, #2
 8005f72:	2203      	movs	r2, #3
 8005f74:	4619      	mov	r1, r3
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7fe fdc2 	bl	8004b00 <send_bits>
        compress_block(s, (const ct_data *)static_ltree,
 8005f7c:	4a49      	ldr	r2, [pc, #292]	; (80060a4 <_tr_flush_block+0x294>)
 8005f7e:	494a      	ldr	r1, [pc, #296]	; (80060a8 <_tr_flush_block+0x298>)
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f94d 	bl	8006220 <compress_block>
                       (const ct_data *)static_dtree);
#ifdef DEBUG
        s->compressed_len += 3 + s->static_len;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8c:	f8d3 26b8 	ldr.w	r2, [r3, #1720]	; 0x6b8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f96:	f8d3 36ac 	ldr.w	r3, [r3, #1708]	; 0x6ac
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005fa4:	f8c2 36b8 	str.w	r3, [r2, #1720]	; 0x6b8
 8005fa8:	e02e      	b.n	8006008 <_tr_flush_block+0x1f8>
#endif
    } else {
        send_bits(s, (DYN_TREES<<1)+last, 3);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2203      	movs	r2, #3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7fe fda4 	bl	8004b00 <send_bits>
        send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	; 0xb1c
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 3b28 	ldr.w	r3, [r3, #2856]	; 0xb28
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fde9 	bl	8005ba4 <send_all_trees>
                       max_blindex+1);
        compress_block(s, (const ct_data *)s->dyn_ltree,
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f103 0194 	add.w	r1, r3, #148	; 0x94
                       (const ct_data *)s->dyn_dtree);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f603 1388 	addw	r3, r3, #2440	; 0x988
        compress_block(s, (const ct_data *)s->dyn_ltree,
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f91d 	bl	8006220 <compress_block>
#ifdef DEBUG
        s->compressed_len += 3 + s->opt_len;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fec:	f8d3 26b8 	ldr.w	r2, [r3, #1720]	; 0x6b8
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3303      	adds	r3, #3
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006004:	f8c2 36b8 	str.w	r3, [r2, #1720]	; 0x6b8
#endif
    }
    Assert (s->compressed_len == s->bits_sent, "bad compressed size");
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600e:	f8d3 26b8 	ldr.w	r2, [r3, #1720]	; 0x6b8
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006018:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	; 0x6bc
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <_tr_flush_block+0x216>
 8006020:	4822      	ldr	r0, [pc, #136]	; (80060ac <_tr_flush_block+0x29c>)
 8006022:	f000 fbd3 	bl	80067cc <z_error>
    /* The above check is made mod 2^32, for files larger than 512 MB
     * and uLong implemented on 32 bits.
     */
    init_block(s);
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7fe fe78 	bl	8004d1c <init_block>

    if (last) {
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <_tr_flush_block+0x23e>
        bi_windup(s);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 faf5 	bl	8006622 <bi_windup>
#ifdef DEBUG
        s->compressed_len += 7;  /* align on byte boundary */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800603e:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	; 0x6b8
 8006042:	3307      	adds	r3, #7
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800604a:	f8c2 36b8 	str.w	r3, [r2, #1720]	; 0x6b8
#endif
    }
    Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <_tr_flush_block+0x27c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	dd16      	ble.n	8006084 <_tr_flush_block+0x274>
 8006056:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <_tr_flush_block+0x280>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68d8      	ldr	r0, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006062:	f8d3 36b8 	ldr.w	r3, [r3, #1720]	; 0x6b8
 8006066:	08dc      	lsrs	r4, r3, #3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606e:	f8d3 16b8 	ldr.w	r1, [r3, #1720]	; 0x6b8
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	1acb      	subs	r3, r1, r3
 800607c:	4622      	mov	r2, r4
 800607e:	490c      	ldr	r1, [pc, #48]	; (80060b0 <_tr_flush_block+0x2a0>)
 8006080:	f005 fe84 	bl	800bd8c <fiprintf>
           s->compressed_len-7*last));
}
 8006084:	bf00      	nop
 8006086:	3724      	adds	r7, #36	; 0x24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd90      	pop	{r4, r7, pc}
 800608c:	20003260 	.word	0x20003260
 8006090:	20000060 	.word	0x20000060
 8006094:	0800d694 	.word	0x0800d694
 8006098:	0800d6b4 	.word	0x0800d6b4
 800609c:	0800d6d4 	.word	0x0800d6d4
 80060a0:	0800d704 	.word	0x0800d704
 80060a4:	0800fec0 	.word	0x0800fec0
 80060a8:	0800fa40 	.word	0x0800fa40
 80060ac:	0800d710 	.word	0x0800d710
 80060b0:	0800d724 	.word	0x0800d724

080060b4 <_tr_tally>:
 */
int ZLIB_INTERNAL _tr_tally (s, dist, lc)
    deflate_state *s;
    unsigned dist;  /* distance of matched string */
    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
    s->d_buf[s->last_lit] = (ush)dist;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c6:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d0:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	4413      	add	r3, r2
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	b292      	uxth	r2, r2
 80060dc:	801a      	strh	r2, [r3, #0]
    s->l_buf[s->last_lit++] = (uch)lc;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e4:	f8d3 2698 	ldr.w	r2, [r3, #1688]	; 0x698
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ee:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80060fa:	f8c0 16a0 	str.w	r1, [r0, #1696]	; 0x6a0
 80060fe:	4413      	add	r3, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
    if (dist == 0) {
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10f      	bne.n	800612c <_tr_tally+0x78>
        /* lc is the unmatched char */
        s->dyn_ltree[lc].Freq++;
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3324      	adds	r3, #36	; 0x24
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	889b      	ldrh	r3, [r3, #4]
 8006118:	3301      	adds	r3, #1
 800611a:	b299      	uxth	r1, r3
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3324      	adds	r3, #36	; 0x24
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	460a      	mov	r2, r1
 8006128:	809a      	strh	r2, [r3, #4]
 800612a:	e05f      	b.n	80061ec <_tr_tally+0x138>
    } else {
        s->matches++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006132:	f8d3 36b0 	ldr.w	r3, [r3, #1712]	; 0x6b0
 8006136:	3301      	adds	r3, #1
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800613e:	f8c2 36b0 	str.w	r3, [r2, #1712]	; 0x6b0
        /* Here, lc is the match length - MIN_MATCH */
        dist--;             /* dist = match distance - 1 */
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	3b01      	subs	r3, #1
 8006146:	60bb      	str	r3, [r7, #8]
        Assert((ush)dist < (ush)MAX_DIST(s) &&
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	b29b      	uxth	r3, r3
 8006152:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8006156:	b29b      	uxth	r3, r3
 8006158:	429a      	cmp	r2, r3
 800615a:	d215      	bcs.n	8006188 <_tr_tally+0xd4>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	b29b      	uxth	r3, r3
 8006160:	2bff      	cmp	r3, #255	; 0xff
 8006162:	d811      	bhi.n	8006188 <_tr_tally+0xd4>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2bff      	cmp	r3, #255	; 0xff
 8006168:	d806      	bhi.n	8006178 <_tr_tally+0xc4>
 800616a:	4a2a      	ldr	r2, [pc, #168]	; (8006214 <_tr_tally+0x160>)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4413      	add	r3, r2
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b1d      	cmp	r3, #29
 8006174:	d808      	bhi.n	8006188 <_tr_tally+0xd4>
 8006176:	e00a      	b.n	800618e <_tr_tally+0xda>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006180:	4a24      	ldr	r2, [pc, #144]	; (8006214 <_tr_tally+0x160>)
 8006182:	5cd3      	ldrb	r3, [r2, r3]
 8006184:	2b1d      	cmp	r3, #29
 8006186:	d902      	bls.n	800618e <_tr_tally+0xda>
 8006188:	4823      	ldr	r0, [pc, #140]	; (8006218 <_tr_tally+0x164>)
 800618a:	f000 fb1f 	bl	80067cc <z_error>
               (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
               (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;
 800618e:	4a23      	ldr	r2, [pc, #140]	; (800621c <_tr_tally+0x168>)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f203 1201 	addw	r2, r3, #257	; 0x101
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	f102 0324 	add.w	r3, r2, #36	; 0x24
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	889b      	ldrh	r3, [r3, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	b298      	uxth	r0, r3
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	f102 0324 	add.w	r3, r2, #36	; 0x24
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	4602      	mov	r2, r0
 80061b6:	809a      	strh	r2, [r3, #4]
        s->dyn_dtree[d_code(dist)].Freq++;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2bff      	cmp	r3, #255	; 0xff
 80061bc:	d804      	bhi.n	80061c8 <_tr_tally+0x114>
 80061be:	4a15      	ldr	r2, [pc, #84]	; (8006214 <_tr_tally+0x160>)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4413      	add	r3, r2
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	e005      	b.n	80061d4 <_tr_tally+0x120>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061d0:	4a10      	ldr	r2, [pc, #64]	; (8006214 <_tr_tally+0x160>)
 80061d2:	5cd3      	ldrb	r3, [r2, r3]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	f203 2162 	addw	r1, r3, #610	; 0x262
 80061da:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 80061de:	3201      	adds	r2, #1
 80061e0:	b291      	uxth	r1, r2
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f203 2362 	addw	r3, r3, #610	; 0x262
 80061e8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
               s->last_lit, in_length, out_length,
               100L - out_length*100L/in_length));
        if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;
    }
#endif
    return (s->last_lit == s->lit_bufsize-1);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f2:	f8d3 26a0 	ldr.w	r2, [r3, #1696]	; 0x6a0
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fc:	f8d3 369c 	ldr.w	r3, [r3, #1692]	; 0x69c
 8006200:	3b01      	subs	r3, #1
 8006202:	429a      	cmp	r2, r3
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
    /* We avoid equality with lit_bufsize because of wraparound at 64K
     * on 16 bit machines and because stored blocks are restricted to
     * 64K-1 bytes.
     */
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	0800ff38 	.word	0x0800ff38
 8006218:	0800d738 	.word	0x0800d738
 800621c:	08010138 	.word	0x08010138

08006220 <compress_block>:
 */
local void compress_block(s, ltree, dtree)
    deflate_state *s;
    const ct_data *ltree; /* literal tree */
    const ct_data *dtree; /* distance tree */
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
    unsigned dist;      /* distance of matched string */
    int lc;             /* match length or unmatched char (if dist == 0) */
    unsigned lx = 0;    /* running index in l_buf */
 800622c:	2300      	movs	r3, #0
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned code;      /* the code to send */
    int extra;          /* number of extra bits to send */

    if (s->last_lit != 0) do {
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006236:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80e6 	beq.w	800640c <compress_block+0x1ec>
        dist = s->d_buf[lx];
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006246:	f8d3 26a4 	ldr.w	r2, [r3, #1700]	; 0x6a4
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	623b      	str	r3, [r7, #32]
        lc = s->l_buf[lx++];
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625a:	f8d3 2698 	ldr.w	r2, [r3, #1688]	; 0x698
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	6279      	str	r1, [r7, #36]	; 0x24
 8006264:	4413      	add	r3, r2
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	61fb      	str	r3, [r7, #28]
        if (dist == 0) {
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d132      	bne.n	80062d6 <compress_block+0xb6>
            send_code(s, lc, ltree); /* send a literal byte */
 8006270:	4b75      	ldr	r3, [pc, #468]	; (8006448 <compress_block+0x228>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b02      	cmp	r3, #2
 8006276:	dd07      	ble.n	8006288 <compress_block+0x68>
 8006278:	4b74      	ldr	r3, [pc, #464]	; (800644c <compress_block+0x22c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	4973      	ldr	r1, [pc, #460]	; (8006450 <compress_block+0x230>)
 8006282:	4618      	mov	r0, r3
 8006284:	f005 fd82 	bl	800bd8c <fiprintf>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	4413      	add	r3, r2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	4619      	mov	r1, r3
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	4413      	add	r3, r2
 800629c:	885b      	ldrh	r3, [r3, #2]
 800629e:	461a      	mov	r2, r3
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7fe fc2d 	bl	8004b00 <send_bits>
            Tracecv(isgraph(lc), (stderr," '%c' ", lc));
 80062a6:	4b68      	ldr	r3, [pc, #416]	; (8006448 <compress_block+0x228>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	f340 8096 	ble.w	80063dc <compress_block+0x1bc>
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a67      	ldr	r2, [pc, #412]	; (8006454 <compress_block+0x234>)
 80062b6:	4413      	add	r3, r2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	f003 0317 	and.w	r3, r3, #23
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 808c 	beq.w	80063dc <compress_block+0x1bc>
 80062c4:	4b61      	ldr	r3, [pc, #388]	; (800644c <compress_block+0x22c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	4962      	ldr	r1, [pc, #392]	; (8006458 <compress_block+0x238>)
 80062ce:	4618      	mov	r0, r3
 80062d0:	f005 fd5c 	bl	800bd8c <fiprintf>
 80062d4:	e082      	b.n	80063dc <compress_block+0x1bc>
        } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
 80062d6:	4a61      	ldr	r2, [pc, #388]	; (800645c <compress_block+0x23c>)
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	61bb      	str	r3, [r7, #24]
            send_code(s, code+LITERALS+1, ltree); /* send the length code */
 80062e0:	4b59      	ldr	r3, [pc, #356]	; (8006448 <compress_block+0x228>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	dd09      	ble.n	80062fc <compress_block+0xdc>
 80062e8:	4b58      	ldr	r3, [pc, #352]	; (800644c <compress_block+0x22c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68d8      	ldr	r0, [r3, #12]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f203 1301 	addw	r3, r3, #257	; 0x101
 80062f4:	461a      	mov	r2, r3
 80062f6:	4956      	ldr	r1, [pc, #344]	; (8006450 <compress_block+0x230>)
 80062f8:	f005 fd48 	bl	800bd8c <fiprintf>
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	4619      	mov	r1, r3
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	f203 1301 	addw	r3, r3, #257	; 0x101
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4413      	add	r3, r2
 8006318:	885b      	ldrh	r3, [r3, #2]
 800631a:	461a      	mov	r2, r3
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7fe fbef 	bl	8004b00 <send_bits>
            extra = extra_lbits[code];
 8006322:	4a4f      	ldr	r2, [pc, #316]	; (8006460 <compress_block+0x240>)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	617b      	str	r3, [r7, #20]
            if (extra != 0) {
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <compress_block+0x12a>
                lc -= base_length[code];
 8006332:	4a4c      	ldr	r2, [pc, #304]	; (8006464 <compress_block+0x244>)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	61fb      	str	r3, [r7, #28]
                send_bits(s, lc, extra);       /* send the extra length bits */
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	69f9      	ldr	r1, [r7, #28]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7fe fbdb 	bl	8004b00 <send_bits>
            }
            dist--; /* dist is now the match distance - 1 */
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	3b01      	subs	r3, #1
 800634e:	623b      	str	r3, [r7, #32]
            code = d_code(dist);
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2bff      	cmp	r3, #255	; 0xff
 8006354:	d804      	bhi.n	8006360 <compress_block+0x140>
 8006356:	4a44      	ldr	r2, [pc, #272]	; (8006468 <compress_block+0x248>)
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	4413      	add	r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	e005      	b.n	800636c <compress_block+0x14c>
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	09db      	lsrs	r3, r3, #7
 8006364:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006368:	4a3f      	ldr	r2, [pc, #252]	; (8006468 <compress_block+0x248>)
 800636a:	5cd3      	ldrb	r3, [r2, r3]
 800636c:	61bb      	str	r3, [r7, #24]
            Assert (code < D_CODES, "bad d_code");
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b1d      	cmp	r3, #29
 8006372:	d902      	bls.n	800637a <compress_block+0x15a>
 8006374:	483d      	ldr	r0, [pc, #244]	; (800646c <compress_block+0x24c>)
 8006376:	f000 fa29 	bl	80067cc <z_error>

            send_code(s, code, dtree);       /* send the distance code */
 800637a:	4b33      	ldr	r3, [pc, #204]	; (8006448 <compress_block+0x228>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b02      	cmp	r3, #2
 8006380:	dd07      	ble.n	8006392 <compress_block+0x172>
 8006382:	4b32      	ldr	r3, [pc, #200]	; (800644c <compress_block+0x22c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4931      	ldr	r1, [pc, #196]	; (8006450 <compress_block+0x230>)
 800638c:	4618      	mov	r0, r3
 800638e:	f005 fcfd 	bl	800bd8c <fiprintf>
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	4619      	mov	r1, r3
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	4413      	add	r3, r2
 80063a6:	885b      	ldrh	r3, [r3, #2]
 80063a8:	461a      	mov	r2, r3
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7fe fba8 	bl	8004b00 <send_bits>
            extra = extra_dbits[code];
 80063b0:	4a2f      	ldr	r2, [pc, #188]	; (8006470 <compress_block+0x250>)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b8:	617b      	str	r3, [r7, #20]
            if (extra != 0) {
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00d      	beq.n	80063dc <compress_block+0x1bc>
                dist -= base_dist[code];
 80063c0:	4a2c      	ldr	r2, [pc, #176]	; (8006474 <compress_block+0x254>)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	623b      	str	r3, [r7, #32]
                send_bits(s, dist, extra);   /* send the extra distance bits */
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4619      	mov	r1, r3
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f7fe fb92 	bl	8004b00 <send_bits>
            }
        } /* literal or match pair ? */

        /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
        Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063e6:	f8d3 169c 	ldr.w	r1, [r3, #1692]	; 0x69c
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	440b      	add	r3, r1
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d302      	bcc.n	80063fa <compress_block+0x1da>
 80063f4:	4820      	ldr	r0, [pc, #128]	; (8006478 <compress_block+0x258>)
 80063f6:	f000 f9e9 	bl	80067cc <z_error>
               "pendingBuf overflow");

    } while (lx < s->last_lit);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006400:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	429a      	cmp	r2, r3
 8006408:	f4ff af1a 	bcc.w	8006240 <compress_block+0x20>

    send_code(s, END_BLOCK, ltree);
 800640c:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <compress_block+0x228>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b02      	cmp	r3, #2
 8006412:	dd08      	ble.n	8006426 <compress_block+0x206>
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <compress_block+0x22c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800641e:	490c      	ldr	r1, [pc, #48]	; (8006450 <compress_block+0x230>)
 8006420:	4618      	mov	r0, r3
 8006422:	f005 fcb3 	bl	800bd8c <fiprintf>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006436:	885b      	ldrh	r3, [r3, #2]
 8006438:	461a      	mov	r2, r3
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7fe fb60 	bl	8004b00 <send_bits>
}
 8006440:	bf00      	nop
 8006442:	3728      	adds	r7, #40	; 0x28
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20003260 	.word	0x20003260
 800644c:	20000060 	.word	0x20000060
 8006450:	0800d5dc 	.word	0x0800d5dc
 8006454:	0801078c 	.word	0x0801078c
 8006458:	0800d750 	.word	0x0800d750
 800645c:	08010138 	.word	0x08010138
 8006460:	0800f8f4 	.word	0x0800f8f4
 8006464:	08010238 	.word	0x08010238
 8006468:	0800ff38 	.word	0x0800ff38
 800646c:	0800d758 	.word	0x0800d758
 8006470:	0800f968 	.word	0x0800f968
 8006474:	080102ac 	.word	0x080102ac
 8006478:	0800d764 	.word	0x0800d764

0800647c <detect_data_type>:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
local int detect_data_type(s)
    deflate_state *s;
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
    /* black_mask is the bit mask of black-listed bytes
     * set bits 0..6, 14..25, and 28..31
     * 0xf3ffc07f = binary 11110011111111111100000001111111
     */
    unsigned long black_mask = 0xf3ffc07fUL;
 8006484:	4b23      	ldr	r3, [pc, #140]	; (8006514 <detect_data_type+0x98>)
 8006486:	60fb      	str	r3, [r7, #12]
    int n;

    /* Check for non-textual ("black-listed") bytes. */
    for (n = 0; n <= 31; n++, black_mask >>= 1)
 8006488:	2300      	movs	r3, #0
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	e014      	b.n	80064b8 <detect_data_type+0x3c>
        if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <detect_data_type+0x30>
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3324      	adds	r3, #36	; 0x24
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	889b      	ldrh	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <detect_data_type+0x30>
            return Z_BINARY;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e02d      	b.n	8006508 <detect_data_type+0x8c>
    for (n = 0; n <= 31; n++, black_mask >>= 1)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b1f      	cmp	r3, #31
 80064bc:	dde7      	ble.n	800648e <detect_data_type+0x12>

    /* Check for textual ("white-listed") bytes. */
    if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <detect_data_type+0x60>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <detect_data_type+0x60>
            || s->dyn_ltree[13].Freq != 0)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <detect_data_type+0x64>
        return Z_TEXT;
 80064dc:	2301      	movs	r3, #1
 80064de:	e013      	b.n	8006508 <detect_data_type+0x8c>
    for (n = 32; n < LITERALS; n++)
 80064e0:	2320      	movs	r3, #32
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	e00c      	b.n	8006500 <detect_data_type+0x84>
        if (s->dyn_ltree[n].Freq != 0)
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3324      	adds	r3, #36	; 0x24
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	889b      	ldrh	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <detect_data_type+0x7e>
            return Z_TEXT;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e006      	b.n	8006508 <detect_data_type+0x8c>
    for (n = 32; n < LITERALS; n++)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2bff      	cmp	r3, #255	; 0xff
 8006504:	ddef      	ble.n	80064e6 <detect_data_type+0x6a>

    /* There are no "black-listed" or "white-listed" bytes:
     * this stream either is empty or has tolerated ("gray-listed") bytes only.
     */
    return Z_BINARY;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	f3ffc07f 	.word	0xf3ffc07f

08006518 <bi_reverse>:
 * IN assertion: 1 <= len <= 15
 */
local unsigned bi_reverse(code, len)
    unsigned code; /* the value to invert */
    int len;       /* its bit length */
{
 8006518:	b490      	push	{r4, r7}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
    register unsigned res = 0;
 8006522:	2400      	movs	r4, #0
    do {
        res |= code & 1;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	431c      	orrs	r4, r3
        code >>= 1, res <<= 1;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	607b      	str	r3, [r7, #4]
 8006532:	0064      	lsls	r4, r4, #1
    } while (--len > 0);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	603b      	str	r3, [r7, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	dcf1      	bgt.n	8006524 <bi_reverse+0xc>
    return res >> 1;
 8006540:	0863      	lsrs	r3, r4, #1
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bc90      	pop	{r4, r7}
 800654a:	4770      	bx	lr

0800654c <bi_flush>:
/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
local void bi_flush(s)
    deflate_state *s;
{
 800654c:	b490      	push	{r4, r7}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
    if (s->bi_valid == 16) {
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800655a:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 800655e:	2b10      	cmp	r3, #16
 8006560:	d12d      	bne.n	80065be <bi_flush+0x72>
        put_short(s, s->bi_buf);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006568:	f8b3 46c0 	ldrh.w	r4, [r3, #1728]	; 0x6c0
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	1c58      	adds	r0, r3, #1
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	6148      	str	r0, [r1, #20]
 800657a:	4413      	add	r3, r2
 800657c:	b2e2      	uxtb	r2, r4
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006586:	f8b3 36c0 	ldrh.w	r3, [r3, #1728]	; 0x6c0
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b29c      	uxth	r4, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	1c58      	adds	r0, r3, #1
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	6148      	str	r0, [r1, #20]
 800659c:	4413      	add	r3, r2
 800659e:	b2e2      	uxtb	r2, r4
 80065a0:	701a      	strb	r2, [r3, #0]
        s->bi_buf = 0;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8a3 26c0 	strh.w	r2, [r3, #1728]	; 0x6c0
        s->bi_valid = 0;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b4:	461a      	mov	r2, r3
 80065b6:	2300      	movs	r3, #0
 80065b8:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
    } else if (s->bi_valid >= 8) {
        put_byte(s, (Byte)s->bi_buf);
        s->bi_buf >>= 8;
        s->bi_valid -= 8;
    }
}
 80065bc:	e02c      	b.n	8006618 <bi_flush+0xcc>
    } else if (s->bi_valid >= 8) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c4:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 80065c8:	2b07      	cmp	r3, #7
 80065ca:	dd25      	ble.n	8006618 <bi_flush+0xcc>
        put_byte(s, (Byte)s->bi_buf);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d2:	f8b3 46c0 	ldrh.w	r4, [r3, #1728]	; 0x6c0
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	1c58      	adds	r0, r3, #1
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	6148      	str	r0, [r1, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	b2e2      	uxtb	r2, r4
 80065e8:	701a      	strb	r2, [r3, #0]
        s->bi_buf >>= 8;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f0:	f8b3 36c0 	ldrh.w	r3, [r3, #1728]	; 0x6c0
 80065f4:	0a1b      	lsrs	r3, r3, #8
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fe:	f8a3 26c0 	strh.w	r2, [r3, #1728]	; 0x6c0
        s->bi_valid -= 8;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006608:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 800660c:	3b08      	subs	r3, #8
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006614:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
}
 8006618:	bf00      	nop
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bc90      	pop	{r4, r7}
 8006620:	4770      	bx	lr

08006622 <bi_windup>:
/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
local void bi_windup(s)
    deflate_state *s;
{
 8006622:	b490      	push	{r4, r7}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
    if (s->bi_valid > 8) {
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006630:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 8006634:	2b08      	cmp	r3, #8
 8006636:	dd20      	ble.n	800667a <bi_windup+0x58>
        put_short(s, s->bi_buf);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	f8b3 46c0 	ldrh.w	r4, [r3, #1728]	; 0x6c0
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	1c58      	adds	r0, r3, #1
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	6148      	str	r0, [r1, #20]
 8006650:	4413      	add	r3, r2
 8006652:	b2e2      	uxtb	r2, r4
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665c:	f8b3 36c0 	ldrh.w	r3, [r3, #1728]	; 0x6c0
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	b29c      	uxth	r4, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	1c58      	adds	r0, r3, #1
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	6148      	str	r0, [r1, #20]
 8006672:	4413      	add	r3, r2
 8006674:	b2e2      	uxtb	r2, r4
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e015      	b.n	80066a6 <bi_windup+0x84>
    } else if (s->bi_valid > 0) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006680:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	; 0x6c4
 8006684:	2b00      	cmp	r3, #0
 8006686:	dd0e      	ble.n	80066a6 <bi_windup+0x84>
        put_byte(s, (Byte)s->bi_buf);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668e:	f8b3 46c0 	ldrh.w	r4, [r3, #1728]	; 0x6c0
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	1c58      	adds	r0, r3, #1
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	6148      	str	r0, [r1, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	b2e2      	uxtb	r2, r4
 80066a4:	701a      	strb	r2, [r3, #0]
    }
    s->bi_buf = 0;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8a3 26c0 	strh.w	r2, [r3, #1728]	; 0x6c0
    s->bi_valid = 0;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	f8c2 36c4 	str.w	r3, [r2, #1732]	; 0x6c4
#ifdef DEBUG
    s->bits_sent = (s->bits_sent+7) & ~7;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c6:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	; 0x6bc
 80066ca:	3307      	adds	r3, #7
 80066cc:	f023 0307 	bic.w	r3, r3, #7
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066d6:	f8c2 36bc 	str.w	r3, [r2, #1724]	; 0x6bc
#endif
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc90      	pop	{r4, r7}
 80066e2:	4770      	bx	lr

080066e4 <copy_block>:
local void copy_block(s, buf, len, header)
    deflate_state *s;
    charf    *buf;    /* the input data */
    unsigned len;     /* its length */
    int      header;  /* true if block header must be written */
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
    bi_windup(s);        /* align on byte boundary */
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff95 	bl	8006622 <bi_windup>

    if (header) {
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d040      	beq.n	8006780 <copy_block+0x9c>
        put_short(s, (ush)len);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	1c58      	adds	r0, r3, #1
 8006708:	68f9      	ldr	r1, [r7, #12]
 800670a:	6148      	str	r0, [r1, #20]
 800670c:	4413      	add	r3, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	b29b      	uxth	r3, r3
 8006718:	0a1b      	lsrs	r3, r3, #8
 800671a:	b29c      	uxth	r4, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	1c58      	adds	r0, r3, #1
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	6148      	str	r0, [r1, #20]
 800672a:	4413      	add	r3, r2
 800672c:	b2e2      	uxtb	r2, r4
 800672e:	701a      	strb	r2, [r3, #0]
        put_short(s, (ush)~len);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6899      	ldr	r1, [r3, #8]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	1c5c      	adds	r4, r3, #1
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	6144      	str	r4, [r0, #20]
 8006742:	440b      	add	r3, r1
 8006744:	43d2      	mvns	r2, r2
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	b29b      	uxth	r3, r3
 800674e:	43db      	mvns	r3, r3
 8006750:	b29b      	uxth	r3, r3
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	b29c      	uxth	r4, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	1c58      	adds	r0, r3, #1
 8006760:	68f9      	ldr	r1, [r7, #12]
 8006762:	6148      	str	r0, [r1, #20]
 8006764:	4413      	add	r3, r2
 8006766:	b2e2      	uxtb	r2, r4
 8006768:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
        s->bits_sent += 2*16;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006770:	f8d3 36bc 	ldr.w	r3, [r3, #1724]	; 0x6bc
 8006774:	3320      	adds	r3, #32
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800677c:	f8c2 36bc 	str.w	r3, [r2, #1724]	; 0x6bc
#endif
    }
#ifdef DEBUG
    s->bits_sent += (ulg)len<<3;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006786:	f8d3 26bc 	ldr.w	r2, [r3, #1724]	; 0x6bc
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	4413      	add	r3, r2
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006796:	f8c2 36bc 	str.w	r3, [r2, #1724]	; 0x6bc
#endif
    while (len--) {
 800679a:	e00c      	b.n	80067b6 <copy_block+0xd2>
        put_byte(s, *buf++);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	60ba      	str	r2, [r7, #8]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	6891      	ldr	r1, [r2, #8]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	6952      	ldr	r2, [r2, #20]
 80067aa:	1c54      	adds	r4, r2, #1
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	6144      	str	r4, [r0, #20]
 80067b0:	440a      	add	r2, r1
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	7013      	strb	r3, [r2, #0]
    while (len--) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	1e5a      	subs	r2, r3, #1
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ed      	bne.n	800679c <copy_block+0xb8>
    }
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}
	...

080067cc <z_error>:
#  endif
int ZLIB_INTERNAL z_verbose = verbose;

void ZLIB_INTERNAL z_error (m)
    char *m;
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
    fprintf(stderr, "%s\n", m);
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <z_error+0x20>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	4904      	ldr	r1, [pc, #16]	; (80067f0 <z_error+0x24>)
 80067de:	4618      	mov	r0, r3
 80067e0:	f005 fad4 	bl	800bd8c <fiprintf>
    exit(1);
 80067e4:	2001      	movs	r0, #1
 80067e6:	f005 fabd 	bl	800bd64 <exit>
 80067ea:	bf00      	nop
 80067ec:	20000060 	.word	0x20000060
 80067f0:	0800d804 	.word	0x0800d804

080067f4 <zcalloc>:

voidpf ZLIB_INTERNAL zcalloc (opaque, items, size)
    voidpf opaque;
    unsigned items;
    unsigned size;
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
    if (opaque) items += size - size; /* make compiler happy */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
    return sizeof(uInt) > 2 ? (voidpf)malloc(items * size) :
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	fb02 f303 	mul.w	r3, r2, r3
 800680c:	4618      	mov	r0, r3
 800680e:	f005 fba5 	bl	800bf5c <malloc>
 8006812:	4603      	mov	r3, r0
                              (voidpf)calloc(items, size);
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <zcfree>:

void ZLIB_INTERNAL zcfree (opaque, ptr)
    voidpf opaque;
    voidpf ptr;
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
    free(ptr);
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f005 fba0 	bl	800bf6c <free>
    if (opaque) return; /* make compiler happy */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
}
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006838:	480c      	ldr	r0, [pc, #48]	; (800686c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800683a:	490d      	ldr	r1, [pc, #52]	; (8006870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800683c:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800683e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006840:	e002      	b.n	8006848 <LoopCopyDataInit>

08006842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006846:	3304      	adds	r3, #4

08006848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800684a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800684c:	d3f9      	bcc.n	8006842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800684e:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006850:	4c0a      	ldr	r4, [pc, #40]	; (800687c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006854:	e001      	b.n	800685a <LoopFillZerobss>

08006856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006858:	3204      	adds	r2, #4

0800685a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800685a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800685c:	d3fb      	bcc.n	8006856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800685e:	f7fe f949 	bl	8004af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006862:	f005 fb53 	bl	800bf0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006866:	f7fd fcdb 	bl	8004220 <main>
  bx lr
 800686a:	4770      	bx	lr
  ldr r0, =_sdata
 800686c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006870:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8006874:	08010938 	.word	0x08010938
  ldr r2, =_sbss
 8006878:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 800687c:	200034b4 	.word	0x200034b4

08006880 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006880:	e7fe      	b.n	8006880 <ADC1_IRQHandler>

08006882 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800688c:	2003      	movs	r0, #3
 800688e:	f000 f939 	bl	8006b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006892:	200f      	movs	r0, #15
 8006894:	f000 f80e 	bl	80068b4 <HAL_InitTick>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	71fb      	strb	r3, [r7, #7]
 80068a2:	e001      	b.n	80068a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80068a4:	f7fd ff58 	bl	8004758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80068a8:	79fb      	ldrb	r3, [r7, #7]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80068c0:	4b16      	ldr	r3, [pc, #88]	; (800691c <HAL_InitTick+0x68>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d022      	beq.n	800690e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <HAL_InitTick+0x6c>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4b13      	ldr	r3, [pc, #76]	; (800691c <HAL_InitTick+0x68>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f938 	bl	8006b52 <HAL_SYSTICK_Config>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10f      	bne.n	8006908 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	d809      	bhi.n	8006902 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068ee:	2200      	movs	r2, #0
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	f000 f910 	bl	8006b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80068fa:	4a0a      	ldr	r2, [pc, #40]	; (8006924 <HAL_InitTick+0x70>)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e007      	b.n	8006912 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
 8006906:	e004      	b.n	8006912 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
 800690c:	e001      	b.n	8006912 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000048 	.word	0x20000048
 8006920:	20000004 	.word	0x20000004
 8006924:	20000044 	.word	0x20000044

08006928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_IncTick+0x1c>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_IncTick+0x20>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4413      	add	r3, r2
 8006936:	4a03      	ldr	r2, [pc, #12]	; (8006944 <HAL_IncTick+0x1c>)
 8006938:	6013      	str	r3, [r2, #0]
}
 800693a:	bf00      	nop
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20003264 	.word	0x20003264
 8006948:	20000048 	.word	0x20000048

0800694c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  return uwTick;
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <HAL_GetTick+0x10>)
 8006952:	681b      	ldr	r3, [r3, #0]
}
 8006954:	4618      	mov	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr
 800695c:	20003264 	.word	0x20003264

08006960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006968:	f7ff fff0 	bl	800694c <HAL_GetTick>
 800696c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d004      	beq.n	8006984 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800697a:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <HAL_Delay+0x40>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006984:	bf00      	nop
 8006986:	f7ff ffe1 	bl	800694c <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	429a      	cmp	r2, r3
 8006994:	d8f7      	bhi.n	8006986 <HAL_Delay+0x26>
  {
  }
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000048 	.word	0x20000048

080069a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <__NVIC_SetPriorityGrouping+0x44>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069c0:	4013      	ands	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069d6:	4a04      	ldr	r2, [pc, #16]	; (80069e8 <__NVIC_SetPriorityGrouping+0x44>)
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	60d3      	str	r3, [r2, #12]
}
 80069dc:	bf00      	nop
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	e000ed00 	.word	0xe000ed00

080069ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069f0:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <__NVIC_GetPriorityGrouping+0x18>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	0a1b      	lsrs	r3, r3, #8
 80069f6:	f003 0307 	and.w	r3, r3, #7
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	e000ed00 	.word	0xe000ed00

08006a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	6039      	str	r1, [r7, #0]
 8006a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	db0a      	blt.n	8006a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	490c      	ldr	r1, [pc, #48]	; (8006a54 <__NVIC_SetPriority+0x4c>)
 8006a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a26:	0112      	lsls	r2, r2, #4
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a30:	e00a      	b.n	8006a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	4908      	ldr	r1, [pc, #32]	; (8006a58 <__NVIC_SetPriority+0x50>)
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	f003 030f 	and.w	r3, r3, #15
 8006a3e:	3b04      	subs	r3, #4
 8006a40:	0112      	lsls	r2, r2, #4
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	440b      	add	r3, r1
 8006a46:	761a      	strb	r2, [r3, #24]
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	e000e100 	.word	0xe000e100
 8006a58:	e000ed00 	.word	0xe000ed00

08006a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	; 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f1c3 0307 	rsb	r3, r3, #7
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	bf28      	it	cs
 8006a7a:	2304      	movcs	r3, #4
 8006a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3304      	adds	r3, #4
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d902      	bls.n	8006a8c <NVIC_EncodePriority+0x30>
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3b03      	subs	r3, #3
 8006a8a:	e000      	b.n	8006a8e <NVIC_EncodePriority+0x32>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a90:	f04f 32ff 	mov.w	r2, #4294967295
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43da      	mvns	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	43d9      	mvns	r1, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab4:	4313      	orrs	r3, r2
         );
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3724      	adds	r7, #36	; 0x24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ad0:	d301      	bcc.n	8006ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00f      	b.n	8006af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ad6:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <SysTick_Config+0x40>)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ade:	210f      	movs	r1, #15
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	f7ff ff90 	bl	8006a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <SysTick_Config+0x40>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <SysTick_Config+0x40>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010

08006b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ff49 	bl	80069a4 <__NVIC_SetPriorityGrouping>
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	4603      	mov	r3, r0
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b2c:	f7ff ff5e 	bl	80069ec <__NVIC_GetPriorityGrouping>
 8006b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f7ff ff90 	bl	8006a5c <NVIC_EncodePriority>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff ff5f 	bl	8006a08 <__NVIC_SetPriority>
}
 8006b4a:	bf00      	nop
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff ffb0 	bl	8006ac0 <SysTick_Config>
 8006b60:	4603      	mov	r3, r0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006b82:	e160      	b.n	8006e46 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	2101      	movs	r1, #1
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b90:	4013      	ands	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 8152 	beq.w	8006e40 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f003 0303 	and.w	r3, r3, #3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d005      	beq.n	8006bb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d130      	bne.n	8006c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	2203      	movs	r2, #3
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8006bea:	2201      	movs	r2, #1
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	f003 0201 	and.w	r2, r3, #1
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d017      	beq.n	8006c52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	43db      	mvns	r3, r3
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4013      	ands	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d123      	bne.n	8006ca6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	08da      	lsrs	r2, r3, #3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3208      	adds	r2, #8
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	220f      	movs	r2, #15
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	08da      	lsrs	r2, r3, #3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3208      	adds	r2, #8
 8006ca0:	6939      	ldr	r1, [r7, #16]
 8006ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f003 0203 	and.w	r2, r3, #3
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	fa02 f303 	lsl.w	r3, r2, r3
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80ac 	beq.w	8006e40 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ce8:	4b5e      	ldr	r3, [pc, #376]	; (8006e64 <HAL_GPIO_Init+0x2f8>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	4a5d      	ldr	r2, [pc, #372]	; (8006e64 <HAL_GPIO_Init+0x2f8>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6213      	str	r3, [r2, #32]
 8006cf4:	4b5b      	ldr	r3, [pc, #364]	; (8006e64 <HAL_GPIO_Init+0x2f8>)
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8006d00:	4a59      	ldr	r2, [pc, #356]	; (8006e68 <HAL_GPIO_Init+0x2fc>)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	089b      	lsrs	r3, r3, #2
 8006d06:	3302      	adds	r3, #2
 8006d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	220f      	movs	r2, #15
 8006d18:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4013      	ands	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a51      	ldr	r2, [pc, #324]	; (8006e6c <HAL_GPIO_Init+0x300>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d025      	beq.n	8006d78 <HAL_GPIO_Init+0x20c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a50      	ldr	r2, [pc, #320]	; (8006e70 <HAL_GPIO_Init+0x304>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01f      	beq.n	8006d74 <HAL_GPIO_Init+0x208>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a4f      	ldr	r2, [pc, #316]	; (8006e74 <HAL_GPIO_Init+0x308>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d019      	beq.n	8006d70 <HAL_GPIO_Init+0x204>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a4e      	ldr	r2, [pc, #312]	; (8006e78 <HAL_GPIO_Init+0x30c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d013      	beq.n	8006d6c <HAL_GPIO_Init+0x200>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a4d      	ldr	r2, [pc, #308]	; (8006e7c <HAL_GPIO_Init+0x310>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00d      	beq.n	8006d68 <HAL_GPIO_Init+0x1fc>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a4c      	ldr	r2, [pc, #304]	; (8006e80 <HAL_GPIO_Init+0x314>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <HAL_GPIO_Init+0x1f8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a4b      	ldr	r2, [pc, #300]	; (8006e84 <HAL_GPIO_Init+0x318>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d101      	bne.n	8006d60 <HAL_GPIO_Init+0x1f4>
 8006d5c:	2306      	movs	r3, #6
 8006d5e:	e00c      	b.n	8006d7a <HAL_GPIO_Init+0x20e>
 8006d60:	2307      	movs	r3, #7
 8006d62:	e00a      	b.n	8006d7a <HAL_GPIO_Init+0x20e>
 8006d64:	2305      	movs	r3, #5
 8006d66:	e008      	b.n	8006d7a <HAL_GPIO_Init+0x20e>
 8006d68:	2304      	movs	r3, #4
 8006d6a:	e006      	b.n	8006d7a <HAL_GPIO_Init+0x20e>
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e004      	b.n	8006d7a <HAL_GPIO_Init+0x20e>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e002      	b.n	8006d7a <HAL_GPIO_Init+0x20e>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <HAL_GPIO_Init+0x20e>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	f002 0203 	and.w	r2, r2, #3
 8006d80:	0092      	lsls	r2, r2, #2
 8006d82:	4093      	lsls	r3, r2
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006d8a:	4937      	ldr	r1, [pc, #220]	; (8006e68 <HAL_GPIO_Init+0x2fc>)
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	089b      	lsrs	r3, r3, #2
 8006d90:	3302      	adds	r3, #2
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d98:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	4013      	ands	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006dbc:	4a32      	ldr	r2, [pc, #200]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006dc2:	4b31      	ldr	r3, [pc, #196]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006de6:	4a28      	ldr	r2, [pc, #160]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006dec:	4b26      	ldr	r3, [pc, #152]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006e10:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e16:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4013      	ands	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006e3a:	4a13      	ldr	r2, [pc, #76]	; (8006e88 <HAL_GPIO_Init+0x31c>)
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	3301      	adds	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f ae97 	bne.w	8006b84 <HAL_GPIO_Init+0x18>
  }
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40010000 	.word	0x40010000
 8006e6c:	40020000 	.word	0x40020000
 8006e70:	40020400 	.word	0x40020400
 8006e74:	40020800 	.word	0x40020800
 8006e78:	40020c00 	.word	0x40020c00
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	40021400 	.word	0x40021400
 8006e84:	40021800 	.word	0x40021800
 8006e88:	40010400 	.word	0x40010400

08006e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	807b      	strh	r3, [r7, #2]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e9c:	787b      	ldrb	r3, [r7, #1]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ea2:	887a      	ldrh	r2, [r7, #2]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8006ea8:	e003      	b.n	8006eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8006eaa:	887b      	ldrh	r3, [r7, #2]
 8006eac:	041a      	lsls	r2, r3, #16
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	619a      	str	r2, [r3, #24]
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e31d      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ece:	4b94      	ldr	r3, [pc, #592]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ed8:	4b91      	ldr	r3, [pc, #580]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d07b      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d006      	beq.n	8006f02 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b0c      	cmp	r3, #12
 8006ef8:	d10f      	bne.n	8006f1a <HAL_RCC_OscConfig+0x5e>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f00:	d10b      	bne.n	8006f1a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f02:	4b87      	ldr	r3, [pc, #540]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d06a      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x128>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d166      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e2f7      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d106      	bne.n	8006f30 <HAL_RCC_OscConfig+0x74>
 8006f22:	4b7f      	ldr	r3, [pc, #508]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a7e      	ldr	r2, [pc, #504]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e02d      	b.n	8006f8c <HAL_RCC_OscConfig+0xd0>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10c      	bne.n	8006f52 <HAL_RCC_OscConfig+0x96>
 8006f38:	4b79      	ldr	r3, [pc, #484]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a78      	ldr	r2, [pc, #480]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	4b76      	ldr	r3, [pc, #472]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a75      	ldr	r2, [pc, #468]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e01c      	b.n	8006f8c <HAL_RCC_OscConfig+0xd0>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	d10c      	bne.n	8006f74 <HAL_RCC_OscConfig+0xb8>
 8006f5a:	4b71      	ldr	r3, [pc, #452]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a70      	ldr	r2, [pc, #448]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4b6e      	ldr	r3, [pc, #440]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a6d      	ldr	r2, [pc, #436]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e00b      	b.n	8006f8c <HAL_RCC_OscConfig+0xd0>
 8006f74:	4b6a      	ldr	r3, [pc, #424]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a69      	ldr	r2, [pc, #420]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	4b67      	ldr	r3, [pc, #412]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a66      	ldr	r2, [pc, #408]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d013      	beq.n	8006fbc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f94:	f7ff fcda 	bl	800694c <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f9c:	f7ff fcd6 	bl	800694c <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b64      	cmp	r3, #100	; 0x64
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e2ad      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fae:	4b5c      	ldr	r3, [pc, #368]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0f0      	beq.n	8006f9c <HAL_RCC_OscConfig+0xe0>
 8006fba:	e014      	b.n	8006fe6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fbc:	f7ff fcc6 	bl	800694c <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc4:	f7ff fcc2 	bl	800694c <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b64      	cmp	r3, #100	; 0x64
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e299      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fd6:	4b52      	ldr	r3, [pc, #328]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x108>
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d05a      	beq.n	80070a8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d005      	beq.n	8007004 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d119      	bne.n	8007032 <HAL_RCC_OscConfig+0x176>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d116      	bne.n	8007032 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007004:	4b46      	ldr	r3, [pc, #280]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_RCC_OscConfig+0x160>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d001      	beq.n	800701c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e276      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800701c:	4b40      	ldr	r3, [pc, #256]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	493d      	ldr	r1, [pc, #244]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 800702c:	4313      	orrs	r3, r2
 800702e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007030:	e03a      	b.n	80070a8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d020      	beq.n	800707c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800703a:	4b3a      	ldr	r3, [pc, #232]	; (8007124 <HAL_RCC_OscConfig+0x268>)
 800703c:	2201      	movs	r2, #1
 800703e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007040:	f7ff fc84 	bl	800694c <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007046:	e008      	b.n	800705a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007048:	f7ff fc80 	bl	800694c <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e257      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800705a:	4b31      	ldr	r3, [pc, #196]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007066:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	492a      	ldr	r1, [pc, #168]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8007076:	4313      	orrs	r3, r2
 8007078:	604b      	str	r3, [r1, #4]
 800707a:	e015      	b.n	80070a8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800707c:	4b29      	ldr	r3, [pc, #164]	; (8007124 <HAL_RCC_OscConfig+0x268>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007082:	f7ff fc63 	bl	800694c <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800708a:	f7ff fc5f 	bl	800694c <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e236      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800709c:	4b20      	ldr	r3, [pc, #128]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f0      	bne.n	800708a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80b8 	beq.w	8007226 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d170      	bne.n	800719e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80070bc:	4b18      	ldr	r3, [pc, #96]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCC_OscConfig+0x218>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e21a      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1a      	ldr	r2, [r3, #32]
 80070d8:	4b11      	ldr	r3, [pc, #68]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d921      	bls.n	8007128 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fc3b 	bl	8007964 <RCC_SetFlashLatencyFromMSIRange>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e208      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070f8:	4b09      	ldr	r3, [pc, #36]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	4906      	ldr	r1, [pc, #24]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 8007106:	4313      	orrs	r3, r2
 8007108:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	061b      	lsls	r3, r3, #24
 8007118:	4901      	ldr	r1, [pc, #4]	; (8007120 <HAL_RCC_OscConfig+0x264>)
 800711a:	4313      	orrs	r3, r2
 800711c:	604b      	str	r3, [r1, #4]
 800711e:	e020      	b.n	8007162 <HAL_RCC_OscConfig+0x2a6>
 8007120:	40023800 	.word	0x40023800
 8007124:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007128:	4b99      	ldr	r3, [pc, #612]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	4996      	ldr	r1, [pc, #600]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007136:	4313      	orrs	r3, r2
 8007138:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800713a:	4b95      	ldr	r3, [pc, #596]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	061b      	lsls	r3, r3, #24
 8007148:	4991      	ldr	r1, [pc, #580]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800714a:	4313      	orrs	r3, r2
 800714c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fc06 	bl	8007964 <RCC_SetFlashLatencyFromMSIRange>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e1d3      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	0b5b      	lsrs	r3, r3, #13
 8007168:	3301      	adds	r3, #1
 800716a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007172:	4a87      	ldr	r2, [pc, #540]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007174:	6892      	ldr	r2, [r2, #8]
 8007176:	0912      	lsrs	r2, r2, #4
 8007178:	f002 020f 	and.w	r2, r2, #15
 800717c:	4985      	ldr	r1, [pc, #532]	; (8007394 <HAL_RCC_OscConfig+0x4d8>)
 800717e:	5c8a      	ldrb	r2, [r1, r2]
 8007180:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007182:	4a85      	ldr	r2, [pc, #532]	; (8007398 <HAL_RCC_OscConfig+0x4dc>)
 8007184:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007186:	4b85      	ldr	r3, [pc, #532]	; (800739c <HAL_RCC_OscConfig+0x4e0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fb92 	bl	80068b4 <HAL_InitTick>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d045      	beq.n	8007226 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	e1b5      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d029      	beq.n	80071fa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80071a6:	4b7e      	ldr	r3, [pc, #504]	; (80073a0 <HAL_RCC_OscConfig+0x4e4>)
 80071a8:	2201      	movs	r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ac:	f7ff fbce 	bl	800694c <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071b4:	f7ff fbca 	bl	800694c <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e1a1      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80071c6:	4b72      	ldr	r3, [pc, #456]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071d2:	4b6f      	ldr	r3, [pc, #444]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	496c      	ldr	r1, [pc, #432]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071e4:	4b6a      	ldr	r3, [pc, #424]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	061b      	lsls	r3, r3, #24
 80071f2:	4967      	ldr	r1, [pc, #412]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	604b      	str	r3, [r1, #4]
 80071f8:	e015      	b.n	8007226 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80071fa:	4b69      	ldr	r3, [pc, #420]	; (80073a0 <HAL_RCC_OscConfig+0x4e4>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007200:	f7ff fba4 	bl	800694c <HAL_GetTick>
 8007204:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007208:	f7ff fba0 	bl	800694c <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e177      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800721a:	4b5d      	ldr	r3, [pc, #372]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f0      	bne.n	8007208 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d030      	beq.n	8007294 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d016      	beq.n	8007268 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800723a:	4b5a      	ldr	r3, [pc, #360]	; (80073a4 <HAL_RCC_OscConfig+0x4e8>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007240:	f7ff fb84 	bl	800694c <HAL_GetTick>
 8007244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007248:	f7ff fb80 	bl	800694c <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e157      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800725a:	4b4d      	ldr	r3, [pc, #308]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0x38c>
 8007266:	e015      	b.n	8007294 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007268:	4b4e      	ldr	r3, [pc, #312]	; (80073a4 <HAL_RCC_OscConfig+0x4e8>)
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800726e:	f7ff fb6d 	bl	800694c <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007274:	e008      	b.n	8007288 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007276:	f7ff fb69 	bl	800694c <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d901      	bls.n	8007288 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e140      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007288:	4b41      	ldr	r3, [pc, #260]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800728a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f0      	bne.n	8007276 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80b5 	beq.w	800740c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072a2:	2300      	movs	r3, #0
 80072a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072a6:	4b3a      	ldr	r3, [pc, #232]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072b2:	4b37      	ldr	r3, [pc, #220]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	4a36      	ldr	r2, [pc, #216]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80072b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072bc:	6253      	str	r3, [r2, #36]	; 0x24
 80072be:	4b34      	ldr	r3, [pc, #208]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ca:	2301      	movs	r3, #1
 80072cc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ce:	4b36      	ldr	r3, [pc, #216]	; (80073a8 <HAL_RCC_OscConfig+0x4ec>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d118      	bne.n	800730c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072da:	4b33      	ldr	r3, [pc, #204]	; (80073a8 <HAL_RCC_OscConfig+0x4ec>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a32      	ldr	r2, [pc, #200]	; (80073a8 <HAL_RCC_OscConfig+0x4ec>)
 80072e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072e6:	f7ff fb31 	bl	800694c <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ee:	f7ff fb2d 	bl	800694c <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b64      	cmp	r3, #100	; 0x64
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e104      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007300:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <HAL_RCC_OscConfig+0x4ec>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0f0      	beq.n	80072ee <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d106      	bne.n	8007322 <HAL_RCC_OscConfig+0x466>
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	4a1d      	ldr	r2, [pc, #116]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800731a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800731e:	6353      	str	r3, [r2, #52]	; 0x34
 8007320:	e02d      	b.n	800737e <HAL_RCC_OscConfig+0x4c2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <HAL_RCC_OscConfig+0x488>
 800732a:	4b19      	ldr	r3, [pc, #100]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800732c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732e:	4a18      	ldr	r2, [pc, #96]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007334:	6353      	str	r3, [r2, #52]	; 0x34
 8007336:	4b16      	ldr	r3, [pc, #88]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	4a15      	ldr	r2, [pc, #84]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800733c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007340:	6353      	str	r3, [r2, #52]	; 0x34
 8007342:	e01c      	b.n	800737e <HAL_RCC_OscConfig+0x4c2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b05      	cmp	r3, #5
 800734a:	d10c      	bne.n	8007366 <HAL_RCC_OscConfig+0x4aa>
 800734c:	4b10      	ldr	r3, [pc, #64]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800734e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007350:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007356:	6353      	str	r3, [r2, #52]	; 0x34
 8007358:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	4a0c      	ldr	r2, [pc, #48]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800735e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007362:	6353      	str	r3, [r2, #52]	; 0x34
 8007364:	e00b      	b.n	800737e <HAL_RCC_OscConfig+0x4c2>
 8007366:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736a:	4a09      	ldr	r2, [pc, #36]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 800736c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007370:	6353      	str	r3, [r2, #52]	; 0x34
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007376:	4a06      	ldr	r2, [pc, #24]	; (8007390 <HAL_RCC_OscConfig+0x4d4>)
 8007378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800737c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d024      	beq.n	80073d0 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007386:	f7ff fae1 	bl	800694c <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800738c:	e019      	b.n	80073c2 <HAL_RCC_OscConfig+0x506>
 800738e:	bf00      	nop
 8007390:	40023800 	.word	0x40023800
 8007394:	0800f8dc 	.word	0x0800f8dc
 8007398:	20000004 	.word	0x20000004
 800739c:	20000044 	.word	0x20000044
 80073a0:	42470020 	.word	0x42470020
 80073a4:	42470680 	.word	0x42470680
 80073a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073ac:	f7ff face 	bl	800694c <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e0a3      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073c2:	4b54      	ldr	r3, [pc, #336]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 80073c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0ee      	beq.n	80073ac <HAL_RCC_OscConfig+0x4f0>
 80073ce:	e014      	b.n	80073fa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d0:	f7ff fabc 	bl	800694c <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073d6:	e00a      	b.n	80073ee <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d8:	f7ff fab8 	bl	800694c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e08d      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073ee:	4b49      	ldr	r3, [pc, #292]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1ee      	bne.n	80073d8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d105      	bne.n	800740c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007400:	4b44      	ldr	r3, [pc, #272]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	4a43      	ldr	r2, [pc, #268]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 8007406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800740a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d079      	beq.n	8007508 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b0c      	cmp	r3, #12
 8007418:	d056      	beq.n	80074c8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	2b02      	cmp	r3, #2
 8007420:	d13b      	bne.n	800749a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007422:	4b3d      	ldr	r3, [pc, #244]	; (8007518 <HAL_RCC_OscConfig+0x65c>)
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007428:	f7ff fa90 	bl	800694c <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007430:	f7ff fa8c 	bl	800694c <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e063      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007442:	4b34      	ldr	r3, [pc, #208]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1f0      	bne.n	8007430 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	4319      	orrs	r1, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	430b      	orrs	r3, r1
 8007466:	492b      	ldr	r1, [pc, #172]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 8007468:	4313      	orrs	r3, r2
 800746a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800746c:	4b2a      	ldr	r3, [pc, #168]	; (8007518 <HAL_RCC_OscConfig+0x65c>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007472:	f7ff fa6b 	bl	800694c <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800747a:	f7ff fa67 	bl	800694c <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e03e      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800748c:	4b21      	ldr	r3, [pc, #132]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x5be>
 8007498:	e036      	b.n	8007508 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749a:	4b1f      	ldr	r3, [pc, #124]	; (8007518 <HAL_RCC_OscConfig+0x65c>)
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7ff fa54 	bl	800694c <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074a8:	f7ff fa50 	bl	800694c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e027      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074ba:	4b16      	ldr	r3, [pc, #88]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0x5ec>
 80074c6:	e01f      	b.n	8007508 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e01a      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074d4:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <HAL_RCC_OscConfig+0x658>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d10d      	bne.n	8007504 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d106      	bne.n	8007504 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007500:	429a      	cmp	r2, r3
 8007502:	d001      	beq.n	8007508 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40023800 	.word	0x40023800
 8007518:	42470060 	.word	0x42470060

0800751c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e11a      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007530:	4b8f      	ldr	r3, [pc, #572]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d919      	bls.n	8007572 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d105      	bne.n	8007550 <HAL_RCC_ClockConfig+0x34>
 8007544:	4b8a      	ldr	r3, [pc, #552]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a89      	ldr	r2, [pc, #548]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 800754a:	f043 0304 	orr.w	r3, r3, #4
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4b87      	ldr	r3, [pc, #540]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f023 0201 	bic.w	r2, r3, #1
 8007558:	4985      	ldr	r1, [pc, #532]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	4313      	orrs	r3, r2
 800755e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007560:	4b83      	ldr	r3, [pc, #524]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d001      	beq.n	8007572 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e0f9      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800757e:	4b7d      	ldr	r3, [pc, #500]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	497a      	ldr	r1, [pc, #488]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 800758c:	4313      	orrs	r3, r2
 800758e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 808e 	beq.w	80076ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d107      	bne.n	80075b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075a6:	4b73      	ldr	r3, [pc, #460]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d121      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e0d7      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d107      	bne.n	80075ce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075be:	4b6d      	ldr	r3, [pc, #436]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d115      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e0cb      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d107      	bne.n	80075e6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075d6:	4b67      	ldr	r3, [pc, #412]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e0bf      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80075e6:	4b63      	ldr	r3, [pc, #396]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e0b7      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075f6:	4b5f      	ldr	r3, [pc, #380]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f023 0203 	bic.w	r2, r3, #3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	495c      	ldr	r1, [pc, #368]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 8007604:	4313      	orrs	r3, r2
 8007606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007608:	f7ff f9a0 	bl	800694c <HAL_GetTick>
 800760c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d112      	bne.n	800763c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007616:	e00a      	b.n	800762e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007618:	f7ff f998 	bl	800694c <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	f241 3288 	movw	r2, #5000	; 0x1388
 8007626:	4293      	cmp	r3, r2
 8007628:	d901      	bls.n	800762e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e09b      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800762e:	4b51      	ldr	r3, [pc, #324]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 030c 	and.w	r3, r3, #12
 8007636:	2b08      	cmp	r3, #8
 8007638:	d1ee      	bne.n	8007618 <HAL_RCC_ClockConfig+0xfc>
 800763a:	e03e      	b.n	80076ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d112      	bne.n	800766a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007644:	e00a      	b.n	800765c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007646:	f7ff f981 	bl	800694c <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	f241 3288 	movw	r2, #5000	; 0x1388
 8007654:	4293      	cmp	r3, r2
 8007656:	d901      	bls.n	800765c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e084      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800765c:	4b45      	ldr	r3, [pc, #276]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 030c 	and.w	r3, r3, #12
 8007664:	2b0c      	cmp	r3, #12
 8007666:	d1ee      	bne.n	8007646 <HAL_RCC_ClockConfig+0x12a>
 8007668:	e027      	b.n	80076ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d11d      	bne.n	80076ae <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007672:	e00a      	b.n	800768a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007674:	f7ff f96a 	bl	800694c <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e06d      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800768a:	4b3a      	ldr	r3, [pc, #232]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
 8007692:	2b04      	cmp	r3, #4
 8007694:	d1ee      	bne.n	8007674 <HAL_RCC_ClockConfig+0x158>
 8007696:	e010      	b.n	80076ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007698:	f7ff f958 	bl	800694c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e05b      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80076ae:	4b31      	ldr	r3, [pc, #196]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 030c 	and.w	r3, r3, #12
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1ee      	bne.n	8007698 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076ba:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d219      	bcs.n	80076fc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d105      	bne.n	80076da <HAL_RCC_ClockConfig+0x1be>
 80076ce:	4b28      	ldr	r3, [pc, #160]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a27      	ldr	r2, [pc, #156]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 80076d4:	f043 0304 	orr.w	r3, r3, #4
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	4b25      	ldr	r3, [pc, #148]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	4923      	ldr	r1, [pc, #140]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_RCC_ClockConfig+0x254>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d001      	beq.n	80076fc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e034      	b.n	8007766 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007708:	4b1a      	ldr	r3, [pc, #104]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4917      	ldr	r1, [pc, #92]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d009      	beq.n	800773a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	490f      	ldr	r1, [pc, #60]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 8007736:	4313      	orrs	r3, r2
 8007738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800773a:	f000 f823 	bl	8007784 <HAL_RCC_GetSysClockFreq>
 800773e:	4602      	mov	r2, r0
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <HAL_RCC_ClockConfig+0x258>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	091b      	lsrs	r3, r3, #4
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	490b      	ldr	r1, [pc, #44]	; (8007778 <HAL_RCC_ClockConfig+0x25c>)
 800774c:	5ccb      	ldrb	r3, [r1, r3]
 800774e:	fa22 f303 	lsr.w	r3, r2, r3
 8007752:	4a0a      	ldr	r2, [pc, #40]	; (800777c <HAL_RCC_ClockConfig+0x260>)
 8007754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007756:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_RCC_ClockConfig+0x264>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff f8aa 	bl	80068b4 <HAL_InitTick>
 8007760:	4603      	mov	r3, r0
 8007762:	72fb      	strb	r3, [r7, #11]

  return status;
 8007764:	7afb      	ldrb	r3, [r7, #11]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40023c00 	.word	0x40023c00
 8007774:	40023800 	.word	0x40023800
 8007778:	0800f8dc 	.word	0x0800f8dc
 800777c:	20000004 	.word	0x20000004
 8007780:	20000044 	.word	0x20000044

08007784 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007788:	b08e      	sub	sp, #56	; 0x38
 800778a:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800778c:	4b58      	ldr	r3, [pc, #352]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	f003 030c 	and.w	r3, r3, #12
 8007798:	2b0c      	cmp	r3, #12
 800779a:	d00d      	beq.n	80077b8 <HAL_RCC_GetSysClockFreq+0x34>
 800779c:	2b0c      	cmp	r3, #12
 800779e:	f200 8092 	bhi.w	80078c6 <HAL_RCC_GetSysClockFreq+0x142>
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d002      	beq.n	80077ac <HAL_RCC_GetSysClockFreq+0x28>
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d003      	beq.n	80077b2 <HAL_RCC_GetSysClockFreq+0x2e>
 80077aa:	e08c      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077ac:	4b51      	ldr	r3, [pc, #324]	; (80078f4 <HAL_RCC_GetSysClockFreq+0x170>)
 80077ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80077b0:	e097      	b.n	80078e2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80077b2:	4b51      	ldr	r3, [pc, #324]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80077b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80077b6:	e094      	b.n	80078e2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	0c9b      	lsrs	r3, r3, #18
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	4b4e      	ldr	r3, [pc, #312]	; (80078fc <HAL_RCC_GetSysClockFreq+0x178>)
 80077c2:	5c9b      	ldrb	r3, [r3, r2]
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	0d9b      	lsrs	r3, r3, #22
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	3301      	adds	r3, #1
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077d2:	4b47      	ldr	r3, [pc, #284]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d021      	beq.n	8007822 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	2200      	movs	r2, #0
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	61fa      	str	r2, [r7, #28]
 80077e6:	4b44      	ldr	r3, [pc, #272]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80077e8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80077ec:	464a      	mov	r2, r9
 80077ee:	fb03 f202 	mul.w	r2, r3, r2
 80077f2:	2300      	movs	r3, #0
 80077f4:	4644      	mov	r4, r8
 80077f6:	fb04 f303 	mul.w	r3, r4, r3
 80077fa:	4413      	add	r3, r2
 80077fc:	4a3e      	ldr	r2, [pc, #248]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x174>)
 80077fe:	4644      	mov	r4, r8
 8007800:	fba4 0102 	umull	r0, r1, r4, r2
 8007804:	440b      	add	r3, r1
 8007806:	4619      	mov	r1, r3
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	2200      	movs	r2, #0
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	617a      	str	r2, [r7, #20]
 8007810:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007814:	f7f8 fcba 	bl	800018c <__aeabi_uldivmod>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4613      	mov	r3, r2
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
 8007820:	e04e      	b.n	80078c0 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	2200      	movs	r2, #0
 8007826:	469a      	mov	sl, r3
 8007828:	4693      	mov	fp, r2
 800782a:	4652      	mov	r2, sl
 800782c:	465b      	mov	r3, fp
 800782e:	f04f 0000 	mov.w	r0, #0
 8007832:	f04f 0100 	mov.w	r1, #0
 8007836:	0159      	lsls	r1, r3, #5
 8007838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800783c:	0150      	lsls	r0, r2, #5
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	ebb2 080a 	subs.w	r8, r2, sl
 8007846:	eb63 090b 	sbc.w	r9, r3, fp
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800785a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800785e:	ebb2 0408 	subs.w	r4, r2, r8
 8007862:	eb63 0509 	sbc.w	r5, r3, r9
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	00eb      	lsls	r3, r5, #3
 8007870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007874:	00e2      	lsls	r2, r4, #3
 8007876:	4614      	mov	r4, r2
 8007878:	461d      	mov	r5, r3
 800787a:	eb14 030a 	adds.w	r3, r4, sl
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	eb45 030b 	adc.w	r3, r5, fp
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	f04f 0300 	mov.w	r3, #0
 800788e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007892:	4629      	mov	r1, r5
 8007894:	028b      	lsls	r3, r1, #10
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	4604      	mov	r4, r0
 800789c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80078a0:	4601      	mov	r1, r0
 80078a2:	028a      	lsls	r2, r1, #10
 80078a4:	4610      	mov	r0, r2
 80078a6:	4619      	mov	r1, r3
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	2200      	movs	r2, #0
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	60fa      	str	r2, [r7, #12]
 80078b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078b4:	f7f8 fc6a 	bl	800018c <__aeabi_uldivmod>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4613      	mov	r3, r2
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 80078c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80078c4:	e00d      	b.n	80078e2 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80078c6:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	0b5b      	lsrs	r3, r3, #13
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	3301      	adds	r3, #1
 80078d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80078da:	fa02 f303 	lsl.w	r3, r2, r3
 80078de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80078e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3738      	adds	r7, #56	; 0x38
 80078e8:	46bd      	mov	sp, r7
 80078ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ee:	bf00      	nop
 80078f0:	40023800 	.word	0x40023800
 80078f4:	00f42400 	.word	0x00f42400
 80078f8:	016e3600 	.word	0x016e3600
 80078fc:	0800f8d0 	.word	0x0800f8d0

08007900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <HAL_RCC_GetHCLKFreq+0x10>)
 8007906:	681b      	ldr	r3, [r3, #0]
}
 8007908:	4618      	mov	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr
 8007910:	20000004 	.word	0x20000004

08007914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007918:	f7ff fff2 	bl	8007900 <HAL_RCC_GetHCLKFreq>
 800791c:	4602      	mov	r2, r0
 800791e:	4b05      	ldr	r3, [pc, #20]	; (8007934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	0a1b      	lsrs	r3, r3, #8
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	4903      	ldr	r1, [pc, #12]	; (8007938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800792a:	5ccb      	ldrb	r3, [r1, r3]
 800792c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007930:	4618      	mov	r0, r3
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40023800 	.word	0x40023800
 8007938:	0800f8ec 	.word	0x0800f8ec

0800793c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007940:	f7ff ffde 	bl	8007900 <HAL_RCC_GetHCLKFreq>
 8007944:	4602      	mov	r2, r0
 8007946:	4b05      	ldr	r3, [pc, #20]	; (800795c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	0adb      	lsrs	r3, r3, #11
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	4903      	ldr	r1, [pc, #12]	; (8007960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007952:	5ccb      	ldrb	r3, [r1, r3]
 8007954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007958:	4618      	mov	r0, r3
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40023800 	.word	0x40023800
 8007960:	0800f8ec 	.word	0x0800f8ec

08007964 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007970:	4b29      	ldr	r3, [pc, #164]	; (8007a18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d12c      	bne.n	80079d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800797c:	4b26      	ldr	r3, [pc, #152]	; (8007a18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007988:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	e016      	b.n	80079c2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007994:	4b20      	ldr	r3, [pc, #128]	; (8007a18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800799a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799e:	6253      	str	r3, [r2, #36]	; 0x24
 80079a0:	4b1d      	ldr	r3, [pc, #116]	; (8007a18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80079ac:	4b1b      	ldr	r3, [pc, #108]	; (8007a1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80079b4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80079b6:	4b18      	ldr	r3, [pc, #96]	; (8007a18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80079bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079c0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80079c8:	d105      	bne.n	80079d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079d0:	d101      	bne.n	80079d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80079d2:	2301      	movs	r3, #1
 80079d4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d105      	bne.n	80079e8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079e2:	f043 0304 	orr.w	r3, r3, #4
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f023 0201 	bic.w	r2, r3, #1
 80079f0:	490b      	ldr	r1, [pc, #44]	; (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d001      	beq.n	8007a0a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	40023800 	.word	0x40023800
 8007a1c:	40007000 	.word	0x40007000
 8007a20:	40023c00 	.word	0x40023c00

08007a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e07b      	b.n	8007b2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d108      	bne.n	8007a50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a46:	d009      	beq.n	8007a5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	61da      	str	r2, [r3, #28]
 8007a4e:	e005      	b.n	8007a5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7fc fe9c 	bl	80047b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007acc:	431a      	orrs	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae0:	ea42 0103 	orr.w	r1, r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	0c1b      	lsrs	r3, r3, #16
 8007afa:	f003 0104 	and.w	r1, r3, #4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	f003 0210 	and.w	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b088      	sub	sp, #32
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_SPI_Transmit+0x22>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e126      	b.n	8007da6 <HAL_SPI_Transmit+0x270>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b60:	f7fe fef4 	bl	800694c <HAL_GetTick>
 8007b64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d002      	beq.n	8007b7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007b76:	2302      	movs	r3, #2
 8007b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b7a:	e10b      	b.n	8007d94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_SPI_Transmit+0x52>
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d102      	bne.n	8007b8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b8c:	e102      	b.n	8007d94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2203      	movs	r2, #3
 8007b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	88fa      	ldrh	r2, [r7, #6]
 8007ba6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	88fa      	ldrh	r2, [r7, #6]
 8007bac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd4:	d10f      	bne.n	8007bf6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007be4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c00:	2b40      	cmp	r3, #64	; 0x40
 8007c02:	d007      	beq.n	8007c14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c1c:	d14b      	bne.n	8007cb6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <HAL_SPI_Transmit+0xf6>
 8007c26:	8afb      	ldrh	r3, [r7, #22]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d13e      	bne.n	8007caa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	881a      	ldrh	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	1c9a      	adds	r2, r3, #2
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007c50:	e02b      	b.n	8007caa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d112      	bne.n	8007c86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	881a      	ldrh	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c84:	e011      	b.n	8007caa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c86:	f7fe fe61 	bl	800694c <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d803      	bhi.n	8007c9e <HAL_SPI_Transmit+0x168>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9c:	d102      	bne.n	8007ca4 <HAL_SPI_Transmit+0x16e>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ca8:	e074      	b.n	8007d94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1ce      	bne.n	8007c52 <HAL_SPI_Transmit+0x11c>
 8007cb4:	e04c      	b.n	8007d50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_SPI_Transmit+0x18e>
 8007cbe:	8afb      	ldrh	r3, [r7, #22]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d140      	bne.n	8007d46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007cea:	e02c      	b.n	8007d46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d113      	bne.n	8007d22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	330c      	adds	r3, #12
 8007d04:	7812      	ldrb	r2, [r2, #0]
 8007d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d20:	e011      	b.n	8007d46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d22:	f7fe fe13 	bl	800694c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d803      	bhi.n	8007d3a <HAL_SPI_Transmit+0x204>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d38:	d102      	bne.n	8007d40 <HAL_SPI_Transmit+0x20a>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d44:	e026      	b.n	8007d94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1cd      	bne.n	8007cec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fa55 	bl	8008204 <SPI_EndRxTxTransaction>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e000      	b.n	8007d94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007d92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007da4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b08c      	sub	sp, #48	; 0x30
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x26>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e18a      	b.n	80080ea <HAL_SPI_TransmitReceive+0x33c>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ddc:	f7fe fdb6 	bl	800694c <HAL_GetTick>
 8007de0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007df2:	887b      	ldrh	r3, [r7, #2]
 8007df4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007df6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d00f      	beq.n	8007e1e <HAL_SPI_TransmitReceive+0x70>
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e04:	d107      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <HAL_SPI_TransmitReceive+0x68>
 8007e0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d003      	beq.n	8007e1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e16:	2302      	movs	r3, #2
 8007e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e1c:	e15b      	b.n	80080d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <HAL_SPI_TransmitReceive+0x82>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_SPI_TransmitReceive+0x82>
 8007e2a:	887b      	ldrh	r3, [r7, #2]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d103      	bne.n	8007e38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e36:	e14e      	b.n	80080d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d003      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2205      	movs	r2, #5
 8007e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	887a      	ldrh	r2, [r7, #2]
 8007e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	887a      	ldrh	r2, [r7, #2]
 8007e62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	887a      	ldrh	r2, [r7, #2]
 8007e6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	887a      	ldrh	r2, [r7, #2]
 8007e74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d007      	beq.n	8007ea0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea8:	d178      	bne.n	8007f9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <HAL_SPI_TransmitReceive+0x10a>
 8007eb2:	8b7b      	ldrh	r3, [r7, #26]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d166      	bne.n	8007f86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebc:	881a      	ldrh	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	1c9a      	adds	r2, r3, #2
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007edc:	e053      	b.n	8007f86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d11b      	bne.n	8007f24 <HAL_SPI_TransmitReceive+0x176>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d016      	beq.n	8007f24 <HAL_SPI_TransmitReceive+0x176>
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d113      	bne.n	8007f24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f00:	881a      	ldrh	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0c:	1c9a      	adds	r2, r3, #2
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d119      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x1b8>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d014      	beq.n	8007f66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	b292      	uxth	r2, r2
 8007f48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	1c9a      	adds	r2, r3, #2
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f62:	2301      	movs	r3, #1
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f66:	f7fe fcf1 	bl	800694c <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d807      	bhi.n	8007f86 <HAL_SPI_TransmitReceive+0x1d8>
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d003      	beq.n	8007f86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f84:	e0a7      	b.n	80080d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1a6      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x130>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1a1      	bne.n	8007ede <HAL_SPI_TransmitReceive+0x130>
 8007f9a:	e07c      	b.n	8008096 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d002      	beq.n	8007faa <HAL_SPI_TransmitReceive+0x1fc>
 8007fa4:	8b7b      	ldrh	r3, [r7, #26]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d16b      	bne.n	8008082 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fd0:	e057      	b.n	8008082 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d11c      	bne.n	800801a <HAL_SPI_TransmitReceive+0x26c>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d017      	beq.n	800801a <HAL_SPI_TransmitReceive+0x26c>
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d114      	bne.n	800801a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	7812      	ldrb	r2, [r2, #0]
 8007ffc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800c:	b29b      	uxth	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b01      	cmp	r3, #1
 8008026:	d119      	bne.n	800805c <HAL_SPI_TransmitReceive+0x2ae>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800802c:	b29b      	uxth	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d014      	beq.n	800805c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	b2d2      	uxtb	r2, r2
 800803e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800804e:	b29b      	uxth	r3, r3
 8008050:	3b01      	subs	r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008058:	2301      	movs	r3, #1
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800805c:	f7fe fc76 	bl	800694c <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008068:	429a      	cmp	r2, r3
 800806a:	d803      	bhi.n	8008074 <HAL_SPI_TransmitReceive+0x2c6>
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008072:	d102      	bne.n	800807a <HAL_SPI_TransmitReceive+0x2cc>
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	2b00      	cmp	r3, #0
 8008078:	d103      	bne.n	8008082 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008080:	e029      	b.n	80080d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1a2      	bne.n	8007fd2 <HAL_SPI_TransmitReceive+0x224>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d19d      	bne.n	8007fd2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008098:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f8b2 	bl	8008204 <SPI_EndRxTxTransaction>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d006      	beq.n	80080b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2220      	movs	r2, #32
 80080b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080b2:	e010      	b.n	80080d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10b      	bne.n	80080d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	617b      	str	r3, [r7, #20]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	e000      	b.n	80080d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80080d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3730      	adds	r7, #48	; 0x30
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	4613      	mov	r3, r2
 8008102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008104:	f7fe fc22 	bl	800694c <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4413      	add	r3, r2
 8008112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008114:	f7fe fc1a 	bl	800694c <HAL_GetTick>
 8008118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800811a:	4b39      	ldr	r3, [pc, #228]	; (8008200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	015b      	lsls	r3, r3, #5
 8008120:	0d1b      	lsrs	r3, r3, #20
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	fb02 f303 	mul.w	r3, r2, r3
 8008128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800812a:	e054      	b.n	80081d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d050      	beq.n	80081d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008134:	f7fe fc0a 	bl	800694c <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	69fa      	ldr	r2, [r7, #28]
 8008140:	429a      	cmp	r2, r3
 8008142:	d902      	bls.n	800814a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d13d      	bne.n	80081c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008162:	d111      	bne.n	8008188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816c:	d004      	beq.n	8008178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008176:	d107      	bne.n	8008188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008190:	d10f      	bne.n	80081b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e017      	b.n	80081f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4013      	ands	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d19b      	bne.n	800812c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20000004 	.word	0x20000004

08008204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008210:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <SPI_EndRxTxTransaction+0x7c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <SPI_EndRxTxTransaction+0x80>)
 8008216:	fba2 2303 	umull	r2, r3, r2, r3
 800821a:	0d5b      	lsrs	r3, r3, #21
 800821c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008220:	fb02 f303 	mul.w	r3, r2, r3
 8008224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800822e:	d112      	bne.n	8008256 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2200      	movs	r2, #0
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7ff ff5a 	bl	80080f4 <SPI_WaitFlagStateUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d016      	beq.n	8008274 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824a:	f043 0220 	orr.w	r2, r3, #32
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e00f      	b.n	8008276 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	3b01      	subs	r3, #1
 8008260:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d0f2      	beq.n	8008256 <SPI_EndRxTxTransaction+0x52>
 8008270:	e000      	b.n	8008274 <SPI_EndRxTxTransaction+0x70>
        break;
 8008272:	bf00      	nop
  }

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000004 	.word	0x20000004
 8008284:	165e9f81 	.word	0x165e9f81

08008288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e031      	b.n	80082fe <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fc fac4 	bl	800483c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3304      	adds	r3, #4
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f000 f92c 	bl	8008524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b01      	cmp	r3, #1
 800831a:	d001      	beq.n	8008320 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e032      	b.n	8008386 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008330:	d00e      	beq.n	8008350 <HAL_TIM_Base_Start+0x48>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a16      	ldr	r2, [pc, #88]	; (8008390 <HAL_TIM_Base_Start+0x88>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d009      	beq.n	8008350 <HAL_TIM_Base_Start+0x48>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a14      	ldr	r2, [pc, #80]	; (8008394 <HAL_TIM_Base_Start+0x8c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d004      	beq.n	8008350 <HAL_TIM_Base_Start+0x48>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a13      	ldr	r2, [pc, #76]	; (8008398 <HAL_TIM_Base_Start+0x90>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d111      	bne.n	8008374 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b06      	cmp	r3, #6
 8008360:	d010      	beq.n	8008384 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f042 0201 	orr.w	r2, r2, #1
 8008370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008372:	e007      	b.n	8008384 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0201 	orr.w	r2, r2, #1
 8008382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr
 8008390:	40000400 	.word	0x40000400
 8008394:	40000800 	.word	0x40000800
 8008398:	40010800 	.word	0x40010800

0800839c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_TIM_ConfigClockSource+0x18>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e0b3      	b.n	800851c <HAL_TIM_ConfigClockSource+0x180>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ec:	d03e      	beq.n	800846c <HAL_TIM_ConfigClockSource+0xd0>
 80083ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083f2:	f200 8087 	bhi.w	8008504 <HAL_TIM_ConfigClockSource+0x168>
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fa:	f000 8085 	beq.w	8008508 <HAL_TIM_ConfigClockSource+0x16c>
 80083fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008402:	d87f      	bhi.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
 8008404:	2b70      	cmp	r3, #112	; 0x70
 8008406:	d01a      	beq.n	800843e <HAL_TIM_ConfigClockSource+0xa2>
 8008408:	2b70      	cmp	r3, #112	; 0x70
 800840a:	d87b      	bhi.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
 800840c:	2b60      	cmp	r3, #96	; 0x60
 800840e:	d050      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x116>
 8008410:	2b60      	cmp	r3, #96	; 0x60
 8008412:	d877      	bhi.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
 8008414:	2b50      	cmp	r3, #80	; 0x50
 8008416:	d03c      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0xf6>
 8008418:	2b50      	cmp	r3, #80	; 0x50
 800841a:	d873      	bhi.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
 800841c:	2b40      	cmp	r3, #64	; 0x40
 800841e:	d058      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x136>
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	d86f      	bhi.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
 8008424:	2b30      	cmp	r3, #48	; 0x30
 8008426:	d064      	beq.n	80084f2 <HAL_TIM_ConfigClockSource+0x156>
 8008428:	2b30      	cmp	r3, #48	; 0x30
 800842a:	d86b      	bhi.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
 800842c:	2b20      	cmp	r3, #32
 800842e:	d060      	beq.n	80084f2 <HAL_TIM_ConfigClockSource+0x156>
 8008430:	2b20      	cmp	r3, #32
 8008432:	d867      	bhi.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d05c      	beq.n	80084f2 <HAL_TIM_ConfigClockSource+0x156>
 8008438:	2b10      	cmp	r3, #16
 800843a:	d05a      	beq.n	80084f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800843c:	e062      	b.n	8008504 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	6899      	ldr	r1, [r3, #8]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f000 f950 	bl	80086f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008460:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	609a      	str	r2, [r3, #8]
      break;
 800846a:	e04e      	b.n	800850a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	6899      	ldr	r1, [r3, #8]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f000 f939 	bl	80086f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800848e:	609a      	str	r2, [r3, #8]
      break;
 8008490:	e03b      	b.n	800850a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 f8b0 	bl	8008604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2150      	movs	r1, #80	; 0x50
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f907 	bl	80086be <TIM_ITRx_SetConfig>
      break;
 80084b0:	e02b      	b.n	800850a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6859      	ldr	r1, [r3, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	461a      	mov	r2, r3
 80084c0:	f000 f8ce 	bl	8008660 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2160      	movs	r1, #96	; 0x60
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f8f7 	bl	80086be <TIM_ITRx_SetConfig>
      break;
 80084d0:	e01b      	b.n	800850a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	6859      	ldr	r1, [r3, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	461a      	mov	r2, r3
 80084e0:	f000 f890 	bl	8008604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2140      	movs	r1, #64	; 0x40
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f8e7 	bl	80086be <TIM_ITRx_SetConfig>
      break;
 80084f0:	e00b      	b.n	800850a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f000 f8de 	bl	80086be <TIM_ITRx_SetConfig>
        break;
 8008502:	e002      	b.n	800850a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008508:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853a:	d00f      	beq.n	800855c <TIM_Base_SetConfig+0x38>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a2b      	ldr	r2, [pc, #172]	; (80085ec <TIM_Base_SetConfig+0xc8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d00b      	beq.n	800855c <TIM_Base_SetConfig+0x38>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a2a      	ldr	r2, [pc, #168]	; (80085f0 <TIM_Base_SetConfig+0xcc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d007      	beq.n	800855c <TIM_Base_SetConfig+0x38>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a29      	ldr	r2, [pc, #164]	; (80085f4 <TIM_Base_SetConfig+0xd0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_Base_SetConfig+0x38>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a28      	ldr	r2, [pc, #160]	; (80085f8 <TIM_Base_SetConfig+0xd4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d108      	bne.n	800856e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008574:	d017      	beq.n	80085a6 <TIM_Base_SetConfig+0x82>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <TIM_Base_SetConfig+0xc8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <TIM_Base_SetConfig+0x82>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <TIM_Base_SetConfig+0xcc>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00f      	beq.n	80085a6 <TIM_Base_SetConfig+0x82>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a1a      	ldr	r2, [pc, #104]	; (80085f4 <TIM_Base_SetConfig+0xd0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00b      	beq.n	80085a6 <TIM_Base_SetConfig+0x82>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a19      	ldr	r2, [pc, #100]	; (80085f8 <TIM_Base_SetConfig+0xd4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d007      	beq.n	80085a6 <TIM_Base_SetConfig+0x82>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a18      	ldr	r2, [pc, #96]	; (80085fc <TIM_Base_SetConfig+0xd8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_Base_SetConfig+0x82>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a17      	ldr	r2, [pc, #92]	; (8008600 <TIM_Base_SetConfig+0xdc>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d108      	bne.n	80085b8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	615a      	str	r2, [r3, #20]
}
 80085e2:	bf00      	nop
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr
 80085ec:	40000400 	.word	0x40000400
 80085f0:	40000800 	.word	0x40000800
 80085f4:	40000c00 	.word	0x40000c00
 80085f8:	40010800 	.word	0x40010800
 80085fc:	40010c00 	.word	0x40010c00
 8008600:	40011000 	.word	0x40011000

08008604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f023 0201 	bic.w	r2, r3, #1
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800862e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	4313      	orrs	r3, r2
 8008638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f023 030a 	bic.w	r3, r3, #10
 8008640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr

08008660 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f023 0210 	bic.w	r2, r3, #16
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800868a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	031b      	lsls	r3, r3, #12
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800869c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	011b      	lsls	r3, r3, #4
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	621a      	str	r2, [r3, #32]
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr

080086be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086be:	b480      	push	{r7}
 80086c0:	b085      	sub	sp, #20
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	f043 0307 	orr.w	r3, r3, #7
 80086e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	609a      	str	r2, [r3, #8]
}
 80086e8:	bf00      	nop
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr

080086f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b087      	sub	sp, #28
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
 80086fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800870c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	021a      	lsls	r2, r3, #8
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	431a      	orrs	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4313      	orrs	r3, r2
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	4313      	orrs	r3, r2
 800871e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	609a      	str	r2, [r3, #8]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr

08008730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e03f      	b.n	80087c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7fc f88e 	bl	8004878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2224      	movs	r2, #36	; 0x24
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68da      	ldr	r2, [r3, #12]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f905 	bl	8008984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	695a      	ldr	r2, [r3, #20]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b08a      	sub	sp, #40	; 0x28
 80087ce:	af02      	add	r7, sp, #8
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	603b      	str	r3, [r7, #0]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d17c      	bne.n	80088e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HAL_UART_Transmit+0x2c>
 80087f0:	88fb      	ldrh	r3, [r7, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e075      	b.n	80088e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_UART_Transmit+0x3e>
 8008804:	2302      	movs	r3, #2
 8008806:	e06e      	b.n	80088e6 <HAL_UART_Transmit+0x11c>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2221      	movs	r2, #33	; 0x21
 800881a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800881e:	f7fe f895 	bl	800694c <HAL_GetTick>
 8008822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	88fa      	ldrh	r2, [r7, #6]
 8008828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	88fa      	ldrh	r2, [r7, #6]
 800882e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008838:	d108      	bne.n	800884c <HAL_UART_Transmit+0x82>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	e003      	b.n	8008854 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800885c:	e02a      	b.n	80088b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2200      	movs	r2, #0
 8008866:	2180      	movs	r1, #128	; 0x80
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f840 	bl	80088ee <UART_WaitOnFlagUntilTimeout>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e036      	b.n	80088e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10b      	bne.n	8008896 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800888c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	3302      	adds	r3, #2
 8008892:	61bb      	str	r3, [r7, #24]
 8008894:	e007      	b.n	80088a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	781a      	ldrb	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	3301      	adds	r3, #1
 80088a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1cf      	bne.n	800885e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2200      	movs	r2, #0
 80088c6:	2140      	movs	r1, #64	; 0x40
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f810 	bl	80088ee <UART_WaitOnFlagUntilTimeout>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e006      	b.n	80088e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e000      	b.n	80088e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088e4:	2302      	movs	r3, #2
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	603b      	str	r3, [r7, #0]
 80088fa:	4613      	mov	r3, r2
 80088fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088fe:	e02c      	b.n	800895a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008906:	d028      	beq.n	800895a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0x30>
 800890e:	f7fe f81d 	bl	800694c <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	429a      	cmp	r2, r3
 800891c:	d21d      	bcs.n	800895a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800892c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	695a      	ldr	r2, [r3, #20]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e00f      	b.n	800897a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4013      	ands	r3, r2
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	bf0c      	ite	eq
 800896a:	2301      	moveq	r3, #1
 800896c:	2300      	movne	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	429a      	cmp	r2, r3
 8008976:	d0c3      	beq.n	8008900 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80089c4:	f023 030c 	bic.w	r3, r3, #12
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6812      	ldr	r2, [r2, #0]
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	430b      	orrs	r3, r1
 80089d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699a      	ldr	r2, [r3, #24]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a55      	ldr	r2, [pc, #340]	; (8008b44 <UART_SetConfig+0x1c0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d103      	bne.n	80089fa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80089f2:	f7fe ffa3 	bl	800793c <HAL_RCC_GetPCLK2Freq>
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	e002      	b.n	8008a00 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80089fa:	f7fe ff8b 	bl	8007914 <HAL_RCC_GetPCLK1Freq>
 80089fe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a08:	d14c      	bne.n	8008aa4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009a      	lsls	r2, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	005b      	lsls	r3, r3, #1
 8008a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a20:	4a49      	ldr	r2, [pc, #292]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008a22:	fba2 2303 	umull	r2, r3, r2, r3
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	0119      	lsls	r1, r3, #4
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009a      	lsls	r2, r3, #2
 8008a34:	441a      	add	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a40:	4b41      	ldr	r3, [pc, #260]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008a42:	fba3 0302 	umull	r0, r3, r3, r2
 8008a46:	095b      	lsrs	r3, r3, #5
 8008a48:	2064      	movs	r0, #100	; 0x64
 8008a4a:	fb00 f303 	mul.w	r3, r0, r3
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	3332      	adds	r3, #50	; 0x32
 8008a54:	4a3c      	ldr	r2, [pc, #240]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008a56:	fba2 2303 	umull	r2, r3, r2, r3
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a62:	4419      	add	r1, r3
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009a      	lsls	r2, r3, #2
 8008a6e:	441a      	add	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a7a:	4b33      	ldr	r3, [pc, #204]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008a7c:	fba3 0302 	umull	r0, r3, r3, r2
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	2064      	movs	r0, #100	; 0x64
 8008a84:	fb00 f303 	mul.w	r3, r0, r3
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	3332      	adds	r3, #50	; 0x32
 8008a8e:	4a2e      	ldr	r2, [pc, #184]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008a90:	fba2 2303 	umull	r2, r3, r2, r3
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	f003 0207 	and.w	r2, r3, #7
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	440a      	add	r2, r1
 8008aa0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008aa2:	e04a      	b.n	8008b3a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009a      	lsls	r2, r3, #2
 8008aae:	441a      	add	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aba:	4a23      	ldr	r2, [pc, #140]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008abc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac0:	095b      	lsrs	r3, r3, #5
 8008ac2:	0119      	lsls	r1, r3, #4
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009a      	lsls	r2, r3, #2
 8008ace:	441a      	add	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ada:	4b1b      	ldr	r3, [pc, #108]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008adc:	fba3 0302 	umull	r0, r3, r3, r2
 8008ae0:	095b      	lsrs	r3, r3, #5
 8008ae2:	2064      	movs	r0, #100	; 0x64
 8008ae4:	fb00 f303 	mul.w	r3, r0, r3
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	3332      	adds	r3, #50	; 0x32
 8008aee:	4a16      	ldr	r2, [pc, #88]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008af0:	fba2 2303 	umull	r2, r3, r2, r3
 8008af4:	095b      	lsrs	r3, r3, #5
 8008af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008afa:	4419      	add	r1, r3
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4613      	mov	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	009a      	lsls	r2, r3, #2
 8008b06:	441a      	add	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b12:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008b14:	fba3 0302 	umull	r0, r3, r3, r2
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	2064      	movs	r0, #100	; 0x64
 8008b1c:	fb00 f303 	mul.w	r3, r0, r3
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	3332      	adds	r3, #50	; 0x32
 8008b26:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <UART_SetConfig+0x1c4>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	095b      	lsrs	r3, r3, #5
 8008b2e:	f003 020f 	and.w	r2, r3, #15
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	440a      	add	r2, r1
 8008b38:	609a      	str	r2, [r3, #8]
}
 8008b3a:	bf00      	nop
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40013800 	.word	0x40013800
 8008b48:	51eb851f 	.word	0x51eb851f

08008b4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <MX_FATFS_Init+0x18>)
 8008b52:	4805      	ldr	r0, [pc, #20]	; (8008b68 <MX_FATFS_Init+0x1c>)
 8008b54:	f003 f82e 	bl	800bbb4 <FATFS_LinkDriver>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4b03      	ldr	r3, [pc, #12]	; (8008b6c <MX_FATFS_Init+0x20>)
 8008b5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b60:	bf00      	nop
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	2000326c 	.word	0x2000326c
 8008b68:	2000004c 	.word	0x2000004c
 8008b6c:	20003268 	.word	0x20003268

08008b70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008b74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr

08008b7e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	4603      	mov	r3, r0
 8008b86:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fb f834 	bl	8003bf8 <SD_disk_initialize>
 8008b90:	4603      	mov	r3, r0
 8008b92:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_status(pdrv);
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fb f90b 	bl	8003dc4 <SD_disk_status>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	603b      	str	r3, [r7, #0]
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8008bca:	7bf8      	ldrb	r0, [r7, #15]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	f7fb f90b 	bl	8003dec <SD_disk_read>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8008bf2:	7bf8      	ldrb	r0, [r7, #15]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	f7fb f961 	bl	8003ec0 <SD_disk_write>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	4603      	mov	r3, r0
 8008c12:	603a      	str	r2, [r7, #0]
 8008c14:	71fb      	strb	r3, [r7, #7]
 8008c16:	460b      	mov	r3, r1
 8008c18:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008c1a:	79fb      	ldrb	r3, [r7, #7]
 8008c1c:	79b9      	ldrb	r1, [r7, #6]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fb f9d1 	bl	8003fc8 <SD_disk_ioctl>
 8008c26:	4603      	mov	r3, r0
 8008c28:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	4a08      	ldr	r2, [pc, #32]	; (8008c64 <disk_status+0x30>)
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	79fa      	ldrb	r2, [r7, #7]
 8008c4c:	4905      	ldr	r1, [pc, #20]	; (8008c64 <disk_status+0x30>)
 8008c4e:	440a      	add	r2, r1
 8008c50:	7a12      	ldrb	r2, [r2, #8]
 8008c52:	4610      	mov	r0, r2
 8008c54:	4798      	blx	r3
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20003498 	.word	0x20003498

08008c68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	4a0d      	ldr	r2, [pc, #52]	; (8008cb0 <disk_initialize+0x48>)
 8008c7a:	5cd3      	ldrb	r3, [r2, r3]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d111      	bne.n	8008ca4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	4a0b      	ldr	r2, [pc, #44]	; (8008cb0 <disk_initialize+0x48>)
 8008c84:	2101      	movs	r1, #1
 8008c86:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <disk_initialize+0x48>)
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	79fa      	ldrb	r2, [r7, #7]
 8008c96:	4906      	ldr	r1, [pc, #24]	; (8008cb0 <disk_initialize+0x48>)
 8008c98:	440a      	add	r2, r1
 8008c9a:	7a12      	ldrb	r2, [r2, #8]
 8008c9c:	4610      	mov	r0, r2
 8008c9e:	4798      	blx	r3
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20003498 	.word	0x20003498

08008cb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008cb4:	b590      	push	{r4, r7, lr}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	607a      	str	r2, [r7, #4]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	4a0a      	ldr	r2, [pc, #40]	; (8008cf0 <disk_read+0x3c>)
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	689c      	ldr	r4, [r3, #8]
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4a07      	ldr	r2, [pc, #28]	; (8008cf0 <disk_read+0x3c>)
 8008cd4:	4413      	add	r3, r2
 8008cd6:	7a18      	ldrb	r0, [r3, #8]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	68b9      	ldr	r1, [r7, #8]
 8008cde:	47a0      	blx	r4
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd90      	pop	{r4, r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20003498 	.word	0x20003498

08008cf4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60b9      	str	r1, [r7, #8]
 8008cfc:	607a      	str	r2, [r7, #4]
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	4603      	mov	r3, r0
 8008d02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	4a0a      	ldr	r2, [pc, #40]	; (8008d30 <disk_write+0x3c>)
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	68dc      	ldr	r4, [r3, #12]
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4a07      	ldr	r2, [pc, #28]	; (8008d30 <disk_write+0x3c>)
 8008d14:	4413      	add	r3, r2
 8008d16:	7a18      	ldrb	r0, [r3, #8]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	68b9      	ldr	r1, [r7, #8]
 8008d1e:	47a0      	blx	r4
 8008d20:	4603      	mov	r3, r0
 8008d22:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd90      	pop	{r4, r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20003498 	.word	0x20003498

08008d34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	603a      	str	r2, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
 8008d40:	460b      	mov	r3, r1
 8008d42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <disk_ioctl+0x38>)
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	79fa      	ldrb	r2, [r7, #7]
 8008d52:	4906      	ldr	r1, [pc, #24]	; (8008d6c <disk_ioctl+0x38>)
 8008d54:	440a      	add	r2, r1
 8008d56:	7a10      	ldrb	r0, [r2, #8]
 8008d58:	79b9      	ldrb	r1, [r7, #6]
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4798      	blx	r3
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
  return res;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20003498 	.word	0x20003498

08008d70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d80:	89fb      	ldrh	r3, [r7, #14]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	b21a      	sxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	b21b      	sxth	r3, r3
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	b21b      	sxth	r3, r3
 8008d90:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d92:	89fb      	ldrh	r3, [r7, #14]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bc80      	pop	{r7}
 8008d9c:	4770      	bx	lr

08008d9e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	3303      	adds	r3, #3
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	3202      	adds	r2, #2
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	021b      	lsls	r3, r3, #8
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	3201      	adds	r2, #1
 8008dc4:	7812      	ldrb	r2, [r2, #0]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	7812      	ldrb	r2, [r2, #0]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60fb      	str	r3, [r7, #12]
	return rv;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr

08008de2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	1c5a      	adds	r2, r3, #1
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	887a      	ldrh	r2, [r7, #2]
 8008df6:	b2d2      	uxtb	r2, r2
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	887b      	ldrh	r3, [r7, #2]
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	607a      	str	r2, [r7, #4]
 8008e06:	887a      	ldrh	r2, [r7, #2]
 8008e08:	b2d2      	uxtb	r2, r2
 8008e0a:	701a      	strb	r2, [r3, #0]
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bc80      	pop	{r7}
 8008e14:	4770      	bx	lr

08008e16 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008e16:	b480      	push	{r7}
 8008e18:	b083      	sub	sp, #12
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	607a      	str	r2, [r7, #4]
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	b2d2      	uxtb	r2, r2
 8008e2a:	701a      	strb	r2, [r3, #0]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	0a1b      	lsrs	r3, r3, #8
 8008e54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	701a      	strb	r2, [r3, #0]
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bc80      	pop	{r7}
 8008e6a:	4770      	bx	lr

08008e6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00d      	beq.n	8008ea2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	1c53      	adds	r3, r2, #1
 8008e8a:	613b      	str	r3, [r7, #16]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	6179      	str	r1, [r7, #20]
 8008e92:	7812      	ldrb	r2, [r2, #0]
 8008e94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	607b      	str	r3, [r7, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f1      	bne.n	8008e86 <mem_cpy+0x1a>
	}
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	617a      	str	r2, [r7, #20]
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	b2d2      	uxtb	r2, r2
 8008ec6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	607b      	str	r3, [r7, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1f3      	bne.n	8008ebc <mem_set+0x10>
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr

08008ee0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008ee0:	b480      	push	{r7}
 8008ee2:	b089      	sub	sp, #36	; 0x24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	61fa      	str	r2, [r7, #28]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	4619      	mov	r1, r3
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	61ba      	str	r2, [r7, #24]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	1acb      	subs	r3, r1, r3
 8008f0c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3b01      	subs	r3, #1
 8008f12:	607b      	str	r3, [r7, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <mem_cmp+0x40>
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0eb      	beq.n	8008ef8 <mem_cmp+0x18>

	return r;
 8008f20:	697b      	ldr	r3, [r7, #20]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3724      	adds	r7, #36	; 0x24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr

08008f2c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008f36:	e002      	b.n	8008f3e <chk_chr+0x12>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	607b      	str	r3, [r7, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <chk_chr+0x26>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d1f2      	bne.n	8008f38 <chk_chr+0xc>
	return *str;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	781b      	ldrb	r3, [r3, #0]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	4770      	bx	lr

08008f60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60bb      	str	r3, [r7, #8]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	e029      	b.n	8008fc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f74:	4a26      	ldr	r2, [pc, #152]	; (8009010 <chk_lock+0xb0>)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	4413      	add	r3, r2
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d01d      	beq.n	8008fbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f82:	4a23      	ldr	r2, [pc, #140]	; (8009010 <chk_lock+0xb0>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	4413      	add	r3, r2
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d116      	bne.n	8008fc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008f94:	4a1e      	ldr	r2, [pc, #120]	; (8009010 <chk_lock+0xb0>)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	4413      	add	r3, r2
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d10c      	bne.n	8008fc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fa8:	4a19      	ldr	r2, [pc, #100]	; (8009010 <chk_lock+0xb0>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	4413      	add	r3, r2
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d102      	bne.n	8008fc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fbc:	e007      	b.n	8008fce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d9d2      	bls.n	8008f74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d109      	bne.n	8008fe8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <chk_lock+0x80>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d101      	bne.n	8008fe4 <chk_lock+0x84>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e010      	b.n	8009006 <chk_lock+0xa6>
 8008fe4:	2312      	movs	r3, #18
 8008fe6:	e00e      	b.n	8009006 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d108      	bne.n	8009000 <chk_lock+0xa0>
 8008fee:	4a08      	ldr	r2, [pc, #32]	; (8009010 <chk_lock+0xb0>)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	4413      	add	r3, r2
 8008ff6:	330c      	adds	r3, #12
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ffe:	d101      	bne.n	8009004 <chk_lock+0xa4>
 8009000:	2310      	movs	r3, #16
 8009002:	e000      	b.n	8009006 <chk_lock+0xa6>
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr
 8009010:	20003278 	.word	0x20003278

08009014 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800901a:	2300      	movs	r3, #0
 800901c:	607b      	str	r3, [r7, #4]
 800901e:	e002      	b.n	8009026 <enq_lock+0x12>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3301      	adds	r3, #1
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d806      	bhi.n	800903a <enq_lock+0x26>
 800902c:	4a08      	ldr	r2, [pc, #32]	; (8009050 <enq_lock+0x3c>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	011b      	lsls	r3, r3, #4
 8009032:	4413      	add	r3, r2
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1f2      	bne.n	8009020 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b02      	cmp	r3, #2
 800903e:	bf14      	ite	ne
 8009040:	2301      	movne	r3, #1
 8009042:	2300      	moveq	r3, #0
 8009044:	b2db      	uxtb	r3, r3
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr
 8009050:	20003278 	.word	0x20003278

08009054 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	e01f      	b.n	80090a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009064:	4a41      	ldr	r2, [pc, #260]	; (800916c <inc_lock+0x118>)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	4413      	add	r3, r2
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d113      	bne.n	800909e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009076:	4a3d      	ldr	r2, [pc, #244]	; (800916c <inc_lock+0x118>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	4413      	add	r3, r2
 800907e:	3304      	adds	r3, #4
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009086:	429a      	cmp	r2, r3
 8009088:	d109      	bne.n	800909e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800908a:	4a38      	ldr	r2, [pc, #224]	; (800916c <inc_lock+0x118>)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	4413      	add	r3, r2
 8009092:	3308      	adds	r3, #8
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800909a:	429a      	cmp	r2, r3
 800909c:	d006      	beq.n	80090ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3301      	adds	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d9dc      	bls.n	8009064 <inc_lock+0x10>
 80090aa:	e000      	b.n	80090ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d132      	bne.n	800911a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e002      	b.n	80090c0 <inc_lock+0x6c>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3301      	adds	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d806      	bhi.n	80090d4 <inc_lock+0x80>
 80090c6:	4a29      	ldr	r2, [pc, #164]	; (800916c <inc_lock+0x118>)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	011b      	lsls	r3, r3, #4
 80090cc:	4413      	add	r3, r2
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1f2      	bne.n	80090ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d101      	bne.n	80090de <inc_lock+0x8a>
 80090da:	2300      	movs	r3, #0
 80090dc:	e040      	b.n	8009160 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4922      	ldr	r1, [pc, #136]	; (800916c <inc_lock+0x118>)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	440b      	add	r3, r1
 80090ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	491e      	ldr	r1, [pc, #120]	; (800916c <inc_lock+0x118>)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	440b      	add	r3, r1
 80090f8:	3304      	adds	r3, #4
 80090fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	695a      	ldr	r2, [r3, #20]
 8009100:	491a      	ldr	r1, [pc, #104]	; (800916c <inc_lock+0x118>)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	440b      	add	r3, r1
 8009108:	3308      	adds	r3, #8
 800910a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800910c:	4a17      	ldr	r2, [pc, #92]	; (800916c <inc_lock+0x118>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	4413      	add	r3, r2
 8009114:	330c      	adds	r3, #12
 8009116:	2200      	movs	r2, #0
 8009118:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d009      	beq.n	8009134 <inc_lock+0xe0>
 8009120:	4a12      	ldr	r2, [pc, #72]	; (800916c <inc_lock+0x118>)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	4413      	add	r3, r2
 8009128:	330c      	adds	r3, #12
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <inc_lock+0xe0>
 8009130:	2300      	movs	r3, #0
 8009132:	e015      	b.n	8009160 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d108      	bne.n	800914c <inc_lock+0xf8>
 800913a:	4a0c      	ldr	r2, [pc, #48]	; (800916c <inc_lock+0x118>)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	4413      	add	r3, r2
 8009142:	330c      	adds	r3, #12
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	3301      	adds	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	e001      	b.n	8009150 <inc_lock+0xfc>
 800914c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009150:	4906      	ldr	r1, [pc, #24]	; (800916c <inc_lock+0x118>)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	440b      	add	r3, r1
 8009158:	330c      	adds	r3, #12
 800915a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3301      	adds	r3, #1
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	bc80      	pop	{r7}
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	20003278 	.word	0x20003278

08009170 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3b01      	subs	r3, #1
 800917c:	607b      	str	r3, [r7, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d825      	bhi.n	80091d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009184:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <dec_lock+0x70>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	4413      	add	r3, r2
 800918c:	330c      	adds	r3, #12
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009192:	89fb      	ldrh	r3, [r7, #14]
 8009194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009198:	d101      	bne.n	800919e <dec_lock+0x2e>
 800919a:	2300      	movs	r3, #0
 800919c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800919e:	89fb      	ldrh	r3, [r7, #14]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <dec_lock+0x3a>
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091aa:	4a0d      	ldr	r2, [pc, #52]	; (80091e0 <dec_lock+0x70>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	4413      	add	r3, r2
 80091b2:	330c      	adds	r3, #12
 80091b4:	89fa      	ldrh	r2, [r7, #14]
 80091b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80091b8:	89fb      	ldrh	r3, [r7, #14]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d105      	bne.n	80091ca <dec_lock+0x5a>
 80091be:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <dec_lock+0x70>)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	011b      	lsls	r3, r3, #4
 80091c4:	4413      	add	r3, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	737b      	strb	r3, [r7, #13]
 80091ce:	e001      	b.n	80091d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80091d0:	2302      	movs	r3, #2
 80091d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80091d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr
 80091e0:	20003278 	.word	0x20003278

080091e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	e010      	b.n	8009214 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80091f2:	4a0d      	ldr	r2, [pc, #52]	; (8009228 <clear_lock+0x44>)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	4413      	add	r3, r2
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d105      	bne.n	800920e <clear_lock+0x2a>
 8009202:	4a09      	ldr	r2, [pc, #36]	; (8009228 <clear_lock+0x44>)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	4413      	add	r3, r2
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3301      	adds	r3, #1
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d9eb      	bls.n	80091f2 <clear_lock+0xe>
	}
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	bc80      	pop	{r7}
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20003278 	.word	0x20003278

0800922c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	78db      	ldrb	r3, [r3, #3]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d034      	beq.n	80092aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	7858      	ldrb	r0, [r3, #1]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009250:	2301      	movs	r3, #1
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	f7ff fd4e 	bl	8008cf4 <disk_write>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <sync_window+0x38>
			res = FR_DISK_ERR;
 800925e:	2301      	movs	r3, #1
 8009260:	73fb      	strb	r3, [r7, #15]
 8009262:	e022      	b.n	80092aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	1ad2      	subs	r2, r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	429a      	cmp	r2, r3
 8009278:	d217      	bcs.n	80092aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	789b      	ldrb	r3, [r3, #2]
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	e010      	b.n	80092a4 <sync_window+0x78>
					wsect += fs->fsize;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4413      	add	r3, r2
 800928a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	7858      	ldrb	r0, [r3, #1]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009296:	2301      	movs	r3, #1
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	f7ff fd2b 	bl	8008cf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d8eb      	bhi.n	8009282 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d01b      	beq.n	8009304 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff ffad 	bl	800922c <sync_window>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d113      	bne.n	8009304 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	7858      	ldrb	r0, [r3, #1]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80092e6:	2301      	movs	r3, #1
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	f7ff fce3 	bl	8008cb4 <disk_read>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d004      	beq.n	80092fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80092f4:	f04f 33ff 	mov.w	r3, #4294967295
 80092f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f7ff ff87 	bl	800922c <sync_window>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d159      	bne.n	80093dc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b03      	cmp	r3, #3
 800932e:	d149      	bne.n	80093c4 <sync_fs+0xb4>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	791b      	ldrb	r3, [r3, #4]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d145      	bne.n	80093c4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	899b      	ldrh	r3, [r3, #12]
 8009342:	461a      	mov	r2, r3
 8009344:	2100      	movs	r1, #0
 8009346:	f7ff fdb1 	bl	8008eac <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3338      	adds	r3, #56	; 0x38
 800934e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009352:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff fd43 	bl	8008de2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3338      	adds	r3, #56	; 0x38
 8009360:	4921      	ldr	r1, [pc, #132]	; (80093e8 <sync_fs+0xd8>)
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fd57 	bl	8008e16 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3338      	adds	r3, #56	; 0x38
 800936c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009370:	491e      	ldr	r1, [pc, #120]	; (80093ec <sync_fs+0xdc>)
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff fd4f 	bl	8008e16 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3338      	adds	r3, #56	; 0x38
 800937c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7ff fd45 	bl	8008e16 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	3338      	adds	r3, #56	; 0x38
 8009390:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f7ff fd3b 	bl	8008e16 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7858      	ldrb	r0, [r3, #1]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b8:	2301      	movs	r3, #1
 80093ba:	f7ff fc9b 	bl	8008cf4 <disk_write>
			fs->fsi_flag = 0;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	2200      	movs	r2, #0
 80093ca:	2100      	movs	r1, #0
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff fcb1 	bl	8008d34 <disk_ioctl>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <sync_fs+0xcc>
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	41615252 	.word	0x41615252
 80093ec:	61417272 	.word	0x61417272

080093f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	3b02      	subs	r3, #2
 80093fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	3b02      	subs	r3, #2
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d301      	bcc.n	8009410 <clust2sect+0x20>
 800940c:	2300      	movs	r3, #0
 800940e:	e008      	b.n	8009422 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	895b      	ldrh	r3, [r3, #10]
 8009414:	461a      	mov	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	fb03 f202 	mul.w	r2, r3, r2
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009420:	4413      	add	r3, r2
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	bc80      	pop	{r7}
 800942a:	4770      	bx	lr

0800942c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d904      	bls.n	800944c <get_fat+0x20>
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	429a      	cmp	r2, r3
 800944a:	d302      	bcc.n	8009452 <get_fat+0x26>
		val = 1;	/* Internal error */
 800944c:	2301      	movs	r3, #1
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	e0bb      	b.n	80095ca <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009452:	f04f 33ff 	mov.w	r3, #4294967295
 8009456:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b03      	cmp	r3, #3
 800945e:	f000 8083 	beq.w	8009568 <get_fat+0x13c>
 8009462:	2b03      	cmp	r3, #3
 8009464:	f300 80a7 	bgt.w	80095b6 <get_fat+0x18a>
 8009468:	2b01      	cmp	r3, #1
 800946a:	d002      	beq.n	8009472 <get_fat+0x46>
 800946c:	2b02      	cmp	r3, #2
 800946e:	d056      	beq.n	800951e <get_fat+0xf2>
 8009470:	e0a1      	b.n	80095b6 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	085b      	lsrs	r3, r3, #1
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	899b      	ldrh	r3, [r3, #12]
 8009488:	4619      	mov	r1, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009490:	4413      	add	r3, r2
 8009492:	4619      	mov	r1, r3
 8009494:	6938      	ldr	r0, [r7, #16]
 8009496:	f7ff ff0d 	bl	80092b4 <move_window>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	f040 808d 	bne.w	80095bc <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	60fa      	str	r2, [r7, #12]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	8992      	ldrh	r2, [r2, #12]
 80094ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80094b0:	fb01 f202 	mul.w	r2, r1, r2
 80094b4:	1a9b      	subs	r3, r3, r2
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	4413      	add	r3, r2
 80094ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	899b      	ldrh	r3, [r3, #12]
 80094c8:	4619      	mov	r1, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80094d0:	4413      	add	r3, r2
 80094d2:	4619      	mov	r1, r3
 80094d4:	6938      	ldr	r0, [r7, #16]
 80094d6:	f7ff feed 	bl	80092b4 <move_window>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d16f      	bne.n	80095c0 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	899b      	ldrh	r3, [r3, #12]
 80094e4:	461a      	mov	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80094ec:	fb01 f202 	mul.w	r2, r1, r2
 80094f0:	1a9b      	subs	r3, r3, r2
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4413      	add	r3, r2
 80094f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094fa:	021b      	lsls	r3, r3, #8
 80094fc:	461a      	mov	r2, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4313      	orrs	r3, r2
 8009502:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <get_fat+0xe8>
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	091b      	lsrs	r3, r3, #4
 8009512:	e002      	b.n	800951a <get_fat+0xee>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800951a:	617b      	str	r3, [r7, #20]
			break;
 800951c:	e055      	b.n	80095ca <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	899b      	ldrh	r3, [r3, #12]
 8009526:	085b      	lsrs	r3, r3, #1
 8009528:	b29b      	uxth	r3, r3
 800952a:	4619      	mov	r1, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009532:	4413      	add	r3, r2
 8009534:	4619      	mov	r1, r3
 8009536:	6938      	ldr	r0, [r7, #16]
 8009538:	f7ff febc 	bl	80092b4 <move_window>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d140      	bne.n	80095c4 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	8992      	ldrh	r2, [r2, #12]
 8009550:	fbb3 f0f2 	udiv	r0, r3, r2
 8009554:	fb00 f202 	mul.w	r2, r0, r2
 8009558:	1a9b      	subs	r3, r3, r2
 800955a:	440b      	add	r3, r1
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fc07 	bl	8008d70 <ld_word>
 8009562:	4603      	mov	r3, r0
 8009564:	617b      	str	r3, [r7, #20]
			break;
 8009566:	e030      	b.n	80095ca <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	899b      	ldrh	r3, [r3, #12]
 8009570:	089b      	lsrs	r3, r3, #2
 8009572:	b29b      	uxth	r3, r3
 8009574:	4619      	mov	r1, r3
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	fbb3 f3f1 	udiv	r3, r3, r1
 800957c:	4413      	add	r3, r2
 800957e:	4619      	mov	r1, r3
 8009580:	6938      	ldr	r0, [r7, #16]
 8009582:	f7ff fe97 	bl	80092b4 <move_window>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d11d      	bne.n	80095c8 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	8992      	ldrh	r2, [r2, #12]
 800959a:	fbb3 f0f2 	udiv	r0, r3, r2
 800959e:	fb00 f202 	mul.w	r2, r0, r2
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	440b      	add	r3, r1
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7ff fbf9 	bl	8008d9e <ld_dword>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095b2:	617b      	str	r3, [r7, #20]
			break;
 80095b4:	e009      	b.n	80095ca <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80095b6:	2301      	movs	r3, #1
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	e006      	b.n	80095ca <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095bc:	bf00      	nop
 80095be:	e004      	b.n	80095ca <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095c0:	bf00      	nop
 80095c2:	e002      	b.n	80095ca <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095c4:	bf00      	nop
 80095c6:	e000      	b.n	80095ca <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095c8:	bf00      	nop
		}
	}

	return val;
 80095ca:	697b      	ldr	r3, [r7, #20]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80095d4:	b590      	push	{r4, r7, lr}
 80095d6:	b089      	sub	sp, #36	; 0x24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80095e0:	2302      	movs	r3, #2
 80095e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	f240 8102 	bls.w	80097f0 <put_fat+0x21c>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	f080 80fc 	bcs.w	80097f0 <put_fat+0x21c>
		switch (fs->fs_type) {
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	f000 80b6 	beq.w	800976e <put_fat+0x19a>
 8009602:	2b03      	cmp	r3, #3
 8009604:	f300 80fd 	bgt.w	8009802 <put_fat+0x22e>
 8009608:	2b01      	cmp	r3, #1
 800960a:	d003      	beq.n	8009614 <put_fat+0x40>
 800960c:	2b02      	cmp	r3, #2
 800960e:	f000 8083 	beq.w	8009718 <put_fat+0x144>
 8009612:	e0f6      	b.n	8009802 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	61bb      	str	r3, [r7, #24]
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	085b      	lsrs	r3, r3, #1
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	4413      	add	r3, r2
 8009620:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	899b      	ldrh	r3, [r3, #12]
 800962a:	4619      	mov	r1, r3
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009632:	4413      	add	r3, r2
 8009634:	4619      	mov	r1, r3
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff fe3c 	bl	80092b4 <move_window>
 800963c:	4603      	mov	r3, r0
 800963e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009640:	7ffb      	ldrb	r3, [r7, #31]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 80d6 	bne.w	80097f4 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	61ba      	str	r2, [r7, #24]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	8992      	ldrh	r2, [r2, #12]
 8009658:	fbb3 f0f2 	udiv	r0, r3, r2
 800965c:	fb00 f202 	mul.w	r2, r0, r2
 8009660:	1a9b      	subs	r3, r3, r2
 8009662:	440b      	add	r3, r1
 8009664:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <put_fat+0xb8>
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	b25b      	sxtb	r3, r3
 8009676:	f003 030f 	and.w	r3, r3, #15
 800967a:	b25a      	sxtb	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	b2db      	uxtb	r3, r3
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	b25b      	sxtb	r3, r3
 8009684:	4313      	orrs	r3, r2
 8009686:	b25b      	sxtb	r3, r3
 8009688:	b2db      	uxtb	r3, r3
 800968a:	e001      	b.n	8009690 <put_fat+0xbc>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	899b      	ldrh	r3, [r3, #12]
 80096a2:	4619      	mov	r1, r3
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80096aa:	4413      	add	r3, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f7ff fe00 	bl	80092b4 <move_window>
 80096b4:	4603      	mov	r3, r0
 80096b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096b8:	7ffb      	ldrb	r3, [r7, #31]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f040 809c 	bne.w	80097f8 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	899b      	ldrh	r3, [r3, #12]
 80096ca:	461a      	mov	r2, r3
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80096d2:	fb00 f202 	mul.w	r2, r0, r2
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	440b      	add	r3, r1
 80096da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <put_fat+0x11a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	091b      	lsrs	r3, r3, #4
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	e00e      	b.n	800970c <put_fat+0x138>
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b25b      	sxtb	r3, r3
 80096f4:	f023 030f 	bic.w	r3, r3, #15
 80096f8:	b25a      	sxtb	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	b25b      	sxtb	r3, r3
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	b25b      	sxtb	r3, r3
 8009706:	4313      	orrs	r3, r2
 8009708:	b25b      	sxtb	r3, r3
 800970a:	b2db      	uxtb	r3, r3
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2201      	movs	r2, #1
 8009714:	70da      	strb	r2, [r3, #3]
			break;
 8009716:	e074      	b.n	8009802 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	899b      	ldrh	r3, [r3, #12]
 8009720:	085b      	lsrs	r3, r3, #1
 8009722:	b29b      	uxth	r3, r3
 8009724:	4619      	mov	r1, r3
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	fbb3 f3f1 	udiv	r3, r3, r1
 800972c:	4413      	add	r3, r2
 800972e:	4619      	mov	r1, r3
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f7ff fdbf 	bl	80092b4 <move_window>
 8009736:	4603      	mov	r3, r0
 8009738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800973a:	7ffb      	ldrb	r3, [r7, #31]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d15d      	bne.n	80097fc <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	8992      	ldrh	r2, [r2, #12]
 800974e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009752:	fb00 f202 	mul.w	r2, r0, r2
 8009756:	1a9b      	subs	r3, r3, r2
 8009758:	440b      	add	r3, r1
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	b292      	uxth	r2, r2
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff fb3e 	bl	8008de2 <st_word>
			fs->wflag = 1;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	70da      	strb	r2, [r3, #3]
			break;
 800976c:	e049      	b.n	8009802 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	899b      	ldrh	r3, [r3, #12]
 8009776:	089b      	lsrs	r3, r3, #2
 8009778:	b29b      	uxth	r3, r3
 800977a:	4619      	mov	r1, r3
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009782:	4413      	add	r3, r2
 8009784:	4619      	mov	r1, r3
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7ff fd94 	bl	80092b4 <move_window>
 800978c:	4603      	mov	r3, r0
 800978e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009790:	7ffb      	ldrb	r3, [r7, #31]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d134      	bne.n	8009800 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	8992      	ldrh	r2, [r2, #12]
 80097aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80097ae:	fb00 f202 	mul.w	r2, r0, r2
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	440b      	add	r3, r1
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff faf1 	bl	8008d9e <ld_dword>
 80097bc:	4603      	mov	r3, r0
 80097be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80097c2:	4323      	orrs	r3, r4
 80097c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	8992      	ldrh	r2, [r2, #12]
 80097d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80097d8:	fb00 f202 	mul.w	r2, r0, r2
 80097dc:	1a9b      	subs	r3, r3, r2
 80097de:	440b      	add	r3, r1
 80097e0:	6879      	ldr	r1, [r7, #4]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fb17 	bl	8008e16 <st_dword>
			fs->wflag = 1;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2201      	movs	r2, #1
 80097ec:	70da      	strb	r2, [r3, #3]
			break;
 80097ee:	e008      	b.n	8009802 <put_fat+0x22e>
		}
	}
 80097f0:	bf00      	nop
 80097f2:	e006      	b.n	8009802 <put_fat+0x22e>
			if (res != FR_OK) break;
 80097f4:	bf00      	nop
 80097f6:	e004      	b.n	8009802 <put_fat+0x22e>
			if (res != FR_OK) break;
 80097f8:	bf00      	nop
 80097fa:	e002      	b.n	8009802 <put_fat+0x22e>
			if (res != FR_OK) break;
 80097fc:	bf00      	nop
 80097fe:	e000      	b.n	8009802 <put_fat+0x22e>
			if (res != FR_OK) break;
 8009800:	bf00      	nop
	return res;
 8009802:	7ffb      	ldrb	r3, [r7, #31]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3724      	adds	r7, #36	; 0x24
 8009808:	46bd      	mov	sp, r7
 800980a:	bd90      	pop	{r4, r7, pc}

0800980c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009818:	2300      	movs	r3, #0
 800981a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d904      	bls.n	8009832 <remove_chain+0x26>
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	429a      	cmp	r2, r3
 8009830:	d301      	bcc.n	8009836 <remove_chain+0x2a>
 8009832:	2302      	movs	r3, #2
 8009834:	e04b      	b.n	80098ce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	69b8      	ldr	r0, [r7, #24]
 8009844:	f7ff fec6 	bl	80095d4 <put_fat>
 8009848:	4603      	mov	r3, r0
 800984a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800984c:	7ffb      	ldrb	r3, [r7, #31]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <remove_chain+0x4a>
 8009852:	7ffb      	ldrb	r3, [r7, #31]
 8009854:	e03b      	b.n	80098ce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f7ff fde7 	bl	800942c <get_fat>
 800985e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d031      	beq.n	80098ca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <remove_chain+0x64>
 800986c:	2302      	movs	r3, #2
 800986e:	e02e      	b.n	80098ce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009876:	d101      	bne.n	800987c <remove_chain+0x70>
 8009878:	2301      	movs	r3, #1
 800987a:	e028      	b.n	80098ce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800987c:	2200      	movs	r2, #0
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	69b8      	ldr	r0, [r7, #24]
 8009882:	f7ff fea7 	bl	80095d4 <put_fat>
 8009886:	4603      	mov	r3, r0
 8009888:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800988a:	7ffb      	ldrb	r3, [r7, #31]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <remove_chain+0x88>
 8009890:	7ffb      	ldrb	r3, [r7, #31]
 8009892:	e01c      	b.n	80098ce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	3b02      	subs	r3, #2
 800989e:	429a      	cmp	r2, r3
 80098a0:	d20b      	bcs.n	80098ba <remove_chain+0xae>
			fs->free_clst++;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	791b      	ldrb	r3, [r3, #4]
 80098b0:	f043 0301 	orr.w	r3, r3, #1
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d3c6      	bcc.n	8009856 <remove_chain+0x4a>
 80098c8:	e000      	b.n	80098cc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80098ca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b088      	sub	sp, #32
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10d      	bne.n	8009908 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d004      	beq.n	8009902 <create_chain+0x2c>
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d31b      	bcc.n	800993a <create_chain+0x64>
 8009902:	2301      	movs	r3, #1
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	e018      	b.n	800993a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff fd8e 	bl	800942c <get_fat>
 8009910:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d801      	bhi.n	800991c <create_chain+0x46>
 8009918:	2301      	movs	r3, #1
 800991a:	e070      	b.n	80099fe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d101      	bne.n	8009928 <create_chain+0x52>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	e06a      	b.n	80099fe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	429a      	cmp	r2, r3
 8009930:	d201      	bcs.n	8009936 <create_chain+0x60>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	e063      	b.n	80099fe <create_chain+0x128>
		scl = clst;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	3301      	adds	r3, #1
 8009942:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	69db      	ldr	r3, [r3, #28]
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	429a      	cmp	r2, r3
 800994c:	d307      	bcc.n	800995e <create_chain+0x88>
				ncl = 2;
 800994e:	2302      	movs	r3, #2
 8009950:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	429a      	cmp	r2, r3
 8009958:	d901      	bls.n	800995e <create_chain+0x88>
 800995a:	2300      	movs	r3, #0
 800995c:	e04f      	b.n	80099fe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800995e:	69f9      	ldr	r1, [r7, #28]
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff fd63 	bl	800942c <get_fat>
 8009966:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00e      	beq.n	800998c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d003      	beq.n	800997c <create_chain+0xa6>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d101      	bne.n	8009980 <create_chain+0xaa>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	e03e      	b.n	80099fe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	429a      	cmp	r2, r3
 8009986:	d1da      	bne.n	800993e <create_chain+0x68>
 8009988:	2300      	movs	r3, #0
 800998a:	e038      	b.n	80099fe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800998c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800998e:	f04f 32ff 	mov.w	r2, #4294967295
 8009992:	69f9      	ldr	r1, [r7, #28]
 8009994:	6938      	ldr	r0, [r7, #16]
 8009996:	f7ff fe1d 	bl	80095d4 <put_fat>
 800999a:	4603      	mov	r3, r0
 800999c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <create_chain+0xe2>
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d006      	beq.n	80099b8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6938      	ldr	r0, [r7, #16]
 80099b0:	f7ff fe10 	bl	80095d4 <put_fat>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d116      	bne.n	80099ec <create_chain+0x116>
		fs->last_clst = ncl;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	699a      	ldr	r2, [r3, #24]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	3b02      	subs	r3, #2
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d804      	bhi.n	80099dc <create_chain+0x106>
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	1e5a      	subs	r2, r3, #1
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	791b      	ldrb	r3, [r3, #4]
 80099e0:	f043 0301 	orr.w	r3, r3, #1
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	711a      	strb	r2, [r3, #4]
 80099ea:	e007      	b.n	80099fc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d102      	bne.n	80099f8 <create_chain+0x122>
 80099f2:	f04f 33ff 	mov.w	r3, #4294967295
 80099f6:	e000      	b.n	80099fa <create_chain+0x124>
 80099f8:	2301      	movs	r3, #1
 80099fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80099fc:	69fb      	ldr	r3, [r7, #28]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b087      	sub	sp, #28
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	899b      	ldrh	r3, [r3, #12]
 8009a22:	461a      	mov	r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	8952      	ldrh	r2, [r2, #10]
 8009a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a32:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	613a      	str	r2, [r7, #16]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <clmt_clust+0x42>
 8009a44:	2300      	movs	r3, #0
 8009a46:	e010      	b.n	8009a6a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d307      	bcc.n	8009a60 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a5e:	e7e9      	b.n	8009a34 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009a60:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4413      	add	r3, r2
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bc80      	pop	{r7}
 8009a72:	4770      	bx	lr

08009a74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a8a:	d204      	bcs.n	8009a96 <dir_sdi+0x22>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	f003 031f 	and.w	r3, r3, #31
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009a96:	2302      	movs	r3, #2
 8009a98:	e071      	b.n	8009b7e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d106      	bne.n	8009aba <dir_sdi+0x46>
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d902      	bls.n	8009aba <dir_sdi+0x46>
		clst = fs->dirbase;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d10c      	bne.n	8009ada <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	8912      	ldrh	r2, [r2, #8]
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d301      	bcc.n	8009ad0 <dir_sdi+0x5c>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e056      	b.n	8009b7e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	61da      	str	r2, [r3, #28]
 8009ad8:	e02d      	b.n	8009b36 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	895b      	ldrh	r3, [r3, #10]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	899b      	ldrh	r3, [r3, #12]
 8009ae4:	fb02 f303 	mul.w	r3, r2, r3
 8009ae8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009aea:	e019      	b.n	8009b20 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6979      	ldr	r1, [r7, #20]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7ff fc9b 	bl	800942c <get_fat>
 8009af6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afe:	d101      	bne.n	8009b04 <dir_sdi+0x90>
 8009b00:	2301      	movs	r3, #1
 8009b02:	e03c      	b.n	8009b7e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d904      	bls.n	8009b14 <dir_sdi+0xa0>
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d301      	bcc.n	8009b18 <dir_sdi+0xa4>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e032      	b.n	8009b7e <dir_sdi+0x10a>
			ofs -= csz;
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d2e1      	bcs.n	8009aec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009b28:	6979      	ldr	r1, [r7, #20]
 8009b2a:	6938      	ldr	r0, [r7, #16]
 8009b2c:	f7ff fc60 	bl	80093f0 <clust2sect>
 8009b30:	4602      	mov	r2, r0
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <dir_sdi+0xd4>
 8009b44:	2302      	movs	r3, #2
 8009b46:	e01a      	b.n	8009b7e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	899b      	ldrh	r3, [r3, #12]
 8009b50:	4619      	mov	r1, r3
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b58:	441a      	add	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	899b      	ldrh	r3, [r3, #12]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b70:	fb00 f202 	mul.w	r2, r0, r2
 8009b74:	1a9b      	subs	r3, r3, r2
 8009b76:	18ca      	adds	r2, r1, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	3320      	adds	r3, #32
 8009b9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <dir_next+0x28>
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bac:	d301      	bcc.n	8009bb2 <dir_next+0x2c>
 8009bae:	2304      	movs	r3, #4
 8009bb0:	e0bb      	b.n	8009d2a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	899b      	ldrh	r3, [r3, #12]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bbe:	fb01 f202 	mul.w	r2, r1, r2
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f040 809d 	bne.w	8009d04 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10b      	bne.n	8009bf4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	095b      	lsrs	r3, r3, #5
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	8912      	ldrh	r2, [r2, #8]
 8009be4:	4293      	cmp	r3, r2
 8009be6:	f0c0 808d 	bcc.w	8009d04 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	61da      	str	r2, [r3, #28]
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	e09a      	b.n	8009d2a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	899b      	ldrh	r3, [r3, #12]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	8952      	ldrh	r2, [r2, #10]
 8009c04:	3a01      	subs	r2, #1
 8009c06:	4013      	ands	r3, r2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d17b      	bne.n	8009d04 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7ff fc09 	bl	800942c <get_fat>
 8009c1a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d801      	bhi.n	8009c26 <dir_next+0xa0>
 8009c22:	2302      	movs	r3, #2
 8009c24:	e081      	b.n	8009d2a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2c:	d101      	bne.n	8009c32 <dir_next+0xac>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e07b      	b.n	8009d2a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d359      	bcc.n	8009cf0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d104      	bne.n	8009c4c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	61da      	str	r2, [r3, #28]
 8009c48:	2304      	movs	r3, #4
 8009c4a:	e06e      	b.n	8009d2a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	4619      	mov	r1, r3
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7ff fe3e 	bl	80098d6 <create_chain>
 8009c5a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <dir_next+0xe0>
 8009c62:	2307      	movs	r3, #7
 8009c64:	e061      	b.n	8009d2a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d101      	bne.n	8009c70 <dir_next+0xea>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e05c      	b.n	8009d2a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d101      	bne.n	8009c7c <dir_next+0xf6>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e056      	b.n	8009d2a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff fad5 	bl	800922c <sync_window>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <dir_next+0x106>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e04e      	b.n	8009d2a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	899b      	ldrh	r3, [r3, #12]
 8009c96:	461a      	mov	r2, r3
 8009c98:	2100      	movs	r1, #0
 8009c9a:	f7ff f907 	bl	8008eac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	613b      	str	r3, [r7, #16]
 8009ca2:	6979      	ldr	r1, [r7, #20]
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7ff fba3 	bl	80093f0 <clust2sect>
 8009caa:	4602      	mov	r2, r0
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	635a      	str	r2, [r3, #52]	; 0x34
 8009cb0:	e012      	b.n	8009cd8 <dir_next+0x152>
						fs->wflag = 1;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff fab7 	bl	800922c <sync_window>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <dir_next+0x142>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e030      	b.n	8009d2a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	635a      	str	r2, [r3, #52]	; 0x34
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	895b      	ldrh	r3, [r3, #10]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d3e6      	bcc.n	8009cb2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009cf6:	6979      	ldr	r1, [r7, #20]
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7ff fb79 	bl	80093f0 <clust2sect>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	899b      	ldrh	r3, [r3, #12]
 8009d14:	461a      	mov	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d1c:	fb00 f202 	mul.w	r2, r0, r2
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	18ca      	adds	r2, r1, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b086      	sub	sp, #24
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009d42:	2100      	movs	r1, #0
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fe95 	bl	8009a74 <dir_sdi>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d12b      	bne.n	8009dac <dir_alloc+0x7a>
		n = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff faa8 	bl	80092b4 <move_window>
 8009d64:	4603      	mov	r3, r0
 8009d66:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d11d      	bne.n	8009daa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2be5      	cmp	r3, #229	; 0xe5
 8009d76:	d004      	beq.n	8009d82 <dir_alloc+0x50>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d107      	bne.n	8009d92 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	3301      	adds	r3, #1
 8009d86:	613b      	str	r3, [r7, #16]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d102      	bne.n	8009d96 <dir_alloc+0x64>
 8009d90:	e00c      	b.n	8009dac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009d92:	2300      	movs	r3, #0
 8009d94:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009d96:	2101      	movs	r1, #1
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fef4 	bl	8009b86 <dir_next>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0d7      	beq.n	8009d58 <dir_alloc+0x26>
 8009da8:	e000      	b.n	8009dac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009daa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	d101      	bne.n	8009db6 <dir_alloc+0x84>
 8009db2:	2307      	movs	r3, #7
 8009db4:	75fb      	strb	r3, [r7, #23]
	return res;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	331a      	adds	r3, #26
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe ffce 	bl	8008d70 <ld_word>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d109      	bne.n	8009df4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	3314      	adds	r3, #20
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe ffc3 	bl	8008d70 <ld_word>
 8009dea:	4603      	mov	r3, r0
 8009dec:	041b      	lsls	r3, r3, #16
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009df4:	68fb      	ldr	r3, [r7, #12]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b084      	sub	sp, #16
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	331a      	adds	r3, #26
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	b292      	uxth	r2, r2
 8009e12:	4611      	mov	r1, r2
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe ffe4 	bl	8008de2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d109      	bne.n	8009e36 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f103 0214 	add.w	r2, r3, #20
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	0c1b      	lsrs	r3, r3, #16
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f7fe ffd6 	bl	8008de2 <st_word>
	}
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	331a      	adds	r3, #26
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe ff8e 	bl	8008d70 <ld_word>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <cmp_lfn+0x1e>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e059      	b.n	8009f12 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e66:	1e5a      	subs	r2, r3, #1
 8009e68:	4613      	mov	r3, r2
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009e74:	2301      	movs	r3, #1
 8009e76:	81fb      	strh	r3, [r7, #14]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	e033      	b.n	8009ee6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009e7e:	4a27      	ldr	r2, [pc, #156]	; (8009f1c <cmp_lfn+0xdc>)
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	4413      	add	r3, r2
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe ff6f 	bl	8008d70 <ld_word>
 8009e92:	4603      	mov	r3, r0
 8009e94:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009e96:	89fb      	ldrh	r3, [r7, #14]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d01a      	beq.n	8009ed2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2bfe      	cmp	r3, #254	; 0xfe
 8009ea0:	d812      	bhi.n	8009ec8 <cmp_lfn+0x88>
 8009ea2:	89bb      	ldrh	r3, [r7, #12]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 fecf 	bl	800bc48 <ff_wtoupper>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	461c      	mov	r4, r3
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	617a      	str	r2, [r7, #20]
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	4413      	add	r3, r2
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f001 fec3 	bl	800bc48 <ff_wtoupper>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	429c      	cmp	r4, r3
 8009ec6:	d001      	beq.n	8009ecc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e022      	b.n	8009f12 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009ecc:	89bb      	ldrh	r3, [r7, #12]
 8009ece:	81fb      	strh	r3, [r7, #14]
 8009ed0:	e006      	b.n	8009ee0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009ed2:	89bb      	ldrh	r3, [r7, #12]
 8009ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d001      	beq.n	8009ee0 <cmp_lfn+0xa0>
 8009edc:	2300      	movs	r3, #0
 8009ede:	e018      	b.n	8009f12 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	2b0c      	cmp	r3, #12
 8009eea:	d9c8      	bls.n	8009e7e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <cmp_lfn+0xd0>
 8009ef8:	89fb      	ldrh	r3, [r7, #14]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d008      	beq.n	8009f10 <cmp_lfn+0xd0>
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	4413      	add	r3, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <cmp_lfn+0xd0>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e000      	b.n	8009f12 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009f10:	2301      	movs	r3, #1
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd90      	pop	{r4, r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	080103cc 	.word	0x080103cc

08009f20 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	460b      	mov	r3, r1
 8009f30:	71fb      	strb	r3, [r7, #7]
 8009f32:	4613      	mov	r3, r2
 8009f34:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	330d      	adds	r3, #13
 8009f3a:	79ba      	ldrb	r2, [r7, #6]
 8009f3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	330b      	adds	r3, #11
 8009f42:	220f      	movs	r2, #15
 8009f44:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	331a      	adds	r3, #26
 8009f52:	2100      	movs	r1, #0
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe ff44 	bl	8008de2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009f5a:	79fb      	ldrb	r3, [r7, #7]
 8009f5c:	1e5a      	subs	r2, r3, #1
 8009f5e:	4613      	mov	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	82fb      	strh	r3, [r7, #22]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009f72:	8afb      	ldrh	r3, [r7, #22]
 8009f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d007      	beq.n	8009f8c <put_lfn+0x6c>
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	61fa      	str	r2, [r7, #28]
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009f8c:	4a17      	ldr	r2, [pc, #92]	; (8009fec <put_lfn+0xcc>)
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	4413      	add	r3, r2
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	461a      	mov	r2, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	4413      	add	r3, r2
 8009f9a:	8afa      	ldrh	r2, [r7, #22]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe ff1f 	bl	8008de2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009fa4:	8afb      	ldrh	r3, [r7, #22]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <put_lfn+0x90>
 8009faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	61bb      	str	r3, [r7, #24]
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b0c      	cmp	r3, #12
 8009fba:	d9da      	bls.n	8009f72 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009fbc:	8afb      	ldrh	r3, [r7, #22]
 8009fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d006      	beq.n	8009fd4 <put_lfn+0xb4>
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	005b      	lsls	r3, r3, #1
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4413      	add	r3, r2
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d103      	bne.n	8009fdc <put_lfn+0xbc>
 8009fd4:	79fb      	ldrb	r3, [r7, #7]
 8009fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fda:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	79fa      	ldrb	r2, [r7, #7]
 8009fe0:	701a      	strb	r2, [r3, #0]
}
 8009fe2:	bf00      	nop
 8009fe4:	3720      	adds	r7, #32
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	080103cc 	.word	0x080103cc

08009ff0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08c      	sub	sp, #48	; 0x30
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009ffe:	220b      	movs	r2, #11
 800a000:	68b9      	ldr	r1, [r7, #8]
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f7fe ff32 	bl	8008e6c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	2b05      	cmp	r3, #5
 800a00c:	d92b      	bls.n	800a066 <gen_numname+0x76>
		sr = seq;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a012:	e022      	b.n	800a05a <gen_numname+0x6a>
			wc = *lfn++;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	1c9a      	adds	r2, r3, #2
 800a018:	607a      	str	r2, [r7, #4]
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a01e:	2300      	movs	r3, #0
 800a020:	62bb      	str	r3, [r7, #40]	; 0x28
 800a022:	e017      	b.n	800a054 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	005a      	lsls	r2, r3, #1
 800a028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a032:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a034:	085b      	lsrs	r3, r3, #1
 800a036:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <gen_numname+0x5e>
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a048:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a04c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	3301      	adds	r3, #1
 800a052:	62bb      	str	r3, [r7, #40]	; 0x28
 800a054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a056:	2b0f      	cmp	r3, #15
 800a058:	d9e4      	bls.n	800a024 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1d8      	bne.n	800a014 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a066:	2307      	movs	r3, #7
 800a068:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	b2db      	uxtb	r3, r3
 800a074:	3330      	adds	r3, #48	; 0x30
 800a076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a07a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a07e:	2b39      	cmp	r3, #57	; 0x39
 800a080:	d904      	bls.n	800a08c <gen_numname+0x9c>
 800a082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a086:	3307      	adds	r3, #7
 800a088:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	1e5a      	subs	r2, r3, #1
 800a090:	62ba      	str	r2, [r7, #40]	; 0x28
 800a092:	3330      	adds	r3, #48	; 0x30
 800a094:	443b      	add	r3, r7
 800a096:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a09a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	091b      	lsrs	r3, r3, #4
 800a0a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1df      	bne.n	800a06a <gen_numname+0x7a>
	ns[i] = '~';
 800a0aa:	f107 0214 	add.w	r2, r7, #20
 800a0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b0:	4413      	add	r3, r2
 800a0b2:	227e      	movs	r2, #126	; 0x7e
 800a0b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ba:	e002      	b.n	800a0c2 <gen_numname+0xd2>
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	3301      	adds	r3, #1
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d205      	bcs.n	800a0d6 <gen_numname+0xe6>
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	4413      	add	r3, r2
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	d1f2      	bne.n	800a0bc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	2b07      	cmp	r3, #7
 800a0da:	d807      	bhi.n	800a0ec <gen_numname+0xfc>
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	62ba      	str	r2, [r7, #40]	; 0x28
 800a0e2:	3330      	adds	r3, #48	; 0x30
 800a0e4:	443b      	add	r3, r7
 800a0e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a0ea:	e000      	b.n	800a0ee <gen_numname+0xfe>
 800a0ec:	2120      	movs	r1, #32
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	627a      	str	r2, [r7, #36]	; 0x24
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	460a      	mov	r2, r1
 800a0fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	2b07      	cmp	r3, #7
 800a100:	d9e9      	bls.n	800a0d6 <gen_numname+0xe6>
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	3730      	adds	r7, #48	; 0x30
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a118:	230b      	movs	r3, #11
 800a11a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	0852      	lsrs	r2, r2, #1
 800a122:	01db      	lsls	r3, r3, #7
 800a124:	4313      	orrs	r3, r2
 800a126:	b2da      	uxtb	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	1c59      	adds	r1, r3, #1
 800a12c:	6079      	str	r1, [r7, #4]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	4413      	add	r3, r2
 800a132:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	3b01      	subs	r3, #1
 800a138:	60bb      	str	r3, [r7, #8]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1ed      	bne.n	800a11c <sum_sfn+0x10>
	return sum;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a15a:	2100      	movs	r1, #0
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff fc89 	bl	8009a74 <dir_sdi>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <dir_find+0x24>
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	e0a9      	b.n	800a2c4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a170:	23ff      	movs	r3, #255	; 0xff
 800a172:	753b      	strb	r3, [r7, #20]
 800a174:	7d3b      	ldrb	r3, [r7, #20]
 800a176:	757b      	strb	r3, [r7, #21]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f04f 32ff 	mov.w	r2, #4294967295
 800a17e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	4619      	mov	r1, r3
 800a186:	6938      	ldr	r0, [r7, #16]
 800a188:	f7ff f894 	bl	80092b4 <move_window>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f040 8090 	bne.w	800a2b8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1a0:	7dbb      	ldrb	r3, [r7, #22]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <dir_find+0x60>
 800a1a6:	2304      	movs	r3, #4
 800a1a8:	75fb      	strb	r3, [r7, #23]
 800a1aa:	e08a      	b.n	800a2c2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	330b      	adds	r3, #11
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1b8:	73fb      	strb	r3, [r7, #15]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	7bfa      	ldrb	r2, [r7, #15]
 800a1be:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a1c0:	7dbb      	ldrb	r3, [r7, #22]
 800a1c2:	2be5      	cmp	r3, #229	; 0xe5
 800a1c4:	d007      	beq.n	800a1d6 <dir_find+0x8a>
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d009      	beq.n	800a1e4 <dir_find+0x98>
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b0f      	cmp	r3, #15
 800a1d4:	d006      	beq.n	800a1e4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a1d6:	23ff      	movs	r3, #255	; 0xff
 800a1d8:	757b      	strb	r3, [r7, #21]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e0:	631a      	str	r2, [r3, #48]	; 0x30
 800a1e2:	e05e      	b.n	800a2a2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	2b0f      	cmp	r3, #15
 800a1e8:	d136      	bne.n	800a258 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d154      	bne.n	800a2a2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a1f8:	7dbb      	ldrb	r3, [r7, #22]
 800a1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00d      	beq.n	800a21e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	7b5b      	ldrb	r3, [r3, #13]
 800a208:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a20a:	7dbb      	ldrb	r3, [r7, #22]
 800a20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a210:	75bb      	strb	r3, [r7, #22]
 800a212:	7dbb      	ldrb	r3, [r7, #22]
 800a214:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695a      	ldr	r2, [r3, #20]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a21e:	7dba      	ldrb	r2, [r7, #22]
 800a220:	7d7b      	ldrb	r3, [r7, #21]
 800a222:	429a      	cmp	r2, r3
 800a224:	d115      	bne.n	800a252 <dir_find+0x106>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	330d      	adds	r3, #13
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	7d3a      	ldrb	r2, [r7, #20]
 800a230:	429a      	cmp	r2, r3
 800a232:	d10e      	bne.n	800a252 <dir_find+0x106>
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	4619      	mov	r1, r3
 800a23e:	4610      	mov	r0, r2
 800a240:	f7ff fdfe 	bl	8009e40 <cmp_lfn>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <dir_find+0x106>
 800a24a:	7d7b      	ldrb	r3, [r7, #21]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	e000      	b.n	800a254 <dir_find+0x108>
 800a252:	23ff      	movs	r3, #255	; 0xff
 800a254:	757b      	strb	r3, [r7, #21]
 800a256:	e024      	b.n	800a2a2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a258:	7d7b      	ldrb	r3, [r7, #21]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d109      	bne.n	800a272 <dir_find+0x126>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff ff52 	bl	800a10c <sum_sfn>
 800a268:	4603      	mov	r3, r0
 800a26a:	461a      	mov	r2, r3
 800a26c:	7d3b      	ldrb	r3, [r7, #20]
 800a26e:	4293      	cmp	r3, r2
 800a270:	d024      	beq.n	800a2bc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10a      	bne.n	800a296 <dir_find+0x14a>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a18      	ldr	r0, [r3, #32]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3324      	adds	r3, #36	; 0x24
 800a288:	220b      	movs	r2, #11
 800a28a:	4619      	mov	r1, r3
 800a28c:	f7fe fe28 	bl	8008ee0 <mem_cmp>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d014      	beq.n	800a2c0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a296:	23ff      	movs	r3, #255	; 0xff
 800a298:	757b      	strb	r3, [r7, #21]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a0:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fc6e 	bl	8009b86 <dir_next>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f43f af65 	beq.w	800a180 <dir_find+0x34>
 800a2b6:	e004      	b.n	800a2c2 <dir_find+0x176>
		if (res != FR_OK) break;
 800a2b8:	bf00      	nop
 800a2ba:	e002      	b.n	800a2c2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a2bc:	bf00      	nop
 800a2be:	e000      	b.n	800a2c2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a2c0:	bf00      	nop

	return res;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08c      	sub	sp, #48	; 0x30
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a2e0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <dir_register+0x20>
 800a2e8:	2306      	movs	r3, #6
 800a2ea:	e0e0      	b.n	800a4ae <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f0:	e002      	b.n	800a2f8 <dir_register+0x2c>
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	4413      	add	r3, r2
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1f4      	bne.n	800a2f2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a30e:	f107 030c 	add.w	r3, r7, #12
 800a312:	220c      	movs	r2, #12
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fda9 	bl	8008e6c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d032      	beq.n	800a38a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2240      	movs	r2, #64	; 0x40
 800a328:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a32c:	2301      	movs	r3, #1
 800a32e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a330:	e016      	b.n	800a360 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	f107 010c 	add.w	r1, r7, #12
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	f7ff fe55 	bl	8009ff0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff ff00 	bl	800a14c <dir_find>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a356:	2b00      	cmp	r3, #0
 800a358:	d106      	bne.n	800a368 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	3301      	adds	r3, #1
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	2b63      	cmp	r3, #99	; 0x63
 800a364:	d9e5      	bls.n	800a332 <dir_register+0x66>
 800a366:	e000      	b.n	800a36a <dir_register+0x9e>
			if (res != FR_OK) break;
 800a368:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	2b64      	cmp	r3, #100	; 0x64
 800a36e:	d101      	bne.n	800a374 <dir_register+0xa8>
 800a370:	2307      	movs	r3, #7
 800a372:	e09c      	b.n	800a4ae <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d002      	beq.n	800a382 <dir_register+0xb6>
 800a37c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a380:	e095      	b.n	800a4ae <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a382:	7dfa      	ldrb	r2, [r7, #23]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d007      	beq.n	800a3a4 <dir_register+0xd8>
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	330c      	adds	r3, #12
 800a398:	4a47      	ldr	r2, [pc, #284]	; (800a4b8 <dir_register+0x1ec>)
 800a39a:	fba2 2303 	umull	r2, r3, r2, r3
 800a39e:	089b      	lsrs	r3, r3, #2
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	e000      	b.n	800a3a6 <dir_register+0xda>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a3a8:	6a39      	ldr	r1, [r7, #32]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff fcc1 	bl	8009d32 <dir_alloc>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d148      	bne.n	800a450 <dir_register+0x184>
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	623b      	str	r3, [r7, #32]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d042      	beq.n	800a450 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	695a      	ldr	r2, [r3, #20]
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	015b      	lsls	r3, r3, #5
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff fb4c 	bl	8009a74 <dir_sdi>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d132      	bne.n	800a450 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fe8c 	bl	800a10c <sum_sfn>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	69f8      	ldr	r0, [r7, #28]
 800a400:	f7fe ff58 	bl	80092b4 <move_window>
 800a404:	4603      	mov	r3, r0
 800a406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a40a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11d      	bne.n	800a44e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	6918      	ldr	r0, [r3, #16]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a19      	ldr	r1, [r3, #32]
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	7efb      	ldrb	r3, [r7, #27]
 800a420:	f7ff fd7e 	bl	8009f20 <put_lfn>
				fs->wflag = 1;
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2201      	movs	r2, #1
 800a428:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a42a:	2100      	movs	r1, #0
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff fbaa 	bl	8009b86 <dir_next>
 800a432:	4603      	mov	r3, r0
 800a434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d107      	bne.n	800a450 <dir_register+0x184>
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	3b01      	subs	r3, #1
 800a444:	623b      	str	r3, [r7, #32]
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1d5      	bne.n	800a3f8 <dir_register+0x12c>
 800a44c:	e000      	b.n	800a450 <dir_register+0x184>
				if (res != FR_OK) break;
 800a44e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a454:	2b00      	cmp	r3, #0
 800a456:	d128      	bne.n	800a4aa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	4619      	mov	r1, r3
 800a45e:	69f8      	ldr	r0, [r7, #28]
 800a460:	f7fe ff28 	bl	80092b4 <move_window>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a46a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d11b      	bne.n	800a4aa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	2220      	movs	r2, #32
 800a478:	2100      	movs	r1, #0
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe fd16 	bl	8008eac <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a18      	ldr	r0, [r3, #32]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3324      	adds	r3, #36	; 0x24
 800a488:	220b      	movs	r2, #11
 800a48a:	4619      	mov	r1, r3
 800a48c:	f7fe fcee 	bl	8008e6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	330c      	adds	r3, #12
 800a49c:	f002 0218 	and.w	r2, r2, #24
 800a4a0:	b2d2      	uxtb	r2, r2
 800a4a2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a4aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3730      	adds	r7, #48	; 0x30
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	4ec4ec4f 	.word	0x4ec4ec4f

0800a4bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08a      	sub	sp, #40	; 0x28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	613b      	str	r3, [r7, #16]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	617b      	str	r3, [r7, #20]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	61ba      	str	r2, [r7, #24]
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a4ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4ec:	2b1f      	cmp	r3, #31
 800a4ee:	d940      	bls.n	800a572 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a4f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4f2:	2b2f      	cmp	r3, #47	; 0x2f
 800a4f4:	d006      	beq.n	800a504 <create_name+0x48>
 800a4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a4f8:	2b5c      	cmp	r3, #92	; 0x5c
 800a4fa:	d110      	bne.n	800a51e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a4fc:	e002      	b.n	800a504 <create_name+0x48>
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	3301      	adds	r3, #1
 800a502:	61bb      	str	r3, [r7, #24]
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	4413      	add	r3, r2
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b2f      	cmp	r3, #47	; 0x2f
 800a50e:	d0f6      	beq.n	800a4fe <create_name+0x42>
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	4413      	add	r3, r2
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b5c      	cmp	r3, #92	; 0x5c
 800a51a:	d0f0      	beq.n	800a4fe <create_name+0x42>
			break;
 800a51c:	e02a      	b.n	800a574 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2bfe      	cmp	r3, #254	; 0xfe
 800a522:	d901      	bls.n	800a528 <create_name+0x6c>
 800a524:	2306      	movs	r3, #6
 800a526:	e17d      	b.n	800a824 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a52e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a530:	2101      	movs	r1, #1
 800a532:	4618      	mov	r0, r3
 800a534:	f001 fb4e 	bl	800bbd4 <ff_convert>
 800a538:	4603      	mov	r3, r0
 800a53a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a53c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <create_name+0x8a>
 800a542:	2306      	movs	r3, #6
 800a544:	e16e      	b.n	800a824 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a548:	2b7f      	cmp	r3, #127	; 0x7f
 800a54a:	d809      	bhi.n	800a560 <create_name+0xa4>
 800a54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a54e:	4619      	mov	r1, r3
 800a550:	488d      	ldr	r0, [pc, #564]	; (800a788 <create_name+0x2cc>)
 800a552:	f7fe fceb 	bl	8008f2c <chk_chr>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <create_name+0xa4>
 800a55c:	2306      	movs	r3, #6
 800a55e:	e161      	b.n	800a824 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	617a      	str	r2, [r7, #20]
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a56e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a570:	e7b4      	b.n	800a4dc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a572:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	441a      	add	r2, r3
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a57e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a580:	2b1f      	cmp	r3, #31
 800a582:	d801      	bhi.n	800a588 <create_name+0xcc>
 800a584:	2304      	movs	r3, #4
 800a586:	e000      	b.n	800a58a <create_name+0xce>
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a58e:	e011      	b.n	800a5b4 <create_name+0xf8>
		w = lfn[di - 1];
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a596:	3b01      	subs	r3, #1
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	4413      	add	r3, r2
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	d002      	beq.n	800a5ae <create_name+0xf2>
 800a5a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ac:	d106      	bne.n	800a5bc <create_name+0x100>
		di--;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1ea      	bne.n	800a590 <create_name+0xd4>
 800a5ba:	e000      	b.n	800a5be <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a5bc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <create_name+0x118>
 800a5d0:	2306      	movs	r3, #6
 800a5d2:	e127      	b.n	800a824 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3324      	adds	r3, #36	; 0x24
 800a5d8:	220b      	movs	r2, #11
 800a5da:	2120      	movs	r1, #32
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fc65 	bl	8008eac <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	61bb      	str	r3, [r7, #24]
 800a5e6:	e002      	b.n	800a5ee <create_name+0x132>
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61bb      	str	r3, [r7, #24]
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	005b      	lsls	r3, r3, #1
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	d0f5      	beq.n	800a5e8 <create_name+0x12c>
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	2b2e      	cmp	r3, #46	; 0x2e
 800a608:	d0ee      	beq.n	800a5e8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d009      	beq.n	800a624 <create_name+0x168>
 800a610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a614:	f043 0303 	orr.w	r3, r3, #3
 800a618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a61c:	e002      	b.n	800a624 <create_name+0x168>
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	3b01      	subs	r3, #1
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d009      	beq.n	800a63e <create_name+0x182>
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a630:	3b01      	subs	r3, #1
 800a632:	005b      	lsls	r3, r3, #1
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	4413      	add	r3, r2
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	2b2e      	cmp	r3, #46	; 0x2e
 800a63c:	d1ef      	bne.n	800a61e <create_name+0x162>

	i = b = 0; ni = 8;
 800a63e:	2300      	movs	r3, #0
 800a640:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a644:	2300      	movs	r3, #0
 800a646:	623b      	str	r3, [r7, #32]
 800a648:	2308      	movs	r3, #8
 800a64a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	61ba      	str	r2, [r7, #24]
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4413      	add	r3, r2
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 8090 	beq.w	800a784 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a666:	2b20      	cmp	r3, #32
 800a668:	d006      	beq.n	800a678 <create_name+0x1bc>
 800a66a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a66c:	2b2e      	cmp	r3, #46	; 0x2e
 800a66e:	d10a      	bne.n	800a686 <create_name+0x1ca>
 800a670:	69ba      	ldr	r2, [r7, #24]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	429a      	cmp	r2, r3
 800a676:	d006      	beq.n	800a686 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a67c:	f043 0303 	orr.w	r3, r3, #3
 800a680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a684:	e07d      	b.n	800a782 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a686:	6a3a      	ldr	r2, [r7, #32]
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d203      	bcs.n	800a696 <create_name+0x1da>
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	429a      	cmp	r2, r3
 800a694:	d123      	bne.n	800a6de <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	2b0b      	cmp	r3, #11
 800a69a:	d106      	bne.n	800a6aa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a69c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a0:	f043 0303 	orr.w	r3, r3, #3
 800a6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a6a8:	e075      	b.n	800a796 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a6aa:	69ba      	ldr	r2, [r7, #24]
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d005      	beq.n	800a6be <create_name+0x202>
 800a6b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b6:	f043 0303 	orr.w	r3, r3, #3
 800a6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d866      	bhi.n	800a794 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	61bb      	str	r3, [r7, #24]
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	623b      	str	r3, [r7, #32]
 800a6ce:	230b      	movs	r3, #11
 800a6d0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a6dc:	e051      	b.n	800a782 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a6de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6e0:	2b7f      	cmp	r3, #127	; 0x7f
 800a6e2:	d914      	bls.n	800a70e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a6e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f001 fa73 	bl	800bbd4 <ff_convert>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a6f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d004      	beq.n	800a702 <create_name+0x246>
 800a6f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6fa:	3b80      	subs	r3, #128	; 0x80
 800a6fc:	4a23      	ldr	r2, [pc, #140]	; (800a78c <create_name+0x2d0>)
 800a6fe:	5cd3      	ldrb	r3, [r2, r3]
 800a700:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a706:	f043 0302 	orr.w	r3, r3, #2
 800a70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a70e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d007      	beq.n	800a724 <create_name+0x268>
 800a714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a716:	4619      	mov	r1, r3
 800a718:	481d      	ldr	r0, [pc, #116]	; (800a790 <create_name+0x2d4>)
 800a71a:	f7fe fc07 	bl	8008f2c <chk_chr>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d008      	beq.n	800a736 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a724:	235f      	movs	r3, #95	; 0x5f
 800a726:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a72c:	f043 0303 	orr.w	r3, r3, #3
 800a730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a734:	e01b      	b.n	800a76e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a738:	2b40      	cmp	r3, #64	; 0x40
 800a73a:	d909      	bls.n	800a750 <create_name+0x294>
 800a73c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a73e:	2b5a      	cmp	r3, #90	; 0x5a
 800a740:	d806      	bhi.n	800a750 <create_name+0x294>
					b |= 2;
 800a742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a746:	f043 0302 	orr.w	r3, r3, #2
 800a74a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a74e:	e00e      	b.n	800a76e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a752:	2b60      	cmp	r3, #96	; 0x60
 800a754:	d90b      	bls.n	800a76e <create_name+0x2b2>
 800a756:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a758:	2b7a      	cmp	r3, #122	; 0x7a
 800a75a:	d808      	bhi.n	800a76e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a75c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a760:	f043 0301 	orr.w	r3, r3, #1
 800a764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a76a:	3b20      	subs	r3, #32
 800a76c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	623a      	str	r2, [r7, #32]
 800a774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a776:	b2d1      	uxtb	r1, r2
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	4413      	add	r3, r2
 800a77c:	460a      	mov	r2, r1
 800a77e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a782:	e763      	b.n	800a64c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a784:	bf00      	nop
 800a786:	e006      	b.n	800a796 <create_name+0x2da>
 800a788:	0800d808 	.word	0x0800d808
 800a78c:	0801034c 	.word	0x0801034c
 800a790:	0800d814 	.word	0x0800d814
			if (si > di) break;			/* No extension */
 800a794:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a79c:	2be5      	cmp	r3, #229	; 0xe5
 800a79e:	d103      	bne.n	800a7a8 <create_name+0x2ec>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2205      	movs	r2, #5
 800a7a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	2b08      	cmp	r3, #8
 800a7ac:	d104      	bne.n	800a7b8 <create_name+0x2fc>
 800a7ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7bc:	f003 030c 	and.w	r3, r3, #12
 800a7c0:	2b0c      	cmp	r3, #12
 800a7c2:	d005      	beq.n	800a7d0 <create_name+0x314>
 800a7c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	2b03      	cmp	r3, #3
 800a7ce:	d105      	bne.n	800a7dc <create_name+0x320>
 800a7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7d4:	f043 0302 	orr.w	r3, r3, #2
 800a7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a7dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d117      	bne.n	800a818 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a7e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a7ec:	f003 0303 	and.w	r3, r3, #3
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d105      	bne.n	800a800 <create_name+0x344>
 800a7f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7f8:	f043 0310 	orr.w	r3, r3, #16
 800a7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a800:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a804:	f003 030c 	and.w	r3, r3, #12
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d105      	bne.n	800a818 <create_name+0x35c>
 800a80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a810:	f043 0308 	orr.w	r3, r3, #8
 800a814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a81e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800a822:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a824:	4618      	mov	r0, r3
 800a826:	3728      	adds	r7, #40	; 0x28
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a840:	e002      	b.n	800a848 <follow_path+0x1c>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	3301      	adds	r3, #1
 800a846:	603b      	str	r3, [r7, #0]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b2f      	cmp	r3, #47	; 0x2f
 800a84e:	d0f8      	beq.n	800a842 <follow_path+0x16>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b5c      	cmp	r3, #92	; 0x5c
 800a856:	d0f4      	beq.n	800a842 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	2200      	movs	r2, #0
 800a85c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	2b1f      	cmp	r3, #31
 800a864:	d80a      	bhi.n	800a87c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2280      	movs	r2, #128	; 0x80
 800a86a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a86e:	2100      	movs	r1, #0
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff f8ff 	bl	8009a74 <dir_sdi>
 800a876:	4603      	mov	r3, r0
 800a878:	75fb      	strb	r3, [r7, #23]
 800a87a:	e048      	b.n	800a90e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a87c:	463b      	mov	r3, r7
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff fe1b 	bl	800a4bc <create_name>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d139      	bne.n	800a904 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff fc5b 	bl	800a14c <dir_find>
 800a896:	4603      	mov	r3, r0
 800a898:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a8a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00a      	beq.n	800a8be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	d12c      	bne.n	800a908 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
 800a8b0:	f003 0304 	and.w	r3, r3, #4
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d127      	bne.n	800a908 <follow_path+0xdc>
 800a8b8:	2305      	movs	r3, #5
 800a8ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a8bc:	e024      	b.n	800a908 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a8be:	7afb      	ldrb	r3, [r7, #11]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d121      	bne.n	800a90c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	799b      	ldrb	r3, [r3, #6]
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d102      	bne.n	800a8da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a8d4:	2305      	movs	r3, #5
 800a8d6:	75fb      	strb	r3, [r7, #23]
 800a8d8:	e019      	b.n	800a90e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	8992      	ldrh	r2, [r2, #12]
 800a8e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8ec:	fb00 f202 	mul.w	r2, r0, r2
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	440b      	add	r3, r1
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fa62 	bl	8009dc0 <ld_clust>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a902:	e7bb      	b.n	800a87c <follow_path+0x50>
			if (res != FR_OK) break;
 800a904:	bf00      	nop
 800a906:	e002      	b.n	800a90e <follow_path+0xe2>
				break;
 800a908:	bf00      	nop
 800a90a:	e000      	b.n	800a90e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a90c:	bf00      	nop
			}
		}
	}

	return res;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a920:	f04f 33ff 	mov.w	r3, #4294967295
 800a924:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d031      	beq.n	800a992 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	e002      	b.n	800a93c <get_ldnumber+0x24>
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	3301      	adds	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	2b1f      	cmp	r3, #31
 800a942:	d903      	bls.n	800a94c <get_ldnumber+0x34>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b3a      	cmp	r3, #58	; 0x3a
 800a94a:	d1f4      	bne.n	800a936 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b3a      	cmp	r3, #58	; 0x3a
 800a952:	d11c      	bne.n	800a98e <get_ldnumber+0x76>
			tp = *path;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	60fa      	str	r2, [r7, #12]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	3b30      	subs	r3, #48	; 0x30
 800a964:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b09      	cmp	r3, #9
 800a96a:	d80e      	bhi.n	800a98a <get_ldnumber+0x72>
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	429a      	cmp	r2, r3
 800a972:	d10a      	bne.n	800a98a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d107      	bne.n	800a98a <get_ldnumber+0x72>
					vol = (int)i;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	3301      	adds	r3, #1
 800a982:	617b      	str	r3, [r7, #20]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	e002      	b.n	800a994 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a98e:	2300      	movs	r3, #0
 800a990:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a992:	693b      	ldr	r3, [r7, #16]
}
 800a994:	4618      	mov	r0, r3
 800a996:	371c      	adds	r7, #28
 800a998:	46bd      	mov	sp, r7
 800a99a:	bc80      	pop	{r7}
 800a99c:	4770      	bx	lr
	...

0800a9a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	70da      	strb	r2, [r3, #3]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7fe fc7a 	bl	80092b4 <move_window>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <check_fs+0x2a>
 800a9c6:	2304      	movs	r3, #4
 800a9c8:	e038      	b.n	800aa3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3338      	adds	r3, #56	; 0x38
 800a9ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe f9cc 	bl	8008d70 <ld_word>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d001      	beq.n	800a9e8 <check_fs+0x48>
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e029      	b.n	800aa3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9ee:	2be9      	cmp	r3, #233	; 0xe9
 800a9f0:	d009      	beq.n	800aa06 <check_fs+0x66>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9f8:	2beb      	cmp	r3, #235	; 0xeb
 800a9fa:	d11e      	bne.n	800aa3a <check_fs+0x9a>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa02:	2b90      	cmp	r3, #144	; 0x90
 800aa04:	d119      	bne.n	800aa3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3338      	adds	r3, #56	; 0x38
 800aa0a:	3336      	adds	r3, #54	; 0x36
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe f9c6 	bl	8008d9e <ld_dword>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa18:	4a0a      	ldr	r2, [pc, #40]	; (800aa44 <check_fs+0xa4>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d101      	bne.n	800aa22 <check_fs+0x82>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	e00c      	b.n	800aa3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3338      	adds	r3, #56	; 0x38
 800aa26:	3352      	adds	r3, #82	; 0x52
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fe f9b8 	bl	8008d9e <ld_dword>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	4a05      	ldr	r2, [pc, #20]	; (800aa48 <check_fs+0xa8>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d101      	bne.n	800aa3a <check_fs+0x9a>
 800aa36:	2300      	movs	r3, #0
 800aa38:	e000      	b.n	800aa3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800aa3a:	2302      	movs	r3, #2
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	00544146 	.word	0x00544146
 800aa48:	33544146 	.word	0x33544146

0800aa4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b096      	sub	sp, #88	; 0x58
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff ff59 	bl	800a918 <get_ldnumber>
 800aa66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	da01      	bge.n	800aa72 <find_volume+0x26>
 800aa6e:	230b      	movs	r3, #11
 800aa70:	e265      	b.n	800af3e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aa72:	4a9f      	ldr	r2, [pc, #636]	; (800acf0 <find_volume+0x2a4>)
 800aa74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <find_volume+0x3a>
 800aa82:	230c      	movs	r3, #12
 800aa84:	e25b      	b.n	800af3e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	f023 0301 	bic.w	r3, r3, #1
 800aa92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01a      	beq.n	800aad2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe f8c7 	bl	8008c34 <disk_status>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aaac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10c      	bne.n	800aad2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <find_volume+0x82>
 800aabe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aac2:	f003 0304 	and.w	r3, r3, #4
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aaca:	230a      	movs	r3, #10
 800aacc:	e237      	b.n	800af3e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800aace:	2300      	movs	r3, #0
 800aad0:	e235      	b.n	800af3e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad4:	2200      	movs	r2, #0
 800aad6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aade:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fe f8bf 	bl	8008c68 <disk_initialize>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800aaf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aafc:	2303      	movs	r3, #3
 800aafe:	e21e      	b.n	800af3e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d007      	beq.n	800ab16 <find_volume+0xca>
 800ab06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab0a:	f003 0304 	and.w	r3, r3, #4
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ab12:	230a      	movs	r3, #10
 800ab14:	e213      	b.n	800af3e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ab16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab18:	7858      	ldrb	r0, [r3, #1]
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	330c      	adds	r3, #12
 800ab1e:	461a      	mov	r2, r3
 800ab20:	2102      	movs	r1, #2
 800ab22:	f7fe f907 	bl	8008d34 <disk_ioctl>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <find_volume+0xe4>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e206      	b.n	800af3e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	899b      	ldrh	r3, [r3, #12]
 800ab34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab38:	d80d      	bhi.n	800ab56 <find_volume+0x10a>
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	899b      	ldrh	r3, [r3, #12]
 800ab3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab42:	d308      	bcc.n	800ab56 <find_volume+0x10a>
 800ab44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab46:	899b      	ldrh	r3, [r3, #12]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4c:	899b      	ldrh	r3, [r3, #12]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	4013      	ands	r3, r2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d001      	beq.n	800ab5a <find_volume+0x10e>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e1f1      	b.n	800af3e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ab5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab62:	f7ff ff1d 	bl	800a9a0 <check_fs>
 800ab66:	4603      	mov	r3, r0
 800ab68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ab6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d149      	bne.n	800ac08 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ab74:	2300      	movs	r3, #0
 800ab76:	643b      	str	r3, [r7, #64]	; 0x40
 800ab78:	e01e      	b.n	800abb8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ab80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ab88:	4413      	add	r3, r2
 800ab8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	3304      	adds	r3, #4
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d006      	beq.n	800aba4 <find_volume+0x158>
 800ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab98:	3308      	adds	r3, #8
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe f8ff 	bl	8008d9e <ld_dword>
 800aba0:	4602      	mov	r2, r0
 800aba2:	e000      	b.n	800aba6 <find_volume+0x15a>
 800aba4:	2200      	movs	r2, #0
 800aba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	3358      	adds	r3, #88	; 0x58
 800abac:	443b      	add	r3, r7
 800abae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800abb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abb4:	3301      	adds	r3, #1
 800abb6:	643b      	str	r3, [r7, #64]	; 0x40
 800abb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abba:	2b03      	cmp	r3, #3
 800abbc:	d9dd      	bls.n	800ab7a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800abbe:	2300      	movs	r3, #0
 800abc0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800abc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <find_volume+0x182>
 800abc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abca:	3b01      	subs	r3, #1
 800abcc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800abce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	3358      	adds	r3, #88	; 0x58
 800abd4:	443b      	add	r3, r7
 800abd6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800abda:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800abdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d005      	beq.n	800abee <find_volume+0x1a2>
 800abe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abe6:	f7ff fedb 	bl	800a9a0 <check_fs>
 800abea:	4603      	mov	r3, r0
 800abec:	e000      	b.n	800abf0 <find_volume+0x1a4>
 800abee:	2303      	movs	r3, #3
 800abf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800abf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d905      	bls.n	800ac08 <find_volume+0x1bc>
 800abfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abfe:	3301      	adds	r3, #1
 800ac00:	643b      	str	r3, [r7, #64]	; 0x40
 800ac02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d9e2      	bls.n	800abce <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ac08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d101      	bne.n	800ac14 <find_volume+0x1c8>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e194      	b.n	800af3e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ac14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d901      	bls.n	800ac20 <find_volume+0x1d4>
 800ac1c:	230d      	movs	r3, #13
 800ac1e:	e18e      	b.n	800af3e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac22:	3338      	adds	r3, #56	; 0x38
 800ac24:	330b      	adds	r3, #11
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe f8a2 	bl	8008d70 <ld_word>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	899b      	ldrh	r3, [r3, #12]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d001      	beq.n	800ac3c <find_volume+0x1f0>
 800ac38:	230d      	movs	r3, #13
 800ac3a:	e180      	b.n	800af3e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3e:	3338      	adds	r3, #56	; 0x38
 800ac40:	3316      	adds	r3, #22
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe f894 	bl	8008d70 <ld_word>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ac4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d106      	bne.n	800ac60 <find_volume+0x214>
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	3338      	adds	r3, #56	; 0x38
 800ac56:	3324      	adds	r3, #36	; 0x24
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe f8a0 	bl	8008d9e <ld_dword>
 800ac5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ac60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac64:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ac66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac68:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ac70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac72:	789b      	ldrb	r3, [r3, #2]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d005      	beq.n	800ac84 <find_volume+0x238>
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	789b      	ldrb	r3, [r3, #2]
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d001      	beq.n	800ac84 <find_volume+0x238>
 800ac80:	230d      	movs	r3, #13
 800ac82:	e15c      	b.n	800af3e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	789b      	ldrb	r3, [r3, #2]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac8c:	fb02 f303 	mul.w	r3, r2, r3
 800ac90:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	895b      	ldrh	r3, [r3, #10]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d008      	beq.n	800acb8 <find_volume+0x26c>
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	895b      	ldrh	r3, [r3, #10]
 800acaa:	461a      	mov	r2, r3
 800acac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acae:	895b      	ldrh	r3, [r3, #10]
 800acb0:	3b01      	subs	r3, #1
 800acb2:	4013      	ands	r3, r2
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <find_volume+0x270>
 800acb8:	230d      	movs	r3, #13
 800acba:	e140      	b.n	800af3e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800acbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbe:	3338      	adds	r3, #56	; 0x38
 800acc0:	3311      	adds	r3, #17
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe f854 	bl	8008d70 <ld_word>
 800acc8:	4603      	mov	r3, r0
 800acca:	461a      	mov	r2, r3
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	891b      	ldrh	r3, [r3, #8]
 800acd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acd6:	8992      	ldrh	r2, [r2, #12]
 800acd8:	0952      	lsrs	r2, r2, #5
 800acda:	b292      	uxth	r2, r2
 800acdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ace0:	fb01 f202 	mul.w	r2, r1, r2
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d003      	beq.n	800acf4 <find_volume+0x2a8>
 800acec:	230d      	movs	r3, #13
 800acee:	e126      	b.n	800af3e <find_volume+0x4f2>
 800acf0:	20003270 	.word	0x20003270

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800acf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf6:	3338      	adds	r3, #56	; 0x38
 800acf8:	3313      	adds	r3, #19
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe f838 	bl	8008d70 <ld_word>
 800ad00:	4603      	mov	r3, r0
 800ad02:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ad04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <find_volume+0x2cc>
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0c:	3338      	adds	r3, #56	; 0x38
 800ad0e:	3320      	adds	r3, #32
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe f844 	bl	8008d9e <ld_dword>
 800ad16:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	3338      	adds	r3, #56	; 0x38
 800ad1c:	330e      	adds	r3, #14
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe f826 	bl	8008d70 <ld_word>
 800ad24:	4603      	mov	r3, r0
 800ad26:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ad28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <find_volume+0x2e6>
 800ad2e:	230d      	movs	r3, #13
 800ad30:	e105      	b.n	800af3e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ad32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad36:	4413      	add	r3, r2
 800ad38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad3a:	8911      	ldrh	r1, [r2, #8]
 800ad3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad3e:	8992      	ldrh	r2, [r2, #12]
 800ad40:	0952      	lsrs	r2, r2, #5
 800ad42:	b292      	uxth	r2, r2
 800ad44:	fbb1 f2f2 	udiv	r2, r1, r2
 800ad48:	b292      	uxth	r2, r2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ad4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d201      	bcs.n	800ad5a <find_volume+0x30e>
 800ad56:	230d      	movs	r3, #13
 800ad58:	e0f1      	b.n	800af3e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ad5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad62:	8952      	ldrh	r2, [r2, #10]
 800ad64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <find_volume+0x328>
 800ad70:	230d      	movs	r3, #13
 800ad72:	e0e4      	b.n	800af3e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ad74:	2303      	movs	r3, #3
 800ad76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d802      	bhi.n	800ad8a <find_volume+0x33e>
 800ad84:	2302      	movs	r3, #2
 800ad86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d802      	bhi.n	800ad9a <find_volume+0x34e>
 800ad94:	2301      	movs	r3, #1
 800ad96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	1c9a      	adds	r2, r3, #2
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ada2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ada6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ada8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800adaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adac:	441a      	add	r2, r3
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800adb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb6:	441a      	add	r2, r3
 800adb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adba:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800adbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d11e      	bne.n	800ae02 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800adc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc6:	3338      	adds	r3, #56	; 0x38
 800adc8:	332a      	adds	r3, #42	; 0x2a
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fd ffd0 	bl	8008d70 <ld_word>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d001      	beq.n	800adda <find_volume+0x38e>
 800add6:	230d      	movs	r3, #13
 800add8:	e0b1      	b.n	800af3e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800adda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800addc:	891b      	ldrh	r3, [r3, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <find_volume+0x39a>
 800ade2:	230d      	movs	r3, #13
 800ade4:	e0ab      	b.n	800af3e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	3338      	adds	r3, #56	; 0x38
 800adea:	332c      	adds	r3, #44	; 0x2c
 800adec:	4618      	mov	r0, r3
 800adee:	f7fd ffd6 	bl	8008d9e <ld_dword>
 800adf2:	4602      	mov	r2, r0
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	647b      	str	r3, [r7, #68]	; 0x44
 800ae00:	e01f      	b.n	800ae42 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	891b      	ldrh	r3, [r3, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <find_volume+0x3c2>
 800ae0a:	230d      	movs	r3, #13
 800ae0c:	e097      	b.n	800af3e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae14:	441a      	add	r2, r3
 800ae16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae18:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ae1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d103      	bne.n	800ae2a <find_volume+0x3de>
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	005b      	lsls	r3, r3, #1
 800ae28:	e00a      	b.n	800ae40 <find_volume+0x3f4>
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	69da      	ldr	r2, [r3, #28]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	4413      	add	r3, r2
 800ae34:	085a      	lsrs	r2, r3, #1
 800ae36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ae40:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	6a1a      	ldr	r2, [r3, #32]
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	899b      	ldrh	r3, [r3, #12]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae4e:	440b      	add	r3, r1
 800ae50:	3b01      	subs	r3, #1
 800ae52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae54:	8989      	ldrh	r1, [r1, #12]
 800ae56:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d201      	bcs.n	800ae62 <find_volume+0x416>
 800ae5e:	230d      	movs	r3, #13
 800ae60:	e06d      	b.n	800af3e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae64:	f04f 32ff 	mov.w	r2, #4294967295
 800ae68:	619a      	str	r2, [r3, #24]
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6c:	699a      	ldr	r2, [r3, #24]
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae70:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae74:	2280      	movs	r2, #128	; 0x80
 800ae76:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ae78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d149      	bne.n	800af14 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ae80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae82:	3338      	adds	r3, #56	; 0x38
 800ae84:	3330      	adds	r3, #48	; 0x30
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fd ff72 	bl	8008d70 <ld_word>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d140      	bne.n	800af14 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ae92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae94:	3301      	adds	r3, #1
 800ae96:	4619      	mov	r1, r3
 800ae98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae9a:	f7fe fa0b 	bl	80092b4 <move_window>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d137      	bne.n	800af14 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800aea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea6:	2200      	movs	r2, #0
 800aea8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aeaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeac:	3338      	adds	r3, #56	; 0x38
 800aeae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fd ff5c 	bl	8008d70 <ld_word>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	461a      	mov	r2, r3
 800aebc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d127      	bne.n	800af14 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	3338      	adds	r3, #56	; 0x38
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fd ff68 	bl	8008d9e <ld_dword>
 800aece:	4603      	mov	r3, r0
 800aed0:	4a1d      	ldr	r2, [pc, #116]	; (800af48 <find_volume+0x4fc>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d11e      	bne.n	800af14 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed8:	3338      	adds	r3, #56	; 0x38
 800aeda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fd ff5d 	bl	8008d9e <ld_dword>
 800aee4:	4603      	mov	r3, r0
 800aee6:	4a19      	ldr	r2, [pc, #100]	; (800af4c <find_volume+0x500>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d113      	bne.n	800af14 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeee:	3338      	adds	r3, #56	; 0x38
 800aef0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fd ff52 	bl	8008d9e <ld_dword>
 800aefa:	4602      	mov	r2, r0
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	3338      	adds	r3, #56	; 0x38
 800af04:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fd ff48 	bl	8008d9e <ld_dword>
 800af0e:	4602      	mov	r2, r0
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800af1a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800af1c:	4b0c      	ldr	r3, [pc, #48]	; (800af50 <find_volume+0x504>)
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	3301      	adds	r3, #1
 800af22:	b29a      	uxth	r2, r3
 800af24:	4b0a      	ldr	r3, [pc, #40]	; (800af50 <find_volume+0x504>)
 800af26:	801a      	strh	r2, [r3, #0]
 800af28:	4b09      	ldr	r3, [pc, #36]	; (800af50 <find_volume+0x504>)
 800af2a:	881a      	ldrh	r2, [r3, #0]
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	4a08      	ldr	r2, [pc, #32]	; (800af54 <find_volume+0x508>)
 800af34:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800af36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af38:	f7fe f954 	bl	80091e4 <clear_lock>
#endif
	return FR_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3758      	adds	r7, #88	; 0x58
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	41615252 	.word	0x41615252
 800af4c:	61417272 	.word	0x61417272
 800af50:	20003274 	.word	0x20003274
 800af54:	20003298 	.word	0x20003298

0800af58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800af62:	2309      	movs	r3, #9
 800af64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d01c      	beq.n	800afa6 <validate+0x4e>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d018      	beq.n	800afa6 <validate+0x4e>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d013      	beq.n	800afa6 <validate+0x4e>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	889a      	ldrh	r2, [r3, #4]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	88db      	ldrh	r3, [r3, #6]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d10c      	bne.n	800afa6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	785b      	ldrb	r3, [r3, #1]
 800af92:	4618      	mov	r0, r3
 800af94:	f7fd fe4e 	bl	8008c34 <disk_status>
 800af98:	4603      	mov	r3, r0
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <validate+0x4e>
			res = FR_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800afa6:	7bfb      	ldrb	r3, [r7, #15]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d102      	bne.n	800afb2 <validate+0x5a>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	e000      	b.n	800afb4 <validate+0x5c>
 800afb2:	2300      	movs	r3, #0
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	6013      	str	r3, [r2, #0]
	return res;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
	...

0800afc4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	4613      	mov	r3, r2
 800afd0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800afd6:	f107 0310 	add.w	r3, r7, #16
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff fc9c 	bl	800a918 <get_ldnumber>
 800afe0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	da01      	bge.n	800afec <f_mount+0x28>
 800afe8:	230b      	movs	r3, #11
 800afea:	e02b      	b.n	800b044 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800afec:	4a17      	ldr	r2, [pc, #92]	; (800b04c <f_mount+0x88>)
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aff4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d005      	beq.n	800b008 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800affc:	69b8      	ldr	r0, [r7, #24]
 800affe:	f7fe f8f1 	bl	80091e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2200      	movs	r2, #0
 800b006:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	490d      	ldr	r1, [pc, #52]	; (800b04c <f_mount+0x88>)
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <f_mount+0x66>
 800b024:	79fb      	ldrb	r3, [r7, #7]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d001      	beq.n	800b02e <f_mount+0x6a>
 800b02a:	2300      	movs	r3, #0
 800b02c:	e00a      	b.n	800b044 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b02e:	f107 010c 	add.w	r1, r7, #12
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	2200      	movs	r2, #0
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff fd07 	bl	800aa4c <find_volume>
 800b03e:	4603      	mov	r3, r0
 800b040:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b042:	7dfb      	ldrb	r3, [r7, #23]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3720      	adds	r7, #32
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20003270 	.word	0x20003270

0800b050 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b09a      	sub	sp, #104	; 0x68
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	4613      	mov	r3, r2
 800b05c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <f_open+0x18>
 800b064:	2309      	movs	r3, #9
 800b066:	e1bb      	b.n	800b3e0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b06e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b070:	79fa      	ldrb	r2, [r7, #7]
 800b072:	f107 0114 	add.w	r1, r7, #20
 800b076:	f107 0308 	add.w	r3, r7, #8
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fce6 	bl	800aa4c <find_volume>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f040 819f 	bne.w	800b3ce <f_open+0x37e>
		dj.obj.fs = fs;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	f107 0318 	add.w	r3, r7, #24
 800b09a:	4611      	mov	r1, r2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fbc5 	bl	800a82c <follow_path>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b0a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d11a      	bne.n	800b0e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b0b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0b4:	b25b      	sxtb	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	da03      	bge.n	800b0c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b0ba:	2306      	movs	r3, #6
 800b0bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b0c0:	e011      	b.n	800b0e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	f023 0301 	bic.w	r3, r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bf14      	ite	ne
 800b0cc:	2301      	movne	r3, #1
 800b0ce:	2300      	moveq	r3, #0
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	f107 0318 	add.w	r3, r7, #24
 800b0d8:	4611      	mov	r1, r2
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fd ff40 	bl	8008f60 <chk_lock>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b0e6:	79fb      	ldrb	r3, [r7, #7]
 800b0e8:	f003 031c 	and.w	r3, r3, #28
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d07f      	beq.n	800b1f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b0f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d017      	beq.n	800b128 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b0f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d10e      	bne.n	800b11e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b100:	f7fd ff88 	bl	8009014 <enq_lock>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d006      	beq.n	800b118 <f_open+0xc8>
 800b10a:	f107 0318 	add.w	r3, r7, #24
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff f8dc 	bl	800a2cc <dir_register>
 800b114:	4603      	mov	r3, r0
 800b116:	e000      	b.n	800b11a <f_open+0xca>
 800b118:	2312      	movs	r3, #18
 800b11a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	f043 0308 	orr.w	r3, r3, #8
 800b124:	71fb      	strb	r3, [r7, #7]
 800b126:	e010      	b.n	800b14a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b128:	7fbb      	ldrb	r3, [r7, #30]
 800b12a:	f003 0311 	and.w	r3, r3, #17
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <f_open+0xea>
					res = FR_DENIED;
 800b132:	2307      	movs	r3, #7
 800b134:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b138:	e007      	b.n	800b14a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	f003 0304 	and.w	r3, r3, #4
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <f_open+0xfa>
 800b144:	2308      	movs	r3, #8
 800b146:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b14a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d168      	bne.n	800b224 <f_open+0x1d4>
 800b152:	79fb      	ldrb	r3, [r7, #7]
 800b154:	f003 0308 	and.w	r3, r3, #8
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d063      	beq.n	800b224 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b15c:	f7fd fd08 	bl	8008b70 <get_fattime>
 800b160:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b164:	330e      	adds	r3, #14
 800b166:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fd fe54 	bl	8008e16 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	3316      	adds	r3, #22
 800b172:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b174:	4618      	mov	r0, r3
 800b176:	f7fd fe4e 	bl	8008e16 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	330b      	adds	r3, #11
 800b17e:	2220      	movs	r2, #32
 800b180:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b186:	4611      	mov	r1, r2
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fe19 	bl	8009dc0 <ld_clust>
 800b18e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b194:	2200      	movs	r2, #0
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe fe31 	bl	8009dfe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	331c      	adds	r3, #28
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fd fe37 	bl	8008e16 <st_dword>
					fs->wflag = 1;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d037      	beq.n	800b224 <f_open+0x1d4>
						dw = fs->winsect;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b1ba:	f107 0318 	add.w	r3, r7, #24
 800b1be:	2200      	movs	r2, #0
 800b1c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fe fb22 	bl	800980c <remove_chain>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b1ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d126      	bne.n	800b224 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe f86a 	bl	80092b4 <move_window>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1ea:	3a01      	subs	r2, #1
 800b1ec:	615a      	str	r2, [r3, #20]
 800b1ee:	e019      	b.n	800b224 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b1f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d115      	bne.n	800b224 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b1f8:	7fbb      	ldrb	r3, [r7, #30]
 800b1fa:	f003 0310 	and.w	r3, r3, #16
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <f_open+0x1ba>
					res = FR_NO_FILE;
 800b202:	2304      	movs	r3, #4
 800b204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b208:	e00c      	b.n	800b224 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d007      	beq.n	800b224 <f_open+0x1d4>
 800b214:	7fbb      	ldrb	r3, [r7, #30]
 800b216:	f003 0301 	and.w	r3, r3, #1
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <f_open+0x1d4>
						res = FR_DENIED;
 800b21e:	2307      	movs	r3, #7
 800b220:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b224:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d128      	bne.n	800b27e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b22c:	79fb      	ldrb	r3, [r7, #7]
 800b22e:	f003 0308 	and.w	r3, r3, #8
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	f023 0301 	bic.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	bf14      	ite	ne
 800b256:	2301      	movne	r3, #1
 800b258:	2300      	moveq	r3, #0
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	f107 0318 	add.w	r3, r7, #24
 800b262:	4611      	mov	r1, r2
 800b264:	4618      	mov	r0, r3
 800b266:	f7fd fef5 	bl	8009054 <inc_lock>
 800b26a:	4602      	mov	r2, r0
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d102      	bne.n	800b27e <f_open+0x22e>
 800b278:	2302      	movs	r3, #2
 800b27a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b27e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b282:	2b00      	cmp	r3, #0
 800b284:	f040 80a3 	bne.w	800b3ce <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b28c:	4611      	mov	r1, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fe fd96 	bl	8009dc0 <ld_clust>
 800b294:	4602      	mov	r2, r0
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	331c      	adds	r3, #28
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7fd fd7d 	bl	8008d9e <ld_dword>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	88da      	ldrh	r2, [r3, #6]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	79fa      	ldrb	r2, [r7, #7]
 800b2c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3330      	adds	r3, #48	; 0x30
 800b2da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fd fde3 	bl	8008eac <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b2e6:	79fb      	ldrb	r3, [r7, #7]
 800b2e8:	f003 0320 	and.w	r3, r3, #32
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d06e      	beq.n	800b3ce <f_open+0x37e>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d06a      	beq.n	800b3ce <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	895b      	ldrh	r3, [r3, #10]
 800b304:	461a      	mov	r2, r3
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	899b      	ldrh	r3, [r3, #12]
 800b30a:	fb02 f303 	mul.w	r3, r2, r3
 800b30e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b31c:	e016      	b.n	800b34c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe f882 	bl	800942c <get_fat>
 800b328:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b32a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d802      	bhi.n	800b336 <f_open+0x2e6>
 800b330:	2302      	movs	r3, #2
 800b332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b33c:	d102      	bne.n	800b344 <f_open+0x2f4>
 800b33e:	2301      	movs	r3, #1
 800b340:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b344:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b34c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <f_open+0x30c>
 800b354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b358:	429a      	cmp	r2, r3
 800b35a:	d8e0      	bhi.n	800b31e <f_open+0x2ce>
				}
				fp->clust = clst;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b360:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b362:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b366:	2b00      	cmp	r3, #0
 800b368:	d131      	bne.n	800b3ce <f_open+0x37e>
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	899b      	ldrh	r3, [r3, #12]
 800b36e:	461a      	mov	r2, r3
 800b370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b372:	fbb3 f1f2 	udiv	r1, r3, r2
 800b376:	fb01 f202 	mul.w	r2, r1, r2
 800b37a:	1a9b      	subs	r3, r3, r2
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d026      	beq.n	800b3ce <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe f833 	bl	80093f0 <clust2sect>
 800b38a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d103      	bne.n	800b39a <f_open+0x34a>
						res = FR_INT_ERR;
 800b392:	2302      	movs	r3, #2
 800b394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b398:	e019      	b.n	800b3ce <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	899b      	ldrh	r3, [r3, #12]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3a8:	441a      	add	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	7858      	ldrb	r0, [r3, #1]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a1a      	ldr	r2, [r3, #32]
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f7fd fc79 	bl	8008cb4 <disk_read>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <f_open+0x37e>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b3ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <f_open+0x38c>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b3dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3768      	adds	r7, #104	; 0x68
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08e      	sub	sp, #56	; 0x38
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f107 0214 	add.w	r2, r7, #20
 800b406:	4611      	mov	r1, r2
 800b408:	4618      	mov	r0, r3
 800b40a:	f7ff fda5 	bl	800af58 <validate>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d107      	bne.n	800b42c <f_read+0x44>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	7d5b      	ldrb	r3, [r3, #21]
 800b420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b424:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <f_read+0x4a>
 800b42c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b430:	e135      	b.n	800b69e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	7d1b      	ldrb	r3, [r3, #20]
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <f_read+0x5a>
 800b43e:	2307      	movs	r3, #7
 800b440:	e12d      	b.n	800b69e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	68da      	ldr	r2, [r3, #12]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	429a      	cmp	r2, r3
 800b454:	f240 811e 	bls.w	800b694 <f_read+0x2ac>
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b45c:	e11a      	b.n	800b694 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	8992      	ldrh	r2, [r2, #12]
 800b466:	fbb3 f1f2 	udiv	r1, r3, r2
 800b46a:	fb01 f202 	mul.w	r2, r1, r2
 800b46e:	1a9b      	subs	r3, r3, r2
 800b470:	2b00      	cmp	r3, #0
 800b472:	f040 80d5 	bne.w	800b620 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	8992      	ldrh	r2, [r2, #12]
 800b47e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	8952      	ldrh	r2, [r2, #10]
 800b486:	3a01      	subs	r2, #1
 800b488:	4013      	ands	r3, r2
 800b48a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d12f      	bne.n	800b4f2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d103      	bne.n	800b4a2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	633b      	str	r3, [r7, #48]	; 0x30
 800b4a0:	e013      	b.n	800b4ca <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d007      	beq.n	800b4ba <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7fe faa8 	bl	8009a06 <clmt_clust>
 800b4b6:	6338      	str	r0, [r7, #48]	; 0x30
 800b4b8:	e007      	b.n	800b4ca <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	69db      	ldr	r3, [r3, #28]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	f7fd ffb2 	bl	800942c <get_fat>
 800b4c8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d804      	bhi.n	800b4da <f_read+0xf2>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	755a      	strb	r2, [r3, #21]
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	e0e1      	b.n	800b69e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e0:	d104      	bne.n	800b4ec <f_read+0x104>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	755a      	strb	r2, [r3, #21]
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e0d8      	b.n	800b69e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b4f2:	697a      	ldr	r2, [r7, #20]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	4610      	mov	r0, r2
 800b4fc:	f7fd ff78 	bl	80093f0 <clust2sect>
 800b500:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d104      	bne.n	800b512 <f_read+0x12a>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2202      	movs	r2, #2
 800b50c:	755a      	strb	r2, [r3, #21]
 800b50e:	2302      	movs	r3, #2
 800b510:	e0c5      	b.n	800b69e <f_read+0x2b6>
			sect += csect;
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	899b      	ldrh	r3, [r3, #12]
 800b51e:	461a      	mov	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	fbb3 f3f2 	udiv	r3, r3, r2
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d041      	beq.n	800b5b2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b52e:	69fa      	ldr	r2, [r7, #28]
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	4413      	add	r3, r2
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	8952      	ldrh	r2, [r2, #10]
 800b538:	4293      	cmp	r3, r2
 800b53a:	d905      	bls.n	800b548 <f_read+0x160>
					cc = fs->csize - csect;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	895b      	ldrh	r3, [r3, #10]
 800b540:	461a      	mov	r2, r3
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	7858      	ldrb	r0, [r3, #1]
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b552:	f7fd fbaf 	bl	8008cb4 <disk_read>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d004      	beq.n	800b566 <f_read+0x17e>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2201      	movs	r2, #1
 800b560:	755a      	strb	r2, [r3, #21]
 800b562:	2301      	movs	r3, #1
 800b564:	e09b      	b.n	800b69e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	7d1b      	ldrb	r3, [r3, #20]
 800b56a:	b25b      	sxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	da18      	bge.n	800b5a2 <f_read+0x1ba>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6a1a      	ldr	r2, [r3, #32]
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d911      	bls.n	800b5a2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6a1a      	ldr	r2, [r3, #32]
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	8992      	ldrh	r2, [r2, #12]
 800b58a:	fb02 f303 	mul.w	r3, r2, r3
 800b58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b590:	18d0      	adds	r0, r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	899b      	ldrh	r3, [r3, #12]
 800b59c:	461a      	mov	r2, r3
 800b59e:	f7fd fc65 	bl	8008e6c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	899b      	ldrh	r3, [r3, #12]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5aa:	fb02 f303 	mul.w	r3, r2, r3
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b5b0:	e05c      	b.n	800b66c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d02e      	beq.n	800b61a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	7d1b      	ldrb	r3, [r3, #20]
 800b5c0:	b25b      	sxtb	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	da18      	bge.n	800b5f8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	7858      	ldrb	r0, [r3, #1]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6a1a      	ldr	r2, [r3, #32]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f7fd fb8d 	bl	8008cf4 <disk_write>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d004      	beq.n	800b5ea <f_read+0x202>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	755a      	strb	r2, [r3, #21]
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e059      	b.n	800b69e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	7d1b      	ldrb	r3, [r3, #20]
 800b5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	7858      	ldrb	r0, [r3, #1]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b602:	2301      	movs	r3, #1
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	f7fd fb55 	bl	8008cb4 <disk_read>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d004      	beq.n	800b61a <f_read+0x232>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2201      	movs	r2, #1
 800b614:	755a      	strb	r2, [r3, #21]
 800b616:	2301      	movs	r3, #1
 800b618:	e041      	b.n	800b69e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	899b      	ldrh	r3, [r3, #12]
 800b624:	4618      	mov	r0, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	8992      	ldrh	r2, [r2, #12]
 800b62e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b632:	fb01 f202 	mul.w	r2, r1, r2
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	1ac3      	subs	r3, r0, r3
 800b63a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d901      	bls.n	800b648 <f_read+0x260>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	8992      	ldrh	r2, [r2, #12]
 800b656:	fbb3 f0f2 	udiv	r0, r3, r2
 800b65a:	fb00 f202 	mul.w	r2, r0, r2
 800b65e:	1a9b      	subs	r3, r3, r2
 800b660:	440b      	add	r3, r1
 800b662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b664:	4619      	mov	r1, r3
 800b666:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b668:	f7fd fc00 	bl	8008e6c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b670:	4413      	add	r3, r2
 800b672:	627b      	str	r3, [r7, #36]	; 0x24
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	699a      	ldr	r2, [r3, #24]
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	441a      	add	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	619a      	str	r2, [r3, #24]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	441a      	add	r2, r3
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	f47f aee1 	bne.w	800b45e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3738      	adds	r7, #56	; 0x38
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b08c      	sub	sp, #48	; 0x30
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	60b9      	str	r1, [r7, #8]
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f107 0210 	add.w	r2, r7, #16
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7ff fc46 	bl	800af58 <validate>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b6d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d107      	bne.n	800b6ea <f_write+0x44>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	7d5b      	ldrb	r3, [r3, #21]
 800b6de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <f_write+0x4a>
 800b6ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6ee:	e16a      	b.n	800b9c6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	7d1b      	ldrb	r3, [r3, #20]
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <f_write+0x5a>
 800b6fc:	2307      	movs	r3, #7
 800b6fe:	e162      	b.n	800b9c6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	699a      	ldr	r2, [r3, #24]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	441a      	add	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	f080 814c 	bcs.w	800b9aa <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	43db      	mvns	r3, r3
 800b718:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b71a:	e146      	b.n	800b9aa <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	8992      	ldrh	r2, [r2, #12]
 800b724:	fbb3 f1f2 	udiv	r1, r3, r2
 800b728:	fb01 f202 	mul.w	r2, r1, r2
 800b72c:	1a9b      	subs	r3, r3, r2
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f040 80f1 	bne.w	800b916 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	8992      	ldrh	r2, [r2, #12]
 800b73c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	8952      	ldrh	r2, [r2, #10]
 800b744:	3a01      	subs	r2, #1
 800b746:	4013      	ands	r3, r2
 800b748:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d143      	bne.n	800b7d8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	699b      	ldr	r3, [r3, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10c      	bne.n	800b772 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b760:	2b00      	cmp	r3, #0
 800b762:	d11a      	bne.n	800b79a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2100      	movs	r1, #0
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe f8b4 	bl	80098d6 <create_chain>
 800b76e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b770:	e013      	b.n	800b79a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	2b00      	cmp	r3, #0
 800b778:	d007      	beq.n	800b78a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	699b      	ldr	r3, [r3, #24]
 800b77e:	4619      	mov	r1, r3
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f7fe f940 	bl	8009a06 <clmt_clust>
 800b786:	62b8      	str	r0, [r7, #40]	; 0x28
 800b788:	e007      	b.n	800b79a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	69db      	ldr	r3, [r3, #28]
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	f7fe f89f 	bl	80098d6 <create_chain>
 800b798:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 8109 	beq.w	800b9b4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d104      	bne.n	800b7b2 <f_write+0x10c>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	755a      	strb	r2, [r3, #21]
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e109      	b.n	800b9c6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b8:	d104      	bne.n	800b7c4 <f_write+0x11e>
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	755a      	strb	r2, [r3, #21]
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e100      	b.n	800b9c6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7c8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d102      	bne.n	800b7d8 <f_write+0x132>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	7d1b      	ldrb	r3, [r3, #20]
 800b7dc:	b25b      	sxtb	r3, r3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	da18      	bge.n	800b814 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	7858      	ldrb	r0, [r3, #1]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6a1a      	ldr	r2, [r3, #32]
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f7fd fa7f 	bl	8008cf4 <disk_write>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <f_write+0x160>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2201      	movs	r2, #1
 800b800:	755a      	strb	r2, [r3, #21]
 800b802:	2301      	movs	r3, #1
 800b804:	e0df      	b.n	800b9c6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	7d1b      	ldrb	r3, [r3, #20]
 800b80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b80e:	b2da      	uxtb	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b814:	693a      	ldr	r2, [r7, #16]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	69db      	ldr	r3, [r3, #28]
 800b81a:	4619      	mov	r1, r3
 800b81c:	4610      	mov	r0, r2
 800b81e:	f7fd fde7 	bl	80093f0 <clust2sect>
 800b822:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d104      	bne.n	800b834 <f_write+0x18e>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2202      	movs	r2, #2
 800b82e:	755a      	strb	r2, [r3, #21]
 800b830:	2302      	movs	r3, #2
 800b832:	e0c8      	b.n	800b9c6 <f_write+0x320>
			sect += csect;
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	4413      	add	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	899b      	ldrh	r3, [r3, #12]
 800b840:	461a      	mov	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	fbb3 f3f2 	udiv	r3, r3, r2
 800b848:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d043      	beq.n	800b8d8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b850:	69ba      	ldr	r2, [r7, #24]
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	4413      	add	r3, r2
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	8952      	ldrh	r2, [r2, #10]
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d905      	bls.n	800b86a <f_write+0x1c4>
					cc = fs->csize - csect;
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	895b      	ldrh	r3, [r3, #10]
 800b862:	461a      	mov	r2, r3
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	7858      	ldrb	r0, [r3, #1]
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	69f9      	ldr	r1, [r7, #28]
 800b874:	f7fd fa3e 	bl	8008cf4 <disk_write>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d004      	beq.n	800b888 <f_write+0x1e2>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2201      	movs	r2, #1
 800b882:	755a      	strb	r2, [r3, #21]
 800b884:	2301      	movs	r3, #1
 800b886:	e09e      	b.n	800b9c6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6a1a      	ldr	r2, [r3, #32]
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	6a3a      	ldr	r2, [r7, #32]
 800b892:	429a      	cmp	r2, r3
 800b894:	d918      	bls.n	800b8c8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1a      	ldr	r2, [r3, #32]
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	8992      	ldrh	r2, [r2, #12]
 800b8a8:	fb02 f303 	mul.w	r3, r2, r3
 800b8ac:	69fa      	ldr	r2, [r7, #28]
 800b8ae:	18d1      	adds	r1, r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	899b      	ldrh	r3, [r3, #12]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	f7fd fad9 	bl	8008e6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	7d1b      	ldrb	r3, [r3, #20]
 800b8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	899b      	ldrh	r3, [r3, #12]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	fb02 f303 	mul.w	r3, r2, r3
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b8d6:	e04b      	b.n	800b970 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6a1b      	ldr	r3, [r3, #32]
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d016      	beq.n	800b910 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	699a      	ldr	r2, [r3, #24]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d210      	bcs.n	800b910 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	7858      	ldrb	r0, [r3, #1]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	f7fd f9da 	bl	8008cb4 <disk_read>
 800b900:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b902:	2b00      	cmp	r3, #0
 800b904:	d004      	beq.n	800b910 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	755a      	strb	r2, [r3, #21]
 800b90c:	2301      	movs	r3, #1
 800b90e:	e05a      	b.n	800b9c6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	899b      	ldrh	r3, [r3, #12]
 800b91a:	4618      	mov	r0, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	8992      	ldrh	r2, [r2, #12]
 800b924:	fbb3 f1f2 	udiv	r1, r3, r2
 800b928:	fb01 f202 	mul.w	r2, r1, r2
 800b92c:	1a9b      	subs	r3, r3, r2
 800b92e:	1ac3      	subs	r3, r0, r3
 800b930:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	429a      	cmp	r2, r3
 800b938:	d901      	bls.n	800b93e <f_write+0x298>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	8992      	ldrh	r2, [r2, #12]
 800b94c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b950:	fb00 f202 	mul.w	r2, r0, r2
 800b954:	1a9b      	subs	r3, r3, r2
 800b956:	440b      	add	r3, r1
 800b958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b95a:	69f9      	ldr	r1, [r7, #28]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fd fa85 	bl	8008e6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	7d1b      	ldrb	r3, [r3, #20]
 800b966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b970:	69fa      	ldr	r2, [r7, #28]
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	4413      	add	r3, r2
 800b976:	61fb      	str	r3, [r7, #28]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	699a      	ldr	r2, [r3, #24]
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	441a      	add	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	619a      	str	r2, [r3, #24]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	68da      	ldr	r2, [r3, #12]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	bf38      	it	cc
 800b990:	461a      	movcc	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	60da      	str	r2, [r3, #12]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	441a      	add	r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f47f aeb5 	bne.w	800b71c <f_write+0x76>
 800b9b2:	e000      	b.n	800b9b6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b9b4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	7d1b      	ldrb	r3, [r3, #20]
 800b9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3730      	adds	r7, #48	; 0x30
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b086      	sub	sp, #24
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f107 0208 	add.w	r2, r7, #8
 800b9dc:	4611      	mov	r1, r2
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7ff faba 	bl	800af58 <validate>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d168      	bne.n	800bac0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	7d1b      	ldrb	r3, [r3, #20]
 800b9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d062      	beq.n	800bac0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	7d1b      	ldrb	r3, [r3, #20]
 800b9fe:	b25b      	sxtb	r3, r3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da15      	bge.n	800ba30 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	7858      	ldrb	r0, [r3, #1]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a1a      	ldr	r2, [r3, #32]
 800ba12:	2301      	movs	r3, #1
 800ba14:	f7fd f96e 	bl	8008cf4 <disk_write>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <f_sync+0x54>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e04f      	b.n	800bac2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	7d1b      	ldrb	r3, [r3, #20]
 800ba26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ba30:	f7fd f89e 	bl	8008b70 <get_fattime>
 800ba34:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f7fd fc38 	bl	80092b4 <move_window>
 800ba44:	4603      	mov	r3, r0
 800ba46:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d138      	bne.n	800bac0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba52:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	330b      	adds	r3, #11
 800ba58:	781a      	ldrb	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	330b      	adds	r3, #11
 800ba5e:	f042 0220 	orr.w	r2, r2, #32
 800ba62:	b2d2      	uxtb	r2, r2
 800ba64:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	68f9      	ldr	r1, [r7, #12]
 800ba72:	f7fe f9c4 	bl	8009dfe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f103 021c 	add.w	r2, r3, #28
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	f7fd f9c7 	bl	8008e16 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3316      	adds	r3, #22
 800ba8c:	6939      	ldr	r1, [r7, #16]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fd f9c1 	bl	8008e16 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3312      	adds	r3, #18
 800ba98:	2100      	movs	r1, #0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fd f9a1 	bl	8008de2 <st_word>
					fs->wflag = 1;
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	2201      	movs	r2, #1
 800baa4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fd fc31 	bl	8009310 <sync_fs>
 800baae:	4603      	mov	r3, r0
 800bab0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	7d1b      	ldrb	r3, [r3, #20]
 800bab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baba:	b2da      	uxtb	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3718      	adds	r7, #24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff ff7b 	bl	800b9ce <f_sync>
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d118      	bne.n	800bb14 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f107 0208 	add.w	r2, r7, #8
 800bae8:	4611      	mov	r1, r2
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff fa34 	bl	800af58 <validate>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10c      	bne.n	800bb14 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fd fb36 	bl	8009170 <dec_lock>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bb36:	4b1e      	ldr	r3, [pc, #120]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb38:	7a5b      	ldrb	r3, [r3, #9]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d131      	bne.n	800bba4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bb40:	4b1b      	ldr	r3, [pc, #108]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb42:	7a5b      	ldrb	r3, [r3, #9]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	461a      	mov	r2, r3
 800bb48:	4b19      	ldr	r3, [pc, #100]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bb4e:	4b18      	ldr	r3, [pc, #96]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb50:	7a5b      	ldrb	r3, [r3, #9]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	4a16      	ldr	r2, [pc, #88]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bb5e:	4b14      	ldr	r3, [pc, #80]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb60:	7a5b      	ldrb	r3, [r3, #9]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	461a      	mov	r2, r3
 800bb66:	4b12      	ldr	r3, [pc, #72]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb68:	4413      	add	r3, r2
 800bb6a:	79fa      	ldrb	r2, [r7, #7]
 800bb6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bb6e:	4b10      	ldr	r3, [pc, #64]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb70:	7a5b      	ldrb	r3, [r3, #9]
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	b2d1      	uxtb	r1, r2
 800bb78:	4a0d      	ldr	r2, [pc, #52]	; (800bbb0 <FATFS_LinkDriverEx+0x90>)
 800bb7a:	7251      	strb	r1, [r2, #9]
 800bb7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bb7e:	7dbb      	ldrb	r3, [r7, #22]
 800bb80:	3330      	adds	r3, #48	; 0x30
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	223a      	movs	r2, #58	; 0x3a
 800bb8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	3302      	adds	r3, #2
 800bb94:	222f      	movs	r2, #47	; 0x2f
 800bb96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3303      	adds	r3, #3
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	371c      	adds	r7, #28
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bc80      	pop	{r7}
 800bbae:	4770      	bx	lr
 800bbb0:	20003498 	.word	0x20003498

0800bbb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff ffac 	bl	800bb20 <FATFS_LinkDriverEx>
 800bbc8:	4603      	mov	r3, r0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bbe0:	88fb      	ldrh	r3, [r7, #6]
 800bbe2:	2b7f      	cmp	r3, #127	; 0x7f
 800bbe4:	d802      	bhi.n	800bbec <ff_convert+0x18>
		c = chr;
 800bbe6:	88fb      	ldrh	r3, [r7, #6]
 800bbe8:	81fb      	strh	r3, [r7, #14]
 800bbea:	e025      	b.n	800bc38 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00b      	beq.n	800bc0a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bbf2:	88fb      	ldrh	r3, [r7, #6]
 800bbf4:	2bff      	cmp	r3, #255	; 0xff
 800bbf6:	d805      	bhi.n	800bc04 <ff_convert+0x30>
 800bbf8:	88fb      	ldrh	r3, [r7, #6]
 800bbfa:	3b80      	subs	r3, #128	; 0x80
 800bbfc:	4a11      	ldr	r2, [pc, #68]	; (800bc44 <ff_convert+0x70>)
 800bbfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc02:	e000      	b.n	800bc06 <ff_convert+0x32>
 800bc04:	2300      	movs	r3, #0
 800bc06:	81fb      	strh	r3, [r7, #14]
 800bc08:	e016      	b.n	800bc38 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	81fb      	strh	r3, [r7, #14]
 800bc0e:	e009      	b.n	800bc24 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bc10:	89fb      	ldrh	r3, [r7, #14]
 800bc12:	4a0c      	ldr	r2, [pc, #48]	; (800bc44 <ff_convert+0x70>)
 800bc14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc18:	88fa      	ldrh	r2, [r7, #6]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d006      	beq.n	800bc2c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bc1e:	89fb      	ldrh	r3, [r7, #14]
 800bc20:	3301      	adds	r3, #1
 800bc22:	81fb      	strh	r3, [r7, #14]
 800bc24:	89fb      	ldrh	r3, [r7, #14]
 800bc26:	2b7f      	cmp	r3, #127	; 0x7f
 800bc28:	d9f2      	bls.n	800bc10 <ff_convert+0x3c>
 800bc2a:	e000      	b.n	800bc2e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bc2c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bc2e:	89fb      	ldrh	r3, [r7, #14]
 800bc30:	3380      	adds	r3, #128	; 0x80
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bc38:	89fb      	ldrh	r3, [r7, #14]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bc80      	pop	{r7}
 800bc42:	4770      	bx	lr
 800bc44:	080103dc 	.word	0x080103dc

0800bc48 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b087      	sub	sp, #28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc58:	d201      	bcs.n	800bc5e <ff_wtoupper+0x16>
 800bc5a:	4b3d      	ldr	r3, [pc, #244]	; (800bd50 <ff_wtoupper+0x108>)
 800bc5c:	e000      	b.n	800bc60 <ff_wtoupper+0x18>
 800bc5e:	4b3d      	ldr	r3, [pc, #244]	; (800bd54 <ff_wtoupper+0x10c>)
 800bc60:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	1c9a      	adds	r2, r3, #2
 800bc66:	617a      	str	r2, [r7, #20]
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bc6c:	8a7b      	ldrh	r3, [r7, #18]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d068      	beq.n	800bd44 <ff_wtoupper+0xfc>
 800bc72:	88fa      	ldrh	r2, [r7, #6]
 800bc74:	8a7b      	ldrh	r3, [r7, #18]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d364      	bcc.n	800bd44 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	1c9a      	adds	r2, r3, #2
 800bc7e:	617a      	str	r2, [r7, #20]
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	823b      	strh	r3, [r7, #16]
 800bc84:	8a3b      	ldrh	r3, [r7, #16]
 800bc86:	0a1b      	lsrs	r3, r3, #8
 800bc88:	81fb      	strh	r3, [r7, #14]
 800bc8a:	8a3b      	ldrh	r3, [r7, #16]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bc90:	88fa      	ldrh	r2, [r7, #6]
 800bc92:	8a79      	ldrh	r1, [r7, #18]
 800bc94:	8a3b      	ldrh	r3, [r7, #16]
 800bc96:	440b      	add	r3, r1
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	da49      	bge.n	800bd30 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bc9c:	89fb      	ldrh	r3, [r7, #14]
 800bc9e:	2b08      	cmp	r3, #8
 800bca0:	d84f      	bhi.n	800bd42 <ff_wtoupper+0xfa>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <ff_wtoupper+0x60>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bccd 	.word	0x0800bccd
 800bcac:	0800bcdf 	.word	0x0800bcdf
 800bcb0:	0800bcf5 	.word	0x0800bcf5
 800bcb4:	0800bcfd 	.word	0x0800bcfd
 800bcb8:	0800bd05 	.word	0x0800bd05
 800bcbc:	0800bd0d 	.word	0x0800bd0d
 800bcc0:	0800bd15 	.word	0x0800bd15
 800bcc4:	0800bd1d 	.word	0x0800bd1d
 800bcc8:	0800bd25 	.word	0x0800bd25
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bccc:	88fa      	ldrh	r2, [r7, #6]
 800bcce:	8a7b      	ldrh	r3, [r7, #18]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	80fb      	strh	r3, [r7, #6]
 800bcdc:	e027      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bcde:	88fa      	ldrh	r2, [r7, #6]
 800bce0:	8a7b      	ldrh	r3, [r7, #18]
 800bce2:	1ad3      	subs	r3, r2, r3
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	f003 0301 	and.w	r3, r3, #1
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	88fa      	ldrh	r2, [r7, #6]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	80fb      	strh	r3, [r7, #6]
 800bcf2:	e01c      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bcf4:	88fb      	ldrh	r3, [r7, #6]
 800bcf6:	3b10      	subs	r3, #16
 800bcf8:	80fb      	strh	r3, [r7, #6]
 800bcfa:	e018      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bcfc:	88fb      	ldrh	r3, [r7, #6]
 800bcfe:	3b20      	subs	r3, #32
 800bd00:	80fb      	strh	r3, [r7, #6]
 800bd02:	e014      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bd04:	88fb      	ldrh	r3, [r7, #6]
 800bd06:	3b30      	subs	r3, #48	; 0x30
 800bd08:	80fb      	strh	r3, [r7, #6]
 800bd0a:	e010      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	3b1a      	subs	r3, #26
 800bd10:	80fb      	strh	r3, [r7, #6]
 800bd12:	e00c      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bd14:	88fb      	ldrh	r3, [r7, #6]
 800bd16:	3308      	adds	r3, #8
 800bd18:	80fb      	strh	r3, [r7, #6]
 800bd1a:	e008      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	3b50      	subs	r3, #80	; 0x50
 800bd20:	80fb      	strh	r3, [r7, #6]
 800bd22:	e004      	b.n	800bd2e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bd2a:	80fb      	strh	r3, [r7, #6]
 800bd2c:	bf00      	nop
			}
			break;
 800bd2e:	e008      	b.n	800bd42 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bd30:	89fb      	ldrh	r3, [r7, #14]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d195      	bne.n	800bc62 <ff_wtoupper+0x1a>
 800bd36:	8a3b      	ldrh	r3, [r7, #16]
 800bd38:	005b      	lsls	r3, r3, #1
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bd40:	e78f      	b.n	800bc62 <ff_wtoupper+0x1a>
			break;
 800bd42:	bf00      	nop
	}

	return chr;
 800bd44:	88fb      	ldrh	r3, [r7, #6]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	371c      	adds	r7, #28
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bc80      	pop	{r7}
 800bd4e:	4770      	bx	lr
 800bd50:	080104dc 	.word	0x080104dc
 800bd54:	080106d0 	.word	0x080106d0

0800bd58 <__errno>:
 800bd58:	4b01      	ldr	r3, [pc, #4]	; (800bd60 <__errno+0x8>)
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	20000060 	.word	0x20000060

0800bd64 <exit>:
 800bd64:	b508      	push	{r3, lr}
 800bd66:	4b07      	ldr	r3, [pc, #28]	; (800bd84 <exit+0x20>)
 800bd68:	4604      	mov	r4, r0
 800bd6a:	b113      	cbz	r3, 800bd72 <exit+0xe>
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	f3af 8000 	nop.w
 800bd72:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <exit+0x24>)
 800bd74:	6818      	ldr	r0, [r3, #0]
 800bd76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bd78:	b103      	cbz	r3, 800bd7c <exit+0x18>
 800bd7a:	4798      	blx	r3
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f7f8 fe0f 	bl	80049a0 <_exit>
 800bd82:	bf00      	nop
 800bd84:	00000000 	.word	0x00000000
 800bd88:	08010890 	.word	0x08010890

0800bd8c <fiprintf>:
 800bd8c:	b40e      	push	{r1, r2, r3}
 800bd8e:	b503      	push	{r0, r1, lr}
 800bd90:	4601      	mov	r1, r0
 800bd92:	ab03      	add	r3, sp, #12
 800bd94:	4805      	ldr	r0, [pc, #20]	; (800bdac <fiprintf+0x20>)
 800bd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9a:	6800      	ldr	r0, [r0, #0]
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	f000 fa17 	bl	800c1d0 <_vfiprintf_r>
 800bda2:	b002      	add	sp, #8
 800bda4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bda8:	b003      	add	sp, #12
 800bdaa:	4770      	bx	lr
 800bdac:	20000060 	.word	0x20000060

0800bdb0 <_fputc_r>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	460e      	mov	r6, r1
 800bdb4:	4614      	mov	r4, r2
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	b118      	cbz	r0, 800bdc2 <_fputc_r+0x12>
 800bdba:	6983      	ldr	r3, [r0, #24]
 800bdbc:	b90b      	cbnz	r3, 800bdc2 <_fputc_r+0x12>
 800bdbe:	f000 ff23 	bl	800cc08 <__sinit>
 800bdc2:	4b14      	ldr	r3, [pc, #80]	; (800be14 <_fputc_r+0x64>)
 800bdc4:	429c      	cmp	r4, r3
 800bdc6:	d11a      	bne.n	800bdfe <_fputc_r+0x4e>
 800bdc8:	686c      	ldr	r4, [r5, #4]
 800bdca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdcc:	07d8      	lsls	r0, r3, #31
 800bdce:	d405      	bmi.n	800bddc <_fputc_r+0x2c>
 800bdd0:	89a3      	ldrh	r3, [r4, #12]
 800bdd2:	0599      	lsls	r1, r3, #22
 800bdd4:	d402      	bmi.n	800bddc <_fputc_r+0x2c>
 800bdd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdd8:	f000 f8bd 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800bddc:	4622      	mov	r2, r4
 800bdde:	4628      	mov	r0, r5
 800bde0:	4631      	mov	r1, r6
 800bde2:	f000 fcbb 	bl	800c75c <_putc_r>
 800bde6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bde8:	4605      	mov	r5, r0
 800bdea:	07da      	lsls	r2, r3, #31
 800bdec:	d405      	bmi.n	800bdfa <_fputc_r+0x4a>
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	059b      	lsls	r3, r3, #22
 800bdf2:	d402      	bmi.n	800bdfa <_fputc_r+0x4a>
 800bdf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdf6:	f000 f8af 	bl	800bf58 <__retarget_lock_release_recursive>
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}
 800bdfe:	4b06      	ldr	r3, [pc, #24]	; (800be18 <_fputc_r+0x68>)
 800be00:	429c      	cmp	r4, r3
 800be02:	d101      	bne.n	800be08 <_fputc_r+0x58>
 800be04:	68ac      	ldr	r4, [r5, #8]
 800be06:	e7e0      	b.n	800bdca <_fputc_r+0x1a>
 800be08:	4b04      	ldr	r3, [pc, #16]	; (800be1c <_fputc_r+0x6c>)
 800be0a:	429c      	cmp	r4, r3
 800be0c:	bf08      	it	eq
 800be0e:	68ec      	ldreq	r4, [r5, #12]
 800be10:	e7db      	b.n	800bdca <_fputc_r+0x1a>
 800be12:	bf00      	nop
 800be14:	080108e8 	.word	0x080108e8
 800be18:	08010908 	.word	0x08010908
 800be1c:	080108c8 	.word	0x080108c8

0800be20 <fputc>:
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <fputc+0xc>)
 800be22:	460a      	mov	r2, r1
 800be24:	4601      	mov	r1, r0
 800be26:	6818      	ldr	r0, [r3, #0]
 800be28:	f7ff bfc2 	b.w	800bdb0 <_fputc_r>
 800be2c:	20000060 	.word	0x20000060

0800be30 <_fwrite_r>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	9c08      	ldr	r4, [sp, #32]
 800be36:	468a      	mov	sl, r1
 800be38:	4690      	mov	r8, r2
 800be3a:	4605      	mov	r5, r0
 800be3c:	fb02 f903 	mul.w	r9, r2, r3
 800be40:	b118      	cbz	r0, 800be4a <_fwrite_r+0x1a>
 800be42:	6983      	ldr	r3, [r0, #24]
 800be44:	b90b      	cbnz	r3, 800be4a <_fwrite_r+0x1a>
 800be46:	f000 fedf 	bl	800cc08 <__sinit>
 800be4a:	4b26      	ldr	r3, [pc, #152]	; (800bee4 <_fwrite_r+0xb4>)
 800be4c:	429c      	cmp	r4, r3
 800be4e:	d123      	bne.n	800be98 <_fwrite_r+0x68>
 800be50:	686c      	ldr	r4, [r5, #4]
 800be52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be54:	07de      	lsls	r6, r3, #31
 800be56:	d405      	bmi.n	800be64 <_fwrite_r+0x34>
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	0598      	lsls	r0, r3, #22
 800be5c:	d402      	bmi.n	800be64 <_fwrite_r+0x34>
 800be5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be60:	f000 f879 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	0719      	lsls	r1, r3, #28
 800be68:	d520      	bpl.n	800beac <_fwrite_r+0x7c>
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	b1f3      	cbz	r3, 800beac <_fwrite_r+0x7c>
 800be6e:	2600      	movs	r6, #0
 800be70:	454e      	cmp	r6, r9
 800be72:	d029      	beq.n	800bec8 <_fwrite_r+0x98>
 800be74:	68a7      	ldr	r7, [r4, #8]
 800be76:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800be7a:	3f01      	subs	r7, #1
 800be7c:	2f00      	cmp	r7, #0
 800be7e:	60a7      	str	r7, [r4, #8]
 800be80:	da04      	bge.n	800be8c <_fwrite_r+0x5c>
 800be82:	69a3      	ldr	r3, [r4, #24]
 800be84:	429f      	cmp	r7, r3
 800be86:	db19      	blt.n	800bebc <_fwrite_r+0x8c>
 800be88:	290a      	cmp	r1, #10
 800be8a:	d017      	beq.n	800bebc <_fwrite_r+0x8c>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	6022      	str	r2, [r4, #0]
 800be92:	7019      	strb	r1, [r3, #0]
 800be94:	3601      	adds	r6, #1
 800be96:	e7eb      	b.n	800be70 <_fwrite_r+0x40>
 800be98:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <_fwrite_r+0xb8>)
 800be9a:	429c      	cmp	r4, r3
 800be9c:	d101      	bne.n	800bea2 <_fwrite_r+0x72>
 800be9e:	68ac      	ldr	r4, [r5, #8]
 800bea0:	e7d7      	b.n	800be52 <_fwrite_r+0x22>
 800bea2:	4b12      	ldr	r3, [pc, #72]	; (800beec <_fwrite_r+0xbc>)
 800bea4:	429c      	cmp	r4, r3
 800bea6:	bf08      	it	eq
 800bea8:	68ec      	ldreq	r4, [r5, #12]
 800beaa:	e7d2      	b.n	800be52 <_fwrite_r+0x22>
 800beac:	4621      	mov	r1, r4
 800beae:	4628      	mov	r0, r5
 800beb0:	f000 fd26 	bl	800c900 <__swsetup_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d0da      	beq.n	800be6e <_fwrite_r+0x3e>
 800beb8:	2600      	movs	r6, #0
 800beba:	e005      	b.n	800bec8 <_fwrite_r+0x98>
 800bebc:	4622      	mov	r2, r4
 800bebe:	4628      	mov	r0, r5
 800bec0:	f000 fccc 	bl	800c85c <__swbuf_r>
 800bec4:	3001      	adds	r0, #1
 800bec6:	d1e5      	bne.n	800be94 <_fwrite_r+0x64>
 800bec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800beca:	07da      	lsls	r2, r3, #31
 800becc:	d405      	bmi.n	800beda <_fwrite_r+0xaa>
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	059b      	lsls	r3, r3, #22
 800bed2:	d402      	bmi.n	800beda <_fwrite_r+0xaa>
 800bed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bed6:	f000 f83f 	bl	800bf58 <__retarget_lock_release_recursive>
 800beda:	fbb6 f0f8 	udiv	r0, r6, r8
 800bede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee2:	bf00      	nop
 800bee4:	080108e8 	.word	0x080108e8
 800bee8:	08010908 	.word	0x08010908
 800beec:	080108c8 	.word	0x080108c8

0800bef0 <fwrite>:
 800bef0:	b507      	push	{r0, r1, r2, lr}
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	4613      	mov	r3, r2
 800bef6:	460a      	mov	r2, r1
 800bef8:	4601      	mov	r1, r0
 800befa:	4803      	ldr	r0, [pc, #12]	; (800bf08 <fwrite+0x18>)
 800befc:	6800      	ldr	r0, [r0, #0]
 800befe:	f7ff ff97 	bl	800be30 <_fwrite_r>
 800bf02:	b003      	add	sp, #12
 800bf04:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf08:	20000060 	.word	0x20000060

0800bf0c <__libc_init_array>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	2600      	movs	r6, #0
 800bf10:	4d0c      	ldr	r5, [pc, #48]	; (800bf44 <__libc_init_array+0x38>)
 800bf12:	4c0d      	ldr	r4, [pc, #52]	; (800bf48 <__libc_init_array+0x3c>)
 800bf14:	1b64      	subs	r4, r4, r5
 800bf16:	10a4      	asrs	r4, r4, #2
 800bf18:	42a6      	cmp	r6, r4
 800bf1a:	d109      	bne.n	800bf30 <__libc_init_array+0x24>
 800bf1c:	f001 f9e8 	bl	800d2f0 <_init>
 800bf20:	2600      	movs	r6, #0
 800bf22:	4d0a      	ldr	r5, [pc, #40]	; (800bf4c <__libc_init_array+0x40>)
 800bf24:	4c0a      	ldr	r4, [pc, #40]	; (800bf50 <__libc_init_array+0x44>)
 800bf26:	1b64      	subs	r4, r4, r5
 800bf28:	10a4      	asrs	r4, r4, #2
 800bf2a:	42a6      	cmp	r6, r4
 800bf2c:	d105      	bne.n	800bf3a <__libc_init_array+0x2e>
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf34:	4798      	blx	r3
 800bf36:	3601      	adds	r6, #1
 800bf38:	e7ee      	b.n	800bf18 <__libc_init_array+0xc>
 800bf3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf3e:	4798      	blx	r3
 800bf40:	3601      	adds	r6, #1
 800bf42:	e7f2      	b.n	800bf2a <__libc_init_array+0x1e>
 800bf44:	08010930 	.word	0x08010930
 800bf48:	08010930 	.word	0x08010930
 800bf4c:	08010930 	.word	0x08010930
 800bf50:	08010934 	.word	0x08010934

0800bf54 <__retarget_lock_init_recursive>:
 800bf54:	4770      	bx	lr

0800bf56 <__retarget_lock_acquire_recursive>:
 800bf56:	4770      	bx	lr

0800bf58 <__retarget_lock_release_recursive>:
 800bf58:	4770      	bx	lr
	...

0800bf5c <malloc>:
 800bf5c:	4b02      	ldr	r3, [pc, #8]	; (800bf68 <malloc+0xc>)
 800bf5e:	4601      	mov	r1, r0
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	f000 b899 	b.w	800c098 <_malloc_r>
 800bf66:	bf00      	nop
 800bf68:	20000060 	.word	0x20000060

0800bf6c <free>:
 800bf6c:	4b02      	ldr	r3, [pc, #8]	; (800bf78 <free+0xc>)
 800bf6e:	4601      	mov	r1, r0
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	f000 b829 	b.w	800bfc8 <_free_r>
 800bf76:	bf00      	nop
 800bf78:	20000060 	.word	0x20000060

0800bf7c <memcmp>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	3901      	subs	r1, #1
 800bf80:	4402      	add	r2, r0
 800bf82:	4290      	cmp	r0, r2
 800bf84:	d101      	bne.n	800bf8a <memcmp+0xe>
 800bf86:	2000      	movs	r0, #0
 800bf88:	e005      	b.n	800bf96 <memcmp+0x1a>
 800bf8a:	7803      	ldrb	r3, [r0, #0]
 800bf8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bf90:	42a3      	cmp	r3, r4
 800bf92:	d001      	beq.n	800bf98 <memcmp+0x1c>
 800bf94:	1b18      	subs	r0, r3, r4
 800bf96:	bd10      	pop	{r4, pc}
 800bf98:	3001      	adds	r0, #1
 800bf9a:	e7f2      	b.n	800bf82 <memcmp+0x6>

0800bf9c <memcpy>:
 800bf9c:	440a      	add	r2, r1
 800bf9e:	4291      	cmp	r1, r2
 800bfa0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfa4:	d100      	bne.n	800bfa8 <memcpy+0xc>
 800bfa6:	4770      	bx	lr
 800bfa8:	b510      	push	{r4, lr}
 800bfaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfae:	4291      	cmp	r1, r2
 800bfb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfb4:	d1f9      	bne.n	800bfaa <memcpy+0xe>
 800bfb6:	bd10      	pop	{r4, pc}

0800bfb8 <memset>:
 800bfb8:	4603      	mov	r3, r0
 800bfba:	4402      	add	r2, r0
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d100      	bne.n	800bfc2 <memset+0xa>
 800bfc0:	4770      	bx	lr
 800bfc2:	f803 1b01 	strb.w	r1, [r3], #1
 800bfc6:	e7f9      	b.n	800bfbc <memset+0x4>

0800bfc8 <_free_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	4605      	mov	r5, r0
 800bfcc:	2900      	cmp	r1, #0
 800bfce:	d040      	beq.n	800c052 <_free_r+0x8a>
 800bfd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd4:	1f0c      	subs	r4, r1, #4
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	bfb8      	it	lt
 800bfda:	18e4      	addlt	r4, r4, r3
 800bfdc:	f000 ff3e 	bl	800ce5c <__malloc_lock>
 800bfe0:	4a1c      	ldr	r2, [pc, #112]	; (800c054 <_free_r+0x8c>)
 800bfe2:	6813      	ldr	r3, [r2, #0]
 800bfe4:	b933      	cbnz	r3, 800bff4 <_free_r+0x2c>
 800bfe6:	6063      	str	r3, [r4, #4]
 800bfe8:	6014      	str	r4, [r2, #0]
 800bfea:	4628      	mov	r0, r5
 800bfec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bff0:	f000 bf3a 	b.w	800ce68 <__malloc_unlock>
 800bff4:	42a3      	cmp	r3, r4
 800bff6:	d908      	bls.n	800c00a <_free_r+0x42>
 800bff8:	6820      	ldr	r0, [r4, #0]
 800bffa:	1821      	adds	r1, r4, r0
 800bffc:	428b      	cmp	r3, r1
 800bffe:	bf01      	itttt	eq
 800c000:	6819      	ldreq	r1, [r3, #0]
 800c002:	685b      	ldreq	r3, [r3, #4]
 800c004:	1809      	addeq	r1, r1, r0
 800c006:	6021      	streq	r1, [r4, #0]
 800c008:	e7ed      	b.n	800bfe6 <_free_r+0x1e>
 800c00a:	461a      	mov	r2, r3
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	b10b      	cbz	r3, 800c014 <_free_r+0x4c>
 800c010:	42a3      	cmp	r3, r4
 800c012:	d9fa      	bls.n	800c00a <_free_r+0x42>
 800c014:	6811      	ldr	r1, [r2, #0]
 800c016:	1850      	adds	r0, r2, r1
 800c018:	42a0      	cmp	r0, r4
 800c01a:	d10b      	bne.n	800c034 <_free_r+0x6c>
 800c01c:	6820      	ldr	r0, [r4, #0]
 800c01e:	4401      	add	r1, r0
 800c020:	1850      	adds	r0, r2, r1
 800c022:	4283      	cmp	r3, r0
 800c024:	6011      	str	r1, [r2, #0]
 800c026:	d1e0      	bne.n	800bfea <_free_r+0x22>
 800c028:	6818      	ldr	r0, [r3, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	4401      	add	r1, r0
 800c02e:	6011      	str	r1, [r2, #0]
 800c030:	6053      	str	r3, [r2, #4]
 800c032:	e7da      	b.n	800bfea <_free_r+0x22>
 800c034:	d902      	bls.n	800c03c <_free_r+0x74>
 800c036:	230c      	movs	r3, #12
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	e7d6      	b.n	800bfea <_free_r+0x22>
 800c03c:	6820      	ldr	r0, [r4, #0]
 800c03e:	1821      	adds	r1, r4, r0
 800c040:	428b      	cmp	r3, r1
 800c042:	bf01      	itttt	eq
 800c044:	6819      	ldreq	r1, [r3, #0]
 800c046:	685b      	ldreq	r3, [r3, #4]
 800c048:	1809      	addeq	r1, r1, r0
 800c04a:	6021      	streq	r1, [r4, #0]
 800c04c:	6063      	str	r3, [r4, #4]
 800c04e:	6054      	str	r4, [r2, #4]
 800c050:	e7cb      	b.n	800bfea <_free_r+0x22>
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	200034a8 	.word	0x200034a8

0800c058 <sbrk_aligned>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	4e0e      	ldr	r6, [pc, #56]	; (800c094 <sbrk_aligned+0x3c>)
 800c05c:	460c      	mov	r4, r1
 800c05e:	6831      	ldr	r1, [r6, #0]
 800c060:	4605      	mov	r5, r0
 800c062:	b911      	cbnz	r1, 800c06a <sbrk_aligned+0x12>
 800c064:	f000 fbca 	bl	800c7fc <_sbrk_r>
 800c068:	6030      	str	r0, [r6, #0]
 800c06a:	4621      	mov	r1, r4
 800c06c:	4628      	mov	r0, r5
 800c06e:	f000 fbc5 	bl	800c7fc <_sbrk_r>
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	d00a      	beq.n	800c08c <sbrk_aligned+0x34>
 800c076:	1cc4      	adds	r4, r0, #3
 800c078:	f024 0403 	bic.w	r4, r4, #3
 800c07c:	42a0      	cmp	r0, r4
 800c07e:	d007      	beq.n	800c090 <sbrk_aligned+0x38>
 800c080:	1a21      	subs	r1, r4, r0
 800c082:	4628      	mov	r0, r5
 800c084:	f000 fbba 	bl	800c7fc <_sbrk_r>
 800c088:	3001      	adds	r0, #1
 800c08a:	d101      	bne.n	800c090 <sbrk_aligned+0x38>
 800c08c:	f04f 34ff 	mov.w	r4, #4294967295
 800c090:	4620      	mov	r0, r4
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	200034ac 	.word	0x200034ac

0800c098 <_malloc_r>:
 800c098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09c:	1ccd      	adds	r5, r1, #3
 800c09e:	f025 0503 	bic.w	r5, r5, #3
 800c0a2:	3508      	adds	r5, #8
 800c0a4:	2d0c      	cmp	r5, #12
 800c0a6:	bf38      	it	cc
 800c0a8:	250c      	movcc	r5, #12
 800c0aa:	2d00      	cmp	r5, #0
 800c0ac:	4607      	mov	r7, r0
 800c0ae:	db01      	blt.n	800c0b4 <_malloc_r+0x1c>
 800c0b0:	42a9      	cmp	r1, r5
 800c0b2:	d905      	bls.n	800c0c0 <_malloc_r+0x28>
 800c0b4:	230c      	movs	r3, #12
 800c0b6:	2600      	movs	r6, #0
 800c0b8:	603b      	str	r3, [r7, #0]
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c0:	4e2e      	ldr	r6, [pc, #184]	; (800c17c <_malloc_r+0xe4>)
 800c0c2:	f000 fecb 	bl	800ce5c <__malloc_lock>
 800c0c6:	6833      	ldr	r3, [r6, #0]
 800c0c8:	461c      	mov	r4, r3
 800c0ca:	bb34      	cbnz	r4, 800c11a <_malloc_r+0x82>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	f7ff ffc2 	bl	800c058 <sbrk_aligned>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	d14d      	bne.n	800c176 <_malloc_r+0xde>
 800c0da:	6834      	ldr	r4, [r6, #0]
 800c0dc:	4626      	mov	r6, r4
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	d140      	bne.n	800c164 <_malloc_r+0xcc>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	4631      	mov	r1, r6
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	eb04 0803 	add.w	r8, r4, r3
 800c0ec:	f000 fb86 	bl	800c7fc <_sbrk_r>
 800c0f0:	4580      	cmp	r8, r0
 800c0f2:	d13a      	bne.n	800c16a <_malloc_r+0xd2>
 800c0f4:	6821      	ldr	r1, [r4, #0]
 800c0f6:	3503      	adds	r5, #3
 800c0f8:	1a6d      	subs	r5, r5, r1
 800c0fa:	f025 0503 	bic.w	r5, r5, #3
 800c0fe:	3508      	adds	r5, #8
 800c100:	2d0c      	cmp	r5, #12
 800c102:	bf38      	it	cc
 800c104:	250c      	movcc	r5, #12
 800c106:	4638      	mov	r0, r7
 800c108:	4629      	mov	r1, r5
 800c10a:	f7ff ffa5 	bl	800c058 <sbrk_aligned>
 800c10e:	3001      	adds	r0, #1
 800c110:	d02b      	beq.n	800c16a <_malloc_r+0xd2>
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	442b      	add	r3, r5
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	e00e      	b.n	800c138 <_malloc_r+0xa0>
 800c11a:	6822      	ldr	r2, [r4, #0]
 800c11c:	1b52      	subs	r2, r2, r5
 800c11e:	d41e      	bmi.n	800c15e <_malloc_r+0xc6>
 800c120:	2a0b      	cmp	r2, #11
 800c122:	d916      	bls.n	800c152 <_malloc_r+0xba>
 800c124:	1961      	adds	r1, r4, r5
 800c126:	42a3      	cmp	r3, r4
 800c128:	6025      	str	r5, [r4, #0]
 800c12a:	bf18      	it	ne
 800c12c:	6059      	strne	r1, [r3, #4]
 800c12e:	6863      	ldr	r3, [r4, #4]
 800c130:	bf08      	it	eq
 800c132:	6031      	streq	r1, [r6, #0]
 800c134:	5162      	str	r2, [r4, r5]
 800c136:	604b      	str	r3, [r1, #4]
 800c138:	4638      	mov	r0, r7
 800c13a:	f104 060b 	add.w	r6, r4, #11
 800c13e:	f000 fe93 	bl	800ce68 <__malloc_unlock>
 800c142:	f026 0607 	bic.w	r6, r6, #7
 800c146:	1d23      	adds	r3, r4, #4
 800c148:	1af2      	subs	r2, r6, r3
 800c14a:	d0b6      	beq.n	800c0ba <_malloc_r+0x22>
 800c14c:	1b9b      	subs	r3, r3, r6
 800c14e:	50a3      	str	r3, [r4, r2]
 800c150:	e7b3      	b.n	800c0ba <_malloc_r+0x22>
 800c152:	6862      	ldr	r2, [r4, #4]
 800c154:	42a3      	cmp	r3, r4
 800c156:	bf0c      	ite	eq
 800c158:	6032      	streq	r2, [r6, #0]
 800c15a:	605a      	strne	r2, [r3, #4]
 800c15c:	e7ec      	b.n	800c138 <_malloc_r+0xa0>
 800c15e:	4623      	mov	r3, r4
 800c160:	6864      	ldr	r4, [r4, #4]
 800c162:	e7b2      	b.n	800c0ca <_malloc_r+0x32>
 800c164:	4634      	mov	r4, r6
 800c166:	6876      	ldr	r6, [r6, #4]
 800c168:	e7b9      	b.n	800c0de <_malloc_r+0x46>
 800c16a:	230c      	movs	r3, #12
 800c16c:	4638      	mov	r0, r7
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	f000 fe7a 	bl	800ce68 <__malloc_unlock>
 800c174:	e7a1      	b.n	800c0ba <_malloc_r+0x22>
 800c176:	6025      	str	r5, [r4, #0]
 800c178:	e7de      	b.n	800c138 <_malloc_r+0xa0>
 800c17a:	bf00      	nop
 800c17c:	200034a8 	.word	0x200034a8

0800c180 <__sfputc_r>:
 800c180:	6893      	ldr	r3, [r2, #8]
 800c182:	b410      	push	{r4}
 800c184:	3b01      	subs	r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	6093      	str	r3, [r2, #8]
 800c18a:	da07      	bge.n	800c19c <__sfputc_r+0x1c>
 800c18c:	6994      	ldr	r4, [r2, #24]
 800c18e:	42a3      	cmp	r3, r4
 800c190:	db01      	blt.n	800c196 <__sfputc_r+0x16>
 800c192:	290a      	cmp	r1, #10
 800c194:	d102      	bne.n	800c19c <__sfputc_r+0x1c>
 800c196:	bc10      	pop	{r4}
 800c198:	f000 bb60 	b.w	800c85c <__swbuf_r>
 800c19c:	6813      	ldr	r3, [r2, #0]
 800c19e:	1c58      	adds	r0, r3, #1
 800c1a0:	6010      	str	r0, [r2, #0]
 800c1a2:	7019      	strb	r1, [r3, #0]
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	bc10      	pop	{r4}
 800c1a8:	4770      	bx	lr

0800c1aa <__sfputs_r>:
 800c1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	18d5      	adds	r5, r2, r3
 800c1b4:	42ac      	cmp	r4, r5
 800c1b6:	d101      	bne.n	800c1bc <__sfputs_r+0x12>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	e007      	b.n	800c1cc <__sfputs_r+0x22>
 800c1bc:	463a      	mov	r2, r7
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1c4:	f7ff ffdc 	bl	800c180 <__sfputc_r>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d1f3      	bne.n	800c1b4 <__sfputs_r+0xa>
 800c1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1d0 <_vfiprintf_r>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	4614      	mov	r4, r2
 800c1d8:	4698      	mov	r8, r3
 800c1da:	4606      	mov	r6, r0
 800c1dc:	b09d      	sub	sp, #116	; 0x74
 800c1de:	b118      	cbz	r0, 800c1e8 <_vfiprintf_r+0x18>
 800c1e0:	6983      	ldr	r3, [r0, #24]
 800c1e2:	b90b      	cbnz	r3, 800c1e8 <_vfiprintf_r+0x18>
 800c1e4:	f000 fd10 	bl	800cc08 <__sinit>
 800c1e8:	4b89      	ldr	r3, [pc, #548]	; (800c410 <_vfiprintf_r+0x240>)
 800c1ea:	429d      	cmp	r5, r3
 800c1ec:	d11b      	bne.n	800c226 <_vfiprintf_r+0x56>
 800c1ee:	6875      	ldr	r5, [r6, #4]
 800c1f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1f2:	07d9      	lsls	r1, r3, #31
 800c1f4:	d405      	bmi.n	800c202 <_vfiprintf_r+0x32>
 800c1f6:	89ab      	ldrh	r3, [r5, #12]
 800c1f8:	059a      	lsls	r2, r3, #22
 800c1fa:	d402      	bmi.n	800c202 <_vfiprintf_r+0x32>
 800c1fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1fe:	f7ff feaa 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800c202:	89ab      	ldrh	r3, [r5, #12]
 800c204:	071b      	lsls	r3, r3, #28
 800c206:	d501      	bpl.n	800c20c <_vfiprintf_r+0x3c>
 800c208:	692b      	ldr	r3, [r5, #16]
 800c20a:	b9eb      	cbnz	r3, 800c248 <_vfiprintf_r+0x78>
 800c20c:	4629      	mov	r1, r5
 800c20e:	4630      	mov	r0, r6
 800c210:	f000 fb76 	bl	800c900 <__swsetup_r>
 800c214:	b1c0      	cbz	r0, 800c248 <_vfiprintf_r+0x78>
 800c216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c218:	07dc      	lsls	r4, r3, #31
 800c21a:	d50e      	bpl.n	800c23a <_vfiprintf_r+0x6a>
 800c21c:	f04f 30ff 	mov.w	r0, #4294967295
 800c220:	b01d      	add	sp, #116	; 0x74
 800c222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c226:	4b7b      	ldr	r3, [pc, #492]	; (800c414 <_vfiprintf_r+0x244>)
 800c228:	429d      	cmp	r5, r3
 800c22a:	d101      	bne.n	800c230 <_vfiprintf_r+0x60>
 800c22c:	68b5      	ldr	r5, [r6, #8]
 800c22e:	e7df      	b.n	800c1f0 <_vfiprintf_r+0x20>
 800c230:	4b79      	ldr	r3, [pc, #484]	; (800c418 <_vfiprintf_r+0x248>)
 800c232:	429d      	cmp	r5, r3
 800c234:	bf08      	it	eq
 800c236:	68f5      	ldreq	r5, [r6, #12]
 800c238:	e7da      	b.n	800c1f0 <_vfiprintf_r+0x20>
 800c23a:	89ab      	ldrh	r3, [r5, #12]
 800c23c:	0598      	lsls	r0, r3, #22
 800c23e:	d4ed      	bmi.n	800c21c <_vfiprintf_r+0x4c>
 800c240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c242:	f7ff fe89 	bl	800bf58 <__retarget_lock_release_recursive>
 800c246:	e7e9      	b.n	800c21c <_vfiprintf_r+0x4c>
 800c248:	2300      	movs	r3, #0
 800c24a:	9309      	str	r3, [sp, #36]	; 0x24
 800c24c:	2320      	movs	r3, #32
 800c24e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c252:	2330      	movs	r3, #48	; 0x30
 800c254:	f04f 0901 	mov.w	r9, #1
 800c258:	f8cd 800c 	str.w	r8, [sp, #12]
 800c25c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c41c <_vfiprintf_r+0x24c>
 800c260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c264:	4623      	mov	r3, r4
 800c266:	469a      	mov	sl, r3
 800c268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c26c:	b10a      	cbz	r2, 800c272 <_vfiprintf_r+0xa2>
 800c26e:	2a25      	cmp	r2, #37	; 0x25
 800c270:	d1f9      	bne.n	800c266 <_vfiprintf_r+0x96>
 800c272:	ebba 0b04 	subs.w	fp, sl, r4
 800c276:	d00b      	beq.n	800c290 <_vfiprintf_r+0xc0>
 800c278:	465b      	mov	r3, fp
 800c27a:	4622      	mov	r2, r4
 800c27c:	4629      	mov	r1, r5
 800c27e:	4630      	mov	r0, r6
 800c280:	f7ff ff93 	bl	800c1aa <__sfputs_r>
 800c284:	3001      	adds	r0, #1
 800c286:	f000 80aa 	beq.w	800c3de <_vfiprintf_r+0x20e>
 800c28a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c28c:	445a      	add	r2, fp
 800c28e:	9209      	str	r2, [sp, #36]	; 0x24
 800c290:	f89a 3000 	ldrb.w	r3, [sl]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f000 80a2 	beq.w	800c3de <_vfiprintf_r+0x20e>
 800c29a:	2300      	movs	r3, #0
 800c29c:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2a4:	f10a 0a01 	add.w	sl, sl, #1
 800c2a8:	9304      	str	r3, [sp, #16]
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2b2:	4654      	mov	r4, sl
 800c2b4:	2205      	movs	r2, #5
 800c2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ba:	4858      	ldr	r0, [pc, #352]	; (800c41c <_vfiprintf_r+0x24c>)
 800c2bc:	f000 fda6 	bl	800ce0c <memchr>
 800c2c0:	9a04      	ldr	r2, [sp, #16]
 800c2c2:	b9d8      	cbnz	r0, 800c2fc <_vfiprintf_r+0x12c>
 800c2c4:	06d1      	lsls	r1, r2, #27
 800c2c6:	bf44      	itt	mi
 800c2c8:	2320      	movmi	r3, #32
 800c2ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ce:	0713      	lsls	r3, r2, #28
 800c2d0:	bf44      	itt	mi
 800c2d2:	232b      	movmi	r3, #43	; 0x2b
 800c2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2de:	d015      	beq.n	800c30c <_vfiprintf_r+0x13c>
 800c2e0:	4654      	mov	r4, sl
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	f04f 0c0a 	mov.w	ip, #10
 800c2e8:	9a07      	ldr	r2, [sp, #28]
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2f0:	3b30      	subs	r3, #48	; 0x30
 800c2f2:	2b09      	cmp	r3, #9
 800c2f4:	d94e      	bls.n	800c394 <_vfiprintf_r+0x1c4>
 800c2f6:	b1b0      	cbz	r0, 800c326 <_vfiprintf_r+0x156>
 800c2f8:	9207      	str	r2, [sp, #28]
 800c2fa:	e014      	b.n	800c326 <_vfiprintf_r+0x156>
 800c2fc:	eba0 0308 	sub.w	r3, r0, r8
 800c300:	fa09 f303 	lsl.w	r3, r9, r3
 800c304:	4313      	orrs	r3, r2
 800c306:	46a2      	mov	sl, r4
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	e7d2      	b.n	800c2b2 <_vfiprintf_r+0xe2>
 800c30c:	9b03      	ldr	r3, [sp, #12]
 800c30e:	1d19      	adds	r1, r3, #4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	9103      	str	r1, [sp, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfbb      	ittet	lt
 800c318:	425b      	neglt	r3, r3
 800c31a:	f042 0202 	orrlt.w	r2, r2, #2
 800c31e:	9307      	strge	r3, [sp, #28]
 800c320:	9307      	strlt	r3, [sp, #28]
 800c322:	bfb8      	it	lt
 800c324:	9204      	strlt	r2, [sp, #16]
 800c326:	7823      	ldrb	r3, [r4, #0]
 800c328:	2b2e      	cmp	r3, #46	; 0x2e
 800c32a:	d10c      	bne.n	800c346 <_vfiprintf_r+0x176>
 800c32c:	7863      	ldrb	r3, [r4, #1]
 800c32e:	2b2a      	cmp	r3, #42	; 0x2a
 800c330:	d135      	bne.n	800c39e <_vfiprintf_r+0x1ce>
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	3402      	adds	r4, #2
 800c336:	1d1a      	adds	r2, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	9203      	str	r2, [sp, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bfb8      	it	lt
 800c340:	f04f 33ff 	movlt.w	r3, #4294967295
 800c344:	9305      	str	r3, [sp, #20]
 800c346:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c420 <_vfiprintf_r+0x250>
 800c34a:	2203      	movs	r2, #3
 800c34c:	4650      	mov	r0, sl
 800c34e:	7821      	ldrb	r1, [r4, #0]
 800c350:	f000 fd5c 	bl	800ce0c <memchr>
 800c354:	b140      	cbz	r0, 800c368 <_vfiprintf_r+0x198>
 800c356:	2340      	movs	r3, #64	; 0x40
 800c358:	eba0 000a 	sub.w	r0, r0, sl
 800c35c:	fa03 f000 	lsl.w	r0, r3, r0
 800c360:	9b04      	ldr	r3, [sp, #16]
 800c362:	3401      	adds	r4, #1
 800c364:	4303      	orrs	r3, r0
 800c366:	9304      	str	r3, [sp, #16]
 800c368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c36c:	2206      	movs	r2, #6
 800c36e:	482d      	ldr	r0, [pc, #180]	; (800c424 <_vfiprintf_r+0x254>)
 800c370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c374:	f000 fd4a 	bl	800ce0c <memchr>
 800c378:	2800      	cmp	r0, #0
 800c37a:	d03f      	beq.n	800c3fc <_vfiprintf_r+0x22c>
 800c37c:	4b2a      	ldr	r3, [pc, #168]	; (800c428 <_vfiprintf_r+0x258>)
 800c37e:	bb1b      	cbnz	r3, 800c3c8 <_vfiprintf_r+0x1f8>
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	3307      	adds	r3, #7
 800c384:	f023 0307 	bic.w	r3, r3, #7
 800c388:	3308      	adds	r3, #8
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38e:	443b      	add	r3, r7
 800c390:	9309      	str	r3, [sp, #36]	; 0x24
 800c392:	e767      	b.n	800c264 <_vfiprintf_r+0x94>
 800c394:	460c      	mov	r4, r1
 800c396:	2001      	movs	r0, #1
 800c398:	fb0c 3202 	mla	r2, ip, r2, r3
 800c39c:	e7a5      	b.n	800c2ea <_vfiprintf_r+0x11a>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	f04f 0c0a 	mov.w	ip, #10
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	3401      	adds	r4, #1
 800c3a8:	9305      	str	r3, [sp, #20]
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3b0:	3a30      	subs	r2, #48	; 0x30
 800c3b2:	2a09      	cmp	r2, #9
 800c3b4:	d903      	bls.n	800c3be <_vfiprintf_r+0x1ee>
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c5      	beq.n	800c346 <_vfiprintf_r+0x176>
 800c3ba:	9105      	str	r1, [sp, #20]
 800c3bc:	e7c3      	b.n	800c346 <_vfiprintf_r+0x176>
 800c3be:	4604      	mov	r4, r0
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3c6:	e7f0      	b.n	800c3aa <_vfiprintf_r+0x1da>
 800c3c8:	ab03      	add	r3, sp, #12
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	462a      	mov	r2, r5
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	4b16      	ldr	r3, [pc, #88]	; (800c42c <_vfiprintf_r+0x25c>)
 800c3d2:	a904      	add	r1, sp, #16
 800c3d4:	f3af 8000 	nop.w
 800c3d8:	4607      	mov	r7, r0
 800c3da:	1c78      	adds	r0, r7, #1
 800c3dc:	d1d6      	bne.n	800c38c <_vfiprintf_r+0x1bc>
 800c3de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3e0:	07d9      	lsls	r1, r3, #31
 800c3e2:	d405      	bmi.n	800c3f0 <_vfiprintf_r+0x220>
 800c3e4:	89ab      	ldrh	r3, [r5, #12]
 800c3e6:	059a      	lsls	r2, r3, #22
 800c3e8:	d402      	bmi.n	800c3f0 <_vfiprintf_r+0x220>
 800c3ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ec:	f7ff fdb4 	bl	800bf58 <__retarget_lock_release_recursive>
 800c3f0:	89ab      	ldrh	r3, [r5, #12]
 800c3f2:	065b      	lsls	r3, r3, #25
 800c3f4:	f53f af12 	bmi.w	800c21c <_vfiprintf_r+0x4c>
 800c3f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3fa:	e711      	b.n	800c220 <_vfiprintf_r+0x50>
 800c3fc:	ab03      	add	r3, sp, #12
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	462a      	mov	r2, r5
 800c402:	4630      	mov	r0, r6
 800c404:	4b09      	ldr	r3, [pc, #36]	; (800c42c <_vfiprintf_r+0x25c>)
 800c406:	a904      	add	r1, sp, #16
 800c408:	f000 f882 	bl	800c510 <_printf_i>
 800c40c:	e7e4      	b.n	800c3d8 <_vfiprintf_r+0x208>
 800c40e:	bf00      	nop
 800c410:	080108e8 	.word	0x080108e8
 800c414:	08010908 	.word	0x08010908
 800c418:	080108c8 	.word	0x080108c8
 800c41c:	08010894 	.word	0x08010894
 800c420:	0801089a 	.word	0x0801089a
 800c424:	0801089e 	.word	0x0801089e
 800c428:	00000000 	.word	0x00000000
 800c42c:	0800c1ab 	.word	0x0800c1ab

0800c430 <_printf_common>:
 800c430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c434:	4616      	mov	r6, r2
 800c436:	4699      	mov	r9, r3
 800c438:	688a      	ldr	r2, [r1, #8]
 800c43a:	690b      	ldr	r3, [r1, #16]
 800c43c:	4607      	mov	r7, r0
 800c43e:	4293      	cmp	r3, r2
 800c440:	bfb8      	it	lt
 800c442:	4613      	movlt	r3, r2
 800c444:	6033      	str	r3, [r6, #0]
 800c446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c44a:	460c      	mov	r4, r1
 800c44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c450:	b10a      	cbz	r2, 800c456 <_printf_common+0x26>
 800c452:	3301      	adds	r3, #1
 800c454:	6033      	str	r3, [r6, #0]
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	0699      	lsls	r1, r3, #26
 800c45a:	bf42      	ittt	mi
 800c45c:	6833      	ldrmi	r3, [r6, #0]
 800c45e:	3302      	addmi	r3, #2
 800c460:	6033      	strmi	r3, [r6, #0]
 800c462:	6825      	ldr	r5, [r4, #0]
 800c464:	f015 0506 	ands.w	r5, r5, #6
 800c468:	d106      	bne.n	800c478 <_printf_common+0x48>
 800c46a:	f104 0a19 	add.w	sl, r4, #25
 800c46e:	68e3      	ldr	r3, [r4, #12]
 800c470:	6832      	ldr	r2, [r6, #0]
 800c472:	1a9b      	subs	r3, r3, r2
 800c474:	42ab      	cmp	r3, r5
 800c476:	dc28      	bgt.n	800c4ca <_printf_common+0x9a>
 800c478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c47c:	1e13      	subs	r3, r2, #0
 800c47e:	6822      	ldr	r2, [r4, #0]
 800c480:	bf18      	it	ne
 800c482:	2301      	movne	r3, #1
 800c484:	0692      	lsls	r2, r2, #26
 800c486:	d42d      	bmi.n	800c4e4 <_printf_common+0xb4>
 800c488:	4649      	mov	r1, r9
 800c48a:	4638      	mov	r0, r7
 800c48c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c490:	47c0      	blx	r8
 800c492:	3001      	adds	r0, #1
 800c494:	d020      	beq.n	800c4d8 <_printf_common+0xa8>
 800c496:	6823      	ldr	r3, [r4, #0]
 800c498:	68e5      	ldr	r5, [r4, #12]
 800c49a:	f003 0306 	and.w	r3, r3, #6
 800c49e:	2b04      	cmp	r3, #4
 800c4a0:	bf18      	it	ne
 800c4a2:	2500      	movne	r5, #0
 800c4a4:	6832      	ldr	r2, [r6, #0]
 800c4a6:	f04f 0600 	mov.w	r6, #0
 800c4aa:	68a3      	ldr	r3, [r4, #8]
 800c4ac:	bf08      	it	eq
 800c4ae:	1aad      	subeq	r5, r5, r2
 800c4b0:	6922      	ldr	r2, [r4, #16]
 800c4b2:	bf08      	it	eq
 800c4b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	bfc4      	itt	gt
 800c4bc:	1a9b      	subgt	r3, r3, r2
 800c4be:	18ed      	addgt	r5, r5, r3
 800c4c0:	341a      	adds	r4, #26
 800c4c2:	42b5      	cmp	r5, r6
 800c4c4:	d11a      	bne.n	800c4fc <_printf_common+0xcc>
 800c4c6:	2000      	movs	r0, #0
 800c4c8:	e008      	b.n	800c4dc <_printf_common+0xac>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	47c0      	blx	r8
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	d103      	bne.n	800c4e0 <_printf_common+0xb0>
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e0:	3501      	adds	r5, #1
 800c4e2:	e7c4      	b.n	800c46e <_printf_common+0x3e>
 800c4e4:	2030      	movs	r0, #48	; 0x30
 800c4e6:	18e1      	adds	r1, r4, r3
 800c4e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4ec:	1c5a      	adds	r2, r3, #1
 800c4ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4f2:	4422      	add	r2, r4
 800c4f4:	3302      	adds	r3, #2
 800c4f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4fa:	e7c5      	b.n	800c488 <_printf_common+0x58>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	4622      	mov	r2, r4
 800c500:	4649      	mov	r1, r9
 800c502:	4638      	mov	r0, r7
 800c504:	47c0      	blx	r8
 800c506:	3001      	adds	r0, #1
 800c508:	d0e6      	beq.n	800c4d8 <_printf_common+0xa8>
 800c50a:	3601      	adds	r6, #1
 800c50c:	e7d9      	b.n	800c4c2 <_printf_common+0x92>
	...

0800c510 <_printf_i>:
 800c510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c514:	7e0f      	ldrb	r7, [r1, #24]
 800c516:	4691      	mov	r9, r2
 800c518:	2f78      	cmp	r7, #120	; 0x78
 800c51a:	4680      	mov	r8, r0
 800c51c:	460c      	mov	r4, r1
 800c51e:	469a      	mov	sl, r3
 800c520:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c526:	d807      	bhi.n	800c538 <_printf_i+0x28>
 800c528:	2f62      	cmp	r7, #98	; 0x62
 800c52a:	d80a      	bhi.n	800c542 <_printf_i+0x32>
 800c52c:	2f00      	cmp	r7, #0
 800c52e:	f000 80d9 	beq.w	800c6e4 <_printf_i+0x1d4>
 800c532:	2f58      	cmp	r7, #88	; 0x58
 800c534:	f000 80a4 	beq.w	800c680 <_printf_i+0x170>
 800c538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c53c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c540:	e03a      	b.n	800c5b8 <_printf_i+0xa8>
 800c542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c546:	2b15      	cmp	r3, #21
 800c548:	d8f6      	bhi.n	800c538 <_printf_i+0x28>
 800c54a:	a101      	add	r1, pc, #4	; (adr r1, 800c550 <_printf_i+0x40>)
 800c54c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c550:	0800c5a9 	.word	0x0800c5a9
 800c554:	0800c5bd 	.word	0x0800c5bd
 800c558:	0800c539 	.word	0x0800c539
 800c55c:	0800c539 	.word	0x0800c539
 800c560:	0800c539 	.word	0x0800c539
 800c564:	0800c539 	.word	0x0800c539
 800c568:	0800c5bd 	.word	0x0800c5bd
 800c56c:	0800c539 	.word	0x0800c539
 800c570:	0800c539 	.word	0x0800c539
 800c574:	0800c539 	.word	0x0800c539
 800c578:	0800c539 	.word	0x0800c539
 800c57c:	0800c6cb 	.word	0x0800c6cb
 800c580:	0800c5ed 	.word	0x0800c5ed
 800c584:	0800c6ad 	.word	0x0800c6ad
 800c588:	0800c539 	.word	0x0800c539
 800c58c:	0800c539 	.word	0x0800c539
 800c590:	0800c6ed 	.word	0x0800c6ed
 800c594:	0800c539 	.word	0x0800c539
 800c598:	0800c5ed 	.word	0x0800c5ed
 800c59c:	0800c539 	.word	0x0800c539
 800c5a0:	0800c539 	.word	0x0800c539
 800c5a4:	0800c6b5 	.word	0x0800c6b5
 800c5a8:	682b      	ldr	r3, [r5, #0]
 800c5aa:	1d1a      	adds	r2, r3, #4
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	602a      	str	r2, [r5, #0]
 800c5b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e0a4      	b.n	800c706 <_printf_i+0x1f6>
 800c5bc:	6820      	ldr	r0, [r4, #0]
 800c5be:	6829      	ldr	r1, [r5, #0]
 800c5c0:	0606      	lsls	r6, r0, #24
 800c5c2:	f101 0304 	add.w	r3, r1, #4
 800c5c6:	d50a      	bpl.n	800c5de <_printf_i+0xce>
 800c5c8:	680e      	ldr	r6, [r1, #0]
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	da03      	bge.n	800c5d8 <_printf_i+0xc8>
 800c5d0:	232d      	movs	r3, #45	; 0x2d
 800c5d2:	4276      	negs	r6, r6
 800c5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d8:	230a      	movs	r3, #10
 800c5da:	485e      	ldr	r0, [pc, #376]	; (800c754 <_printf_i+0x244>)
 800c5dc:	e019      	b.n	800c612 <_printf_i+0x102>
 800c5de:	680e      	ldr	r6, [r1, #0]
 800c5e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5e4:	602b      	str	r3, [r5, #0]
 800c5e6:	bf18      	it	ne
 800c5e8:	b236      	sxthne	r6, r6
 800c5ea:	e7ef      	b.n	800c5cc <_printf_i+0xbc>
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	6820      	ldr	r0, [r4, #0]
 800c5f0:	1d19      	adds	r1, r3, #4
 800c5f2:	6029      	str	r1, [r5, #0]
 800c5f4:	0601      	lsls	r1, r0, #24
 800c5f6:	d501      	bpl.n	800c5fc <_printf_i+0xec>
 800c5f8:	681e      	ldr	r6, [r3, #0]
 800c5fa:	e002      	b.n	800c602 <_printf_i+0xf2>
 800c5fc:	0646      	lsls	r6, r0, #25
 800c5fe:	d5fb      	bpl.n	800c5f8 <_printf_i+0xe8>
 800c600:	881e      	ldrh	r6, [r3, #0]
 800c602:	2f6f      	cmp	r7, #111	; 0x6f
 800c604:	bf0c      	ite	eq
 800c606:	2308      	moveq	r3, #8
 800c608:	230a      	movne	r3, #10
 800c60a:	4852      	ldr	r0, [pc, #328]	; (800c754 <_printf_i+0x244>)
 800c60c:	2100      	movs	r1, #0
 800c60e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c612:	6865      	ldr	r5, [r4, #4]
 800c614:	2d00      	cmp	r5, #0
 800c616:	bfa8      	it	ge
 800c618:	6821      	ldrge	r1, [r4, #0]
 800c61a:	60a5      	str	r5, [r4, #8]
 800c61c:	bfa4      	itt	ge
 800c61e:	f021 0104 	bicge.w	r1, r1, #4
 800c622:	6021      	strge	r1, [r4, #0]
 800c624:	b90e      	cbnz	r6, 800c62a <_printf_i+0x11a>
 800c626:	2d00      	cmp	r5, #0
 800c628:	d04d      	beq.n	800c6c6 <_printf_i+0x1b6>
 800c62a:	4615      	mov	r5, r2
 800c62c:	fbb6 f1f3 	udiv	r1, r6, r3
 800c630:	fb03 6711 	mls	r7, r3, r1, r6
 800c634:	5dc7      	ldrb	r7, [r0, r7]
 800c636:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c63a:	4637      	mov	r7, r6
 800c63c:	42bb      	cmp	r3, r7
 800c63e:	460e      	mov	r6, r1
 800c640:	d9f4      	bls.n	800c62c <_printf_i+0x11c>
 800c642:	2b08      	cmp	r3, #8
 800c644:	d10b      	bne.n	800c65e <_printf_i+0x14e>
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	07de      	lsls	r6, r3, #31
 800c64a:	d508      	bpl.n	800c65e <_printf_i+0x14e>
 800c64c:	6923      	ldr	r3, [r4, #16]
 800c64e:	6861      	ldr	r1, [r4, #4]
 800c650:	4299      	cmp	r1, r3
 800c652:	bfde      	ittt	le
 800c654:	2330      	movle	r3, #48	; 0x30
 800c656:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c65a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c65e:	1b52      	subs	r2, r2, r5
 800c660:	6122      	str	r2, [r4, #16]
 800c662:	464b      	mov	r3, r9
 800c664:	4621      	mov	r1, r4
 800c666:	4640      	mov	r0, r8
 800c668:	f8cd a000 	str.w	sl, [sp]
 800c66c:	aa03      	add	r2, sp, #12
 800c66e:	f7ff fedf 	bl	800c430 <_printf_common>
 800c672:	3001      	adds	r0, #1
 800c674:	d14c      	bne.n	800c710 <_printf_i+0x200>
 800c676:	f04f 30ff 	mov.w	r0, #4294967295
 800c67a:	b004      	add	sp, #16
 800c67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c680:	4834      	ldr	r0, [pc, #208]	; (800c754 <_printf_i+0x244>)
 800c682:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c686:	6829      	ldr	r1, [r5, #0]
 800c688:	6823      	ldr	r3, [r4, #0]
 800c68a:	f851 6b04 	ldr.w	r6, [r1], #4
 800c68e:	6029      	str	r1, [r5, #0]
 800c690:	061d      	lsls	r5, r3, #24
 800c692:	d514      	bpl.n	800c6be <_printf_i+0x1ae>
 800c694:	07df      	lsls	r7, r3, #31
 800c696:	bf44      	itt	mi
 800c698:	f043 0320 	orrmi.w	r3, r3, #32
 800c69c:	6023      	strmi	r3, [r4, #0]
 800c69e:	b91e      	cbnz	r6, 800c6a8 <_printf_i+0x198>
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	f023 0320 	bic.w	r3, r3, #32
 800c6a6:	6023      	str	r3, [r4, #0]
 800c6a8:	2310      	movs	r3, #16
 800c6aa:	e7af      	b.n	800c60c <_printf_i+0xfc>
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	f043 0320 	orr.w	r3, r3, #32
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	2378      	movs	r3, #120	; 0x78
 800c6b6:	4828      	ldr	r0, [pc, #160]	; (800c758 <_printf_i+0x248>)
 800c6b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6bc:	e7e3      	b.n	800c686 <_printf_i+0x176>
 800c6be:	0659      	lsls	r1, r3, #25
 800c6c0:	bf48      	it	mi
 800c6c2:	b2b6      	uxthmi	r6, r6
 800c6c4:	e7e6      	b.n	800c694 <_printf_i+0x184>
 800c6c6:	4615      	mov	r5, r2
 800c6c8:	e7bb      	b.n	800c642 <_printf_i+0x132>
 800c6ca:	682b      	ldr	r3, [r5, #0]
 800c6cc:	6826      	ldr	r6, [r4, #0]
 800c6ce:	1d18      	adds	r0, r3, #4
 800c6d0:	6961      	ldr	r1, [r4, #20]
 800c6d2:	6028      	str	r0, [r5, #0]
 800c6d4:	0635      	lsls	r5, r6, #24
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	d501      	bpl.n	800c6de <_printf_i+0x1ce>
 800c6da:	6019      	str	r1, [r3, #0]
 800c6dc:	e002      	b.n	800c6e4 <_printf_i+0x1d4>
 800c6de:	0670      	lsls	r0, r6, #25
 800c6e0:	d5fb      	bpl.n	800c6da <_printf_i+0x1ca>
 800c6e2:	8019      	strh	r1, [r3, #0]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	4615      	mov	r5, r2
 800c6e8:	6123      	str	r3, [r4, #16]
 800c6ea:	e7ba      	b.n	800c662 <_printf_i+0x152>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	1d1a      	adds	r2, r3, #4
 800c6f2:	602a      	str	r2, [r5, #0]
 800c6f4:	681d      	ldr	r5, [r3, #0]
 800c6f6:	6862      	ldr	r2, [r4, #4]
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	f000 fb87 	bl	800ce0c <memchr>
 800c6fe:	b108      	cbz	r0, 800c704 <_printf_i+0x1f4>
 800c700:	1b40      	subs	r0, r0, r5
 800c702:	6060      	str	r0, [r4, #4]
 800c704:	6863      	ldr	r3, [r4, #4]
 800c706:	6123      	str	r3, [r4, #16]
 800c708:	2300      	movs	r3, #0
 800c70a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c70e:	e7a8      	b.n	800c662 <_printf_i+0x152>
 800c710:	462a      	mov	r2, r5
 800c712:	4649      	mov	r1, r9
 800c714:	4640      	mov	r0, r8
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	47d0      	blx	sl
 800c71a:	3001      	adds	r0, #1
 800c71c:	d0ab      	beq.n	800c676 <_printf_i+0x166>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	079b      	lsls	r3, r3, #30
 800c722:	d413      	bmi.n	800c74c <_printf_i+0x23c>
 800c724:	68e0      	ldr	r0, [r4, #12]
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	4298      	cmp	r0, r3
 800c72a:	bfb8      	it	lt
 800c72c:	4618      	movlt	r0, r3
 800c72e:	e7a4      	b.n	800c67a <_printf_i+0x16a>
 800c730:	2301      	movs	r3, #1
 800c732:	4632      	mov	r2, r6
 800c734:	4649      	mov	r1, r9
 800c736:	4640      	mov	r0, r8
 800c738:	47d0      	blx	sl
 800c73a:	3001      	adds	r0, #1
 800c73c:	d09b      	beq.n	800c676 <_printf_i+0x166>
 800c73e:	3501      	adds	r5, #1
 800c740:	68e3      	ldr	r3, [r4, #12]
 800c742:	9903      	ldr	r1, [sp, #12]
 800c744:	1a5b      	subs	r3, r3, r1
 800c746:	42ab      	cmp	r3, r5
 800c748:	dcf2      	bgt.n	800c730 <_printf_i+0x220>
 800c74a:	e7eb      	b.n	800c724 <_printf_i+0x214>
 800c74c:	2500      	movs	r5, #0
 800c74e:	f104 0619 	add.w	r6, r4, #25
 800c752:	e7f5      	b.n	800c740 <_printf_i+0x230>
 800c754:	080108a5 	.word	0x080108a5
 800c758:	080108b6 	.word	0x080108b6

0800c75c <_putc_r>:
 800c75c:	b570      	push	{r4, r5, r6, lr}
 800c75e:	460d      	mov	r5, r1
 800c760:	4614      	mov	r4, r2
 800c762:	4606      	mov	r6, r0
 800c764:	b118      	cbz	r0, 800c76e <_putc_r+0x12>
 800c766:	6983      	ldr	r3, [r0, #24]
 800c768:	b90b      	cbnz	r3, 800c76e <_putc_r+0x12>
 800c76a:	f000 fa4d 	bl	800cc08 <__sinit>
 800c76e:	4b1c      	ldr	r3, [pc, #112]	; (800c7e0 <_putc_r+0x84>)
 800c770:	429c      	cmp	r4, r3
 800c772:	d124      	bne.n	800c7be <_putc_r+0x62>
 800c774:	6874      	ldr	r4, [r6, #4]
 800c776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c778:	07d8      	lsls	r0, r3, #31
 800c77a:	d405      	bmi.n	800c788 <_putc_r+0x2c>
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	0599      	lsls	r1, r3, #22
 800c780:	d402      	bmi.n	800c788 <_putc_r+0x2c>
 800c782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c784:	f7ff fbe7 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800c788:	68a3      	ldr	r3, [r4, #8]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	60a3      	str	r3, [r4, #8]
 800c790:	da05      	bge.n	800c79e <_putc_r+0x42>
 800c792:	69a2      	ldr	r2, [r4, #24]
 800c794:	4293      	cmp	r3, r2
 800c796:	db1c      	blt.n	800c7d2 <_putc_r+0x76>
 800c798:	b2eb      	uxtb	r3, r5
 800c79a:	2b0a      	cmp	r3, #10
 800c79c:	d019      	beq.n	800c7d2 <_putc_r+0x76>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	1c5a      	adds	r2, r3, #1
 800c7a2:	6022      	str	r2, [r4, #0]
 800c7a4:	701d      	strb	r5, [r3, #0]
 800c7a6:	b2ed      	uxtb	r5, r5
 800c7a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7aa:	07da      	lsls	r2, r3, #31
 800c7ac:	d405      	bmi.n	800c7ba <_putc_r+0x5e>
 800c7ae:	89a3      	ldrh	r3, [r4, #12]
 800c7b0:	059b      	lsls	r3, r3, #22
 800c7b2:	d402      	bmi.n	800c7ba <_putc_r+0x5e>
 800c7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7b6:	f7ff fbcf 	bl	800bf58 <__retarget_lock_release_recursive>
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	bd70      	pop	{r4, r5, r6, pc}
 800c7be:	4b09      	ldr	r3, [pc, #36]	; (800c7e4 <_putc_r+0x88>)
 800c7c0:	429c      	cmp	r4, r3
 800c7c2:	d101      	bne.n	800c7c8 <_putc_r+0x6c>
 800c7c4:	68b4      	ldr	r4, [r6, #8]
 800c7c6:	e7d6      	b.n	800c776 <_putc_r+0x1a>
 800c7c8:	4b07      	ldr	r3, [pc, #28]	; (800c7e8 <_putc_r+0x8c>)
 800c7ca:	429c      	cmp	r4, r3
 800c7cc:	bf08      	it	eq
 800c7ce:	68f4      	ldreq	r4, [r6, #12]
 800c7d0:	e7d1      	b.n	800c776 <_putc_r+0x1a>
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f000 f840 	bl	800c85c <__swbuf_r>
 800c7dc:	4605      	mov	r5, r0
 800c7de:	e7e3      	b.n	800c7a8 <_putc_r+0x4c>
 800c7e0:	080108e8 	.word	0x080108e8
 800c7e4:	08010908 	.word	0x08010908
 800c7e8:	080108c8 	.word	0x080108c8

0800c7ec <putc>:
 800c7ec:	4b02      	ldr	r3, [pc, #8]	; (800c7f8 <putc+0xc>)
 800c7ee:	460a      	mov	r2, r1
 800c7f0:	4601      	mov	r1, r0
 800c7f2:	6818      	ldr	r0, [r3, #0]
 800c7f4:	f7ff bfb2 	b.w	800c75c <_putc_r>
 800c7f8:	20000060 	.word	0x20000060

0800c7fc <_sbrk_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	2300      	movs	r3, #0
 800c800:	4d05      	ldr	r5, [pc, #20]	; (800c818 <_sbrk_r+0x1c>)
 800c802:	4604      	mov	r4, r0
 800c804:	4608      	mov	r0, r1
 800c806:	602b      	str	r3, [r5, #0]
 800c808:	f7f8 f93e 	bl	8004a88 <_sbrk>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_sbrk_r+0x1a>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_sbrk_r+0x1a>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	200034b0 	.word	0x200034b0

0800c81c <_vsiprintf_r>:
 800c81c:	b500      	push	{lr}
 800c81e:	b09b      	sub	sp, #108	; 0x6c
 800c820:	9100      	str	r1, [sp, #0]
 800c822:	9104      	str	r1, [sp, #16]
 800c824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c828:	9105      	str	r1, [sp, #20]
 800c82a:	9102      	str	r1, [sp, #8]
 800c82c:	4905      	ldr	r1, [pc, #20]	; (800c844 <_vsiprintf_r+0x28>)
 800c82e:	9103      	str	r1, [sp, #12]
 800c830:	4669      	mov	r1, sp
 800c832:	f000 fba9 	bl	800cf88 <_svfiprintf_r>
 800c836:	2200      	movs	r2, #0
 800c838:	9b00      	ldr	r3, [sp, #0]
 800c83a:	701a      	strb	r2, [r3, #0]
 800c83c:	b01b      	add	sp, #108	; 0x6c
 800c83e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c842:	bf00      	nop
 800c844:	ffff0208 	.word	0xffff0208

0800c848 <vsiprintf>:
 800c848:	4613      	mov	r3, r2
 800c84a:	460a      	mov	r2, r1
 800c84c:	4601      	mov	r1, r0
 800c84e:	4802      	ldr	r0, [pc, #8]	; (800c858 <vsiprintf+0x10>)
 800c850:	6800      	ldr	r0, [r0, #0]
 800c852:	f7ff bfe3 	b.w	800c81c <_vsiprintf_r>
 800c856:	bf00      	nop
 800c858:	20000060 	.word	0x20000060

0800c85c <__swbuf_r>:
 800c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85e:	460e      	mov	r6, r1
 800c860:	4614      	mov	r4, r2
 800c862:	4605      	mov	r5, r0
 800c864:	b118      	cbz	r0, 800c86e <__swbuf_r+0x12>
 800c866:	6983      	ldr	r3, [r0, #24]
 800c868:	b90b      	cbnz	r3, 800c86e <__swbuf_r+0x12>
 800c86a:	f000 f9cd 	bl	800cc08 <__sinit>
 800c86e:	4b21      	ldr	r3, [pc, #132]	; (800c8f4 <__swbuf_r+0x98>)
 800c870:	429c      	cmp	r4, r3
 800c872:	d12b      	bne.n	800c8cc <__swbuf_r+0x70>
 800c874:	686c      	ldr	r4, [r5, #4]
 800c876:	69a3      	ldr	r3, [r4, #24]
 800c878:	60a3      	str	r3, [r4, #8]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	071a      	lsls	r2, r3, #28
 800c87e:	d52f      	bpl.n	800c8e0 <__swbuf_r+0x84>
 800c880:	6923      	ldr	r3, [r4, #16]
 800c882:	b36b      	cbz	r3, 800c8e0 <__swbuf_r+0x84>
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	6820      	ldr	r0, [r4, #0]
 800c888:	b2f6      	uxtb	r6, r6
 800c88a:	1ac0      	subs	r0, r0, r3
 800c88c:	6963      	ldr	r3, [r4, #20]
 800c88e:	4637      	mov	r7, r6
 800c890:	4283      	cmp	r3, r0
 800c892:	dc04      	bgt.n	800c89e <__swbuf_r+0x42>
 800c894:	4621      	mov	r1, r4
 800c896:	4628      	mov	r0, r5
 800c898:	f000 f922 	bl	800cae0 <_fflush_r>
 800c89c:	bb30      	cbnz	r0, 800c8ec <__swbuf_r+0x90>
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	3001      	adds	r0, #1
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	60a3      	str	r3, [r4, #8]
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	1c5a      	adds	r2, r3, #1
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	701e      	strb	r6, [r3, #0]
 800c8ae:	6963      	ldr	r3, [r4, #20]
 800c8b0:	4283      	cmp	r3, r0
 800c8b2:	d004      	beq.n	800c8be <__swbuf_r+0x62>
 800c8b4:	89a3      	ldrh	r3, [r4, #12]
 800c8b6:	07db      	lsls	r3, r3, #31
 800c8b8:	d506      	bpl.n	800c8c8 <__swbuf_r+0x6c>
 800c8ba:	2e0a      	cmp	r6, #10
 800c8bc:	d104      	bne.n	800c8c8 <__swbuf_r+0x6c>
 800c8be:	4621      	mov	r1, r4
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f000 f90d 	bl	800cae0 <_fflush_r>
 800c8c6:	b988      	cbnz	r0, 800c8ec <__swbuf_r+0x90>
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8cc:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <__swbuf_r+0x9c>)
 800c8ce:	429c      	cmp	r4, r3
 800c8d0:	d101      	bne.n	800c8d6 <__swbuf_r+0x7a>
 800c8d2:	68ac      	ldr	r4, [r5, #8]
 800c8d4:	e7cf      	b.n	800c876 <__swbuf_r+0x1a>
 800c8d6:	4b09      	ldr	r3, [pc, #36]	; (800c8fc <__swbuf_r+0xa0>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	bf08      	it	eq
 800c8dc:	68ec      	ldreq	r4, [r5, #12]
 800c8de:	e7ca      	b.n	800c876 <__swbuf_r+0x1a>
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f000 f80c 	bl	800c900 <__swsetup_r>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d0cb      	beq.n	800c884 <__swbuf_r+0x28>
 800c8ec:	f04f 37ff 	mov.w	r7, #4294967295
 800c8f0:	e7ea      	b.n	800c8c8 <__swbuf_r+0x6c>
 800c8f2:	bf00      	nop
 800c8f4:	080108e8 	.word	0x080108e8
 800c8f8:	08010908 	.word	0x08010908
 800c8fc:	080108c8 	.word	0x080108c8

0800c900 <__swsetup_r>:
 800c900:	4b32      	ldr	r3, [pc, #200]	; (800c9cc <__swsetup_r+0xcc>)
 800c902:	b570      	push	{r4, r5, r6, lr}
 800c904:	681d      	ldr	r5, [r3, #0]
 800c906:	4606      	mov	r6, r0
 800c908:	460c      	mov	r4, r1
 800c90a:	b125      	cbz	r5, 800c916 <__swsetup_r+0x16>
 800c90c:	69ab      	ldr	r3, [r5, #24]
 800c90e:	b913      	cbnz	r3, 800c916 <__swsetup_r+0x16>
 800c910:	4628      	mov	r0, r5
 800c912:	f000 f979 	bl	800cc08 <__sinit>
 800c916:	4b2e      	ldr	r3, [pc, #184]	; (800c9d0 <__swsetup_r+0xd0>)
 800c918:	429c      	cmp	r4, r3
 800c91a:	d10f      	bne.n	800c93c <__swsetup_r+0x3c>
 800c91c:	686c      	ldr	r4, [r5, #4]
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c924:	0719      	lsls	r1, r3, #28
 800c926:	d42c      	bmi.n	800c982 <__swsetup_r+0x82>
 800c928:	06dd      	lsls	r5, r3, #27
 800c92a:	d411      	bmi.n	800c950 <__swsetup_r+0x50>
 800c92c:	2309      	movs	r3, #9
 800c92e:	6033      	str	r3, [r6, #0]
 800c930:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	e03e      	b.n	800c9ba <__swsetup_r+0xba>
 800c93c:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <__swsetup_r+0xd4>)
 800c93e:	429c      	cmp	r4, r3
 800c940:	d101      	bne.n	800c946 <__swsetup_r+0x46>
 800c942:	68ac      	ldr	r4, [r5, #8]
 800c944:	e7eb      	b.n	800c91e <__swsetup_r+0x1e>
 800c946:	4b24      	ldr	r3, [pc, #144]	; (800c9d8 <__swsetup_r+0xd8>)
 800c948:	429c      	cmp	r4, r3
 800c94a:	bf08      	it	eq
 800c94c:	68ec      	ldreq	r4, [r5, #12]
 800c94e:	e7e6      	b.n	800c91e <__swsetup_r+0x1e>
 800c950:	0758      	lsls	r0, r3, #29
 800c952:	d512      	bpl.n	800c97a <__swsetup_r+0x7a>
 800c954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c956:	b141      	cbz	r1, 800c96a <__swsetup_r+0x6a>
 800c958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c95c:	4299      	cmp	r1, r3
 800c95e:	d002      	beq.n	800c966 <__swsetup_r+0x66>
 800c960:	4630      	mov	r0, r6
 800c962:	f7ff fb31 	bl	800bfc8 <_free_r>
 800c966:	2300      	movs	r3, #0
 800c968:	6363      	str	r3, [r4, #52]	; 0x34
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	2300      	movs	r3, #0
 800c974:	6063      	str	r3, [r4, #4]
 800c976:	6923      	ldr	r3, [r4, #16]
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	89a3      	ldrh	r3, [r4, #12]
 800c97c:	f043 0308 	orr.w	r3, r3, #8
 800c980:	81a3      	strh	r3, [r4, #12]
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	b94b      	cbnz	r3, 800c99a <__swsetup_r+0x9a>
 800c986:	89a3      	ldrh	r3, [r4, #12]
 800c988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c98c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c990:	d003      	beq.n	800c99a <__swsetup_r+0x9a>
 800c992:	4621      	mov	r1, r4
 800c994:	4630      	mov	r0, r6
 800c996:	f000 f9f9 	bl	800cd8c <__smakebuf_r>
 800c99a:	89a0      	ldrh	r0, [r4, #12]
 800c99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a0:	f010 0301 	ands.w	r3, r0, #1
 800c9a4:	d00a      	beq.n	800c9bc <__swsetup_r+0xbc>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60a3      	str	r3, [r4, #8]
 800c9aa:	6963      	ldr	r3, [r4, #20]
 800c9ac:	425b      	negs	r3, r3
 800c9ae:	61a3      	str	r3, [r4, #24]
 800c9b0:	6923      	ldr	r3, [r4, #16]
 800c9b2:	b943      	cbnz	r3, 800c9c6 <__swsetup_r+0xc6>
 800c9b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9b8:	d1ba      	bne.n	800c930 <__swsetup_r+0x30>
 800c9ba:	bd70      	pop	{r4, r5, r6, pc}
 800c9bc:	0781      	lsls	r1, r0, #30
 800c9be:	bf58      	it	pl
 800c9c0:	6963      	ldrpl	r3, [r4, #20]
 800c9c2:	60a3      	str	r3, [r4, #8]
 800c9c4:	e7f4      	b.n	800c9b0 <__swsetup_r+0xb0>
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e7f7      	b.n	800c9ba <__swsetup_r+0xba>
 800c9ca:	bf00      	nop
 800c9cc:	20000060 	.word	0x20000060
 800c9d0:	080108e8 	.word	0x080108e8
 800c9d4:	08010908 	.word	0x08010908
 800c9d8:	080108c8 	.word	0x080108c8

0800c9dc <__sflush_r>:
 800c9dc:	898a      	ldrh	r2, [r1, #12]
 800c9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	0710      	lsls	r0, r2, #28
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	d457      	bmi.n	800ca98 <__sflush_r+0xbc>
 800c9e8:	684b      	ldr	r3, [r1, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dc04      	bgt.n	800c9f8 <__sflush_r+0x1c>
 800c9ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	dc01      	bgt.n	800c9f8 <__sflush_r+0x1c>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9fa:	2e00      	cmp	r6, #0
 800c9fc:	d0fa      	beq.n	800c9f4 <__sflush_r+0x18>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca04:	682f      	ldr	r7, [r5, #0]
 800ca06:	602b      	str	r3, [r5, #0]
 800ca08:	d032      	beq.n	800ca70 <__sflush_r+0x94>
 800ca0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	075a      	lsls	r2, r3, #29
 800ca10:	d505      	bpl.n	800ca1e <__sflush_r+0x42>
 800ca12:	6863      	ldr	r3, [r4, #4]
 800ca14:	1ac0      	subs	r0, r0, r3
 800ca16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca18:	b10b      	cbz	r3, 800ca1e <__sflush_r+0x42>
 800ca1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca1c:	1ac0      	subs	r0, r0, r3
 800ca1e:	2300      	movs	r3, #0
 800ca20:	4602      	mov	r2, r0
 800ca22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca24:	4628      	mov	r0, r5
 800ca26:	6a21      	ldr	r1, [r4, #32]
 800ca28:	47b0      	blx	r6
 800ca2a:	1c43      	adds	r3, r0, #1
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	d106      	bne.n	800ca3e <__sflush_r+0x62>
 800ca30:	6829      	ldr	r1, [r5, #0]
 800ca32:	291d      	cmp	r1, #29
 800ca34:	d82c      	bhi.n	800ca90 <__sflush_r+0xb4>
 800ca36:	4a29      	ldr	r2, [pc, #164]	; (800cadc <__sflush_r+0x100>)
 800ca38:	40ca      	lsrs	r2, r1
 800ca3a:	07d6      	lsls	r6, r2, #31
 800ca3c:	d528      	bpl.n	800ca90 <__sflush_r+0xb4>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	6062      	str	r2, [r4, #4]
 800ca42:	6922      	ldr	r2, [r4, #16]
 800ca44:	04d9      	lsls	r1, r3, #19
 800ca46:	6022      	str	r2, [r4, #0]
 800ca48:	d504      	bpl.n	800ca54 <__sflush_r+0x78>
 800ca4a:	1c42      	adds	r2, r0, #1
 800ca4c:	d101      	bne.n	800ca52 <__sflush_r+0x76>
 800ca4e:	682b      	ldr	r3, [r5, #0]
 800ca50:	b903      	cbnz	r3, 800ca54 <__sflush_r+0x78>
 800ca52:	6560      	str	r0, [r4, #84]	; 0x54
 800ca54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca56:	602f      	str	r7, [r5, #0]
 800ca58:	2900      	cmp	r1, #0
 800ca5a:	d0cb      	beq.n	800c9f4 <__sflush_r+0x18>
 800ca5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca60:	4299      	cmp	r1, r3
 800ca62:	d002      	beq.n	800ca6a <__sflush_r+0x8e>
 800ca64:	4628      	mov	r0, r5
 800ca66:	f7ff faaf 	bl	800bfc8 <_free_r>
 800ca6a:	2000      	movs	r0, #0
 800ca6c:	6360      	str	r0, [r4, #52]	; 0x34
 800ca6e:	e7c2      	b.n	800c9f6 <__sflush_r+0x1a>
 800ca70:	6a21      	ldr	r1, [r4, #32]
 800ca72:	2301      	movs	r3, #1
 800ca74:	4628      	mov	r0, r5
 800ca76:	47b0      	blx	r6
 800ca78:	1c41      	adds	r1, r0, #1
 800ca7a:	d1c7      	bne.n	800ca0c <__sflush_r+0x30>
 800ca7c:	682b      	ldr	r3, [r5, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d0c4      	beq.n	800ca0c <__sflush_r+0x30>
 800ca82:	2b1d      	cmp	r3, #29
 800ca84:	d001      	beq.n	800ca8a <__sflush_r+0xae>
 800ca86:	2b16      	cmp	r3, #22
 800ca88:	d101      	bne.n	800ca8e <__sflush_r+0xb2>
 800ca8a:	602f      	str	r7, [r5, #0]
 800ca8c:	e7b2      	b.n	800c9f4 <__sflush_r+0x18>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca94:	81a3      	strh	r3, [r4, #12]
 800ca96:	e7ae      	b.n	800c9f6 <__sflush_r+0x1a>
 800ca98:	690f      	ldr	r7, [r1, #16]
 800ca9a:	2f00      	cmp	r7, #0
 800ca9c:	d0aa      	beq.n	800c9f4 <__sflush_r+0x18>
 800ca9e:	0793      	lsls	r3, r2, #30
 800caa0:	bf18      	it	ne
 800caa2:	2300      	movne	r3, #0
 800caa4:	680e      	ldr	r6, [r1, #0]
 800caa6:	bf08      	it	eq
 800caa8:	694b      	ldreq	r3, [r1, #20]
 800caaa:	1bf6      	subs	r6, r6, r7
 800caac:	600f      	str	r7, [r1, #0]
 800caae:	608b      	str	r3, [r1, #8]
 800cab0:	2e00      	cmp	r6, #0
 800cab2:	dd9f      	ble.n	800c9f4 <__sflush_r+0x18>
 800cab4:	4633      	mov	r3, r6
 800cab6:	463a      	mov	r2, r7
 800cab8:	4628      	mov	r0, r5
 800caba:	6a21      	ldr	r1, [r4, #32]
 800cabc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cac0:	47e0      	blx	ip
 800cac2:	2800      	cmp	r0, #0
 800cac4:	dc06      	bgt.n	800cad4 <__sflush_r+0xf8>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295
 800cacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cad0:	81a3      	strh	r3, [r4, #12]
 800cad2:	e790      	b.n	800c9f6 <__sflush_r+0x1a>
 800cad4:	4407      	add	r7, r0
 800cad6:	1a36      	subs	r6, r6, r0
 800cad8:	e7ea      	b.n	800cab0 <__sflush_r+0xd4>
 800cada:	bf00      	nop
 800cadc:	20400001 	.word	0x20400001

0800cae0 <_fflush_r>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	690b      	ldr	r3, [r1, #16]
 800cae4:	4605      	mov	r5, r0
 800cae6:	460c      	mov	r4, r1
 800cae8:	b913      	cbnz	r3, 800caf0 <_fflush_r+0x10>
 800caea:	2500      	movs	r5, #0
 800caec:	4628      	mov	r0, r5
 800caee:	bd38      	pop	{r3, r4, r5, pc}
 800caf0:	b118      	cbz	r0, 800cafa <_fflush_r+0x1a>
 800caf2:	6983      	ldr	r3, [r0, #24]
 800caf4:	b90b      	cbnz	r3, 800cafa <_fflush_r+0x1a>
 800caf6:	f000 f887 	bl	800cc08 <__sinit>
 800cafa:	4b14      	ldr	r3, [pc, #80]	; (800cb4c <_fflush_r+0x6c>)
 800cafc:	429c      	cmp	r4, r3
 800cafe:	d11b      	bne.n	800cb38 <_fflush_r+0x58>
 800cb00:	686c      	ldr	r4, [r5, #4]
 800cb02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0ef      	beq.n	800caea <_fflush_r+0xa>
 800cb0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb0c:	07d0      	lsls	r0, r2, #31
 800cb0e:	d404      	bmi.n	800cb1a <_fflush_r+0x3a>
 800cb10:	0599      	lsls	r1, r3, #22
 800cb12:	d402      	bmi.n	800cb1a <_fflush_r+0x3a>
 800cb14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb16:	f7ff fa1e 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	f7ff ff5d 	bl	800c9dc <__sflush_r>
 800cb22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb24:	4605      	mov	r5, r0
 800cb26:	07da      	lsls	r2, r3, #31
 800cb28:	d4e0      	bmi.n	800caec <_fflush_r+0xc>
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	059b      	lsls	r3, r3, #22
 800cb2e:	d4dd      	bmi.n	800caec <_fflush_r+0xc>
 800cb30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb32:	f7ff fa11 	bl	800bf58 <__retarget_lock_release_recursive>
 800cb36:	e7d9      	b.n	800caec <_fflush_r+0xc>
 800cb38:	4b05      	ldr	r3, [pc, #20]	; (800cb50 <_fflush_r+0x70>)
 800cb3a:	429c      	cmp	r4, r3
 800cb3c:	d101      	bne.n	800cb42 <_fflush_r+0x62>
 800cb3e:	68ac      	ldr	r4, [r5, #8]
 800cb40:	e7df      	b.n	800cb02 <_fflush_r+0x22>
 800cb42:	4b04      	ldr	r3, [pc, #16]	; (800cb54 <_fflush_r+0x74>)
 800cb44:	429c      	cmp	r4, r3
 800cb46:	bf08      	it	eq
 800cb48:	68ec      	ldreq	r4, [r5, #12]
 800cb4a:	e7da      	b.n	800cb02 <_fflush_r+0x22>
 800cb4c:	080108e8 	.word	0x080108e8
 800cb50:	08010908 	.word	0x08010908
 800cb54:	080108c8 	.word	0x080108c8

0800cb58 <std>:
 800cb58:	2300      	movs	r3, #0
 800cb5a:	b510      	push	{r4, lr}
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb66:	6083      	str	r3, [r0, #8]
 800cb68:	8181      	strh	r1, [r0, #12]
 800cb6a:	6643      	str	r3, [r0, #100]	; 0x64
 800cb6c:	81c2      	strh	r2, [r0, #14]
 800cb6e:	6183      	str	r3, [r0, #24]
 800cb70:	4619      	mov	r1, r3
 800cb72:	2208      	movs	r2, #8
 800cb74:	305c      	adds	r0, #92	; 0x5c
 800cb76:	f7ff fa1f 	bl	800bfb8 <memset>
 800cb7a:	4b05      	ldr	r3, [pc, #20]	; (800cb90 <std+0x38>)
 800cb7c:	6224      	str	r4, [r4, #32]
 800cb7e:	6263      	str	r3, [r4, #36]	; 0x24
 800cb80:	4b04      	ldr	r3, [pc, #16]	; (800cb94 <std+0x3c>)
 800cb82:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb84:	4b04      	ldr	r3, [pc, #16]	; (800cb98 <std+0x40>)
 800cb86:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb88:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <std+0x44>)
 800cb8a:	6323      	str	r3, [r4, #48]	; 0x30
 800cb8c:	bd10      	pop	{r4, pc}
 800cb8e:	bf00      	nop
 800cb90:	0800d189 	.word	0x0800d189
 800cb94:	0800d1ab 	.word	0x0800d1ab
 800cb98:	0800d1e3 	.word	0x0800d1e3
 800cb9c:	0800d207 	.word	0x0800d207

0800cba0 <_cleanup_r>:
 800cba0:	4901      	ldr	r1, [pc, #4]	; (800cba8 <_cleanup_r+0x8>)
 800cba2:	f000 b8af 	b.w	800cd04 <_fwalk_reent>
 800cba6:	bf00      	nop
 800cba8:	0800cae1 	.word	0x0800cae1

0800cbac <__sfmoreglue>:
 800cbac:	2268      	movs	r2, #104	; 0x68
 800cbae:	b570      	push	{r4, r5, r6, lr}
 800cbb0:	1e4d      	subs	r5, r1, #1
 800cbb2:	4355      	muls	r5, r2
 800cbb4:	460e      	mov	r6, r1
 800cbb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbba:	f7ff fa6d 	bl	800c098 <_malloc_r>
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	b140      	cbz	r0, 800cbd4 <__sfmoreglue+0x28>
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	e9c0 1600 	strd	r1, r6, [r0]
 800cbc8:	300c      	adds	r0, #12
 800cbca:	60a0      	str	r0, [r4, #8]
 800cbcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbd0:	f7ff f9f2 	bl	800bfb8 <memset>
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	bd70      	pop	{r4, r5, r6, pc}

0800cbd8 <__sfp_lock_acquire>:
 800cbd8:	4801      	ldr	r0, [pc, #4]	; (800cbe0 <__sfp_lock_acquire+0x8>)
 800cbda:	f7ff b9bc 	b.w	800bf56 <__retarget_lock_acquire_recursive>
 800cbde:	bf00      	nop
 800cbe0:	200034a5 	.word	0x200034a5

0800cbe4 <__sfp_lock_release>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	; (800cbec <__sfp_lock_release+0x8>)
 800cbe6:	f7ff b9b7 	b.w	800bf58 <__retarget_lock_release_recursive>
 800cbea:	bf00      	nop
 800cbec:	200034a5 	.word	0x200034a5

0800cbf0 <__sinit_lock_acquire>:
 800cbf0:	4801      	ldr	r0, [pc, #4]	; (800cbf8 <__sinit_lock_acquire+0x8>)
 800cbf2:	f7ff b9b0 	b.w	800bf56 <__retarget_lock_acquire_recursive>
 800cbf6:	bf00      	nop
 800cbf8:	200034a6 	.word	0x200034a6

0800cbfc <__sinit_lock_release>:
 800cbfc:	4801      	ldr	r0, [pc, #4]	; (800cc04 <__sinit_lock_release+0x8>)
 800cbfe:	f7ff b9ab 	b.w	800bf58 <__retarget_lock_release_recursive>
 800cc02:	bf00      	nop
 800cc04:	200034a6 	.word	0x200034a6

0800cc08 <__sinit>:
 800cc08:	b510      	push	{r4, lr}
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	f7ff fff0 	bl	800cbf0 <__sinit_lock_acquire>
 800cc10:	69a3      	ldr	r3, [r4, #24]
 800cc12:	b11b      	cbz	r3, 800cc1c <__sinit+0x14>
 800cc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc18:	f7ff bff0 	b.w	800cbfc <__sinit_lock_release>
 800cc1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc20:	6523      	str	r3, [r4, #80]	; 0x50
 800cc22:	4b13      	ldr	r3, [pc, #76]	; (800cc70 <__sinit+0x68>)
 800cc24:	4a13      	ldr	r2, [pc, #76]	; (800cc74 <__sinit+0x6c>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc2a:	42a3      	cmp	r3, r4
 800cc2c:	bf08      	it	eq
 800cc2e:	2301      	moveq	r3, #1
 800cc30:	4620      	mov	r0, r4
 800cc32:	bf08      	it	eq
 800cc34:	61a3      	streq	r3, [r4, #24]
 800cc36:	f000 f81f 	bl	800cc78 <__sfp>
 800cc3a:	6060      	str	r0, [r4, #4]
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 f81b 	bl	800cc78 <__sfp>
 800cc42:	60a0      	str	r0, [r4, #8]
 800cc44:	4620      	mov	r0, r4
 800cc46:	f000 f817 	bl	800cc78 <__sfp>
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	2104      	movs	r1, #4
 800cc4e:	60e0      	str	r0, [r4, #12]
 800cc50:	6860      	ldr	r0, [r4, #4]
 800cc52:	f7ff ff81 	bl	800cb58 <std>
 800cc56:	2201      	movs	r2, #1
 800cc58:	2109      	movs	r1, #9
 800cc5a:	68a0      	ldr	r0, [r4, #8]
 800cc5c:	f7ff ff7c 	bl	800cb58 <std>
 800cc60:	2202      	movs	r2, #2
 800cc62:	2112      	movs	r1, #18
 800cc64:	68e0      	ldr	r0, [r4, #12]
 800cc66:	f7ff ff77 	bl	800cb58 <std>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	61a3      	str	r3, [r4, #24]
 800cc6e:	e7d1      	b.n	800cc14 <__sinit+0xc>
 800cc70:	08010890 	.word	0x08010890
 800cc74:	0800cba1 	.word	0x0800cba1

0800cc78 <__sfp>:
 800cc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7a:	4607      	mov	r7, r0
 800cc7c:	f7ff ffac 	bl	800cbd8 <__sfp_lock_acquire>
 800cc80:	4b1e      	ldr	r3, [pc, #120]	; (800ccfc <__sfp+0x84>)
 800cc82:	681e      	ldr	r6, [r3, #0]
 800cc84:	69b3      	ldr	r3, [r6, #24]
 800cc86:	b913      	cbnz	r3, 800cc8e <__sfp+0x16>
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7ff ffbd 	bl	800cc08 <__sinit>
 800cc8e:	3648      	adds	r6, #72	; 0x48
 800cc90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc94:	3b01      	subs	r3, #1
 800cc96:	d503      	bpl.n	800cca0 <__sfp+0x28>
 800cc98:	6833      	ldr	r3, [r6, #0]
 800cc9a:	b30b      	cbz	r3, 800cce0 <__sfp+0x68>
 800cc9c:	6836      	ldr	r6, [r6, #0]
 800cc9e:	e7f7      	b.n	800cc90 <__sfp+0x18>
 800cca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cca4:	b9d5      	cbnz	r5, 800ccdc <__sfp+0x64>
 800cca6:	4b16      	ldr	r3, [pc, #88]	; (800cd00 <__sfp+0x88>)
 800cca8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ccac:	60e3      	str	r3, [r4, #12]
 800ccae:	6665      	str	r5, [r4, #100]	; 0x64
 800ccb0:	f7ff f950 	bl	800bf54 <__retarget_lock_init_recursive>
 800ccb4:	f7ff ff96 	bl	800cbe4 <__sfp_lock_release>
 800ccb8:	2208      	movs	r2, #8
 800ccba:	4629      	mov	r1, r5
 800ccbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ccc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ccc4:	6025      	str	r5, [r4, #0]
 800ccc6:	61a5      	str	r5, [r4, #24]
 800ccc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cccc:	f7ff f974 	bl	800bfb8 <memset>
 800ccd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccd8:	4620      	mov	r0, r4
 800ccda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccdc:	3468      	adds	r4, #104	; 0x68
 800ccde:	e7d9      	b.n	800cc94 <__sfp+0x1c>
 800cce0:	2104      	movs	r1, #4
 800cce2:	4638      	mov	r0, r7
 800cce4:	f7ff ff62 	bl	800cbac <__sfmoreglue>
 800cce8:	4604      	mov	r4, r0
 800ccea:	6030      	str	r0, [r6, #0]
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d1d5      	bne.n	800cc9c <__sfp+0x24>
 800ccf0:	f7ff ff78 	bl	800cbe4 <__sfp_lock_release>
 800ccf4:	230c      	movs	r3, #12
 800ccf6:	603b      	str	r3, [r7, #0]
 800ccf8:	e7ee      	b.n	800ccd8 <__sfp+0x60>
 800ccfa:	bf00      	nop
 800ccfc:	08010890 	.word	0x08010890
 800cd00:	ffff0001 	.word	0xffff0001

0800cd04 <_fwalk_reent>:
 800cd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd08:	4606      	mov	r6, r0
 800cd0a:	4688      	mov	r8, r1
 800cd0c:	2700      	movs	r7, #0
 800cd0e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd16:	f1b9 0901 	subs.w	r9, r9, #1
 800cd1a:	d505      	bpl.n	800cd28 <_fwalk_reent+0x24>
 800cd1c:	6824      	ldr	r4, [r4, #0]
 800cd1e:	2c00      	cmp	r4, #0
 800cd20:	d1f7      	bne.n	800cd12 <_fwalk_reent+0xe>
 800cd22:	4638      	mov	r0, r7
 800cd24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd28:	89ab      	ldrh	r3, [r5, #12]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d907      	bls.n	800cd3e <_fwalk_reent+0x3a>
 800cd2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd32:	3301      	adds	r3, #1
 800cd34:	d003      	beq.n	800cd3e <_fwalk_reent+0x3a>
 800cd36:	4629      	mov	r1, r5
 800cd38:	4630      	mov	r0, r6
 800cd3a:	47c0      	blx	r8
 800cd3c:	4307      	orrs	r7, r0
 800cd3e:	3568      	adds	r5, #104	; 0x68
 800cd40:	e7e9      	b.n	800cd16 <_fwalk_reent+0x12>

0800cd42 <__swhatbuf_r>:
 800cd42:	b570      	push	{r4, r5, r6, lr}
 800cd44:	460e      	mov	r6, r1
 800cd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd4a:	4614      	mov	r4, r2
 800cd4c:	2900      	cmp	r1, #0
 800cd4e:	461d      	mov	r5, r3
 800cd50:	b096      	sub	sp, #88	; 0x58
 800cd52:	da08      	bge.n	800cd66 <__swhatbuf_r+0x24>
 800cd54:	2200      	movs	r2, #0
 800cd56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd5a:	602a      	str	r2, [r5, #0]
 800cd5c:	061a      	lsls	r2, r3, #24
 800cd5e:	d410      	bmi.n	800cd82 <__swhatbuf_r+0x40>
 800cd60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd64:	e00e      	b.n	800cd84 <__swhatbuf_r+0x42>
 800cd66:	466a      	mov	r2, sp
 800cd68:	f000 fa74 	bl	800d254 <_fstat_r>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	dbf1      	blt.n	800cd54 <__swhatbuf_r+0x12>
 800cd70:	9a01      	ldr	r2, [sp, #4]
 800cd72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd7a:	425a      	negs	r2, r3
 800cd7c:	415a      	adcs	r2, r3
 800cd7e:	602a      	str	r2, [r5, #0]
 800cd80:	e7ee      	b.n	800cd60 <__swhatbuf_r+0x1e>
 800cd82:	2340      	movs	r3, #64	; 0x40
 800cd84:	2000      	movs	r0, #0
 800cd86:	6023      	str	r3, [r4, #0]
 800cd88:	b016      	add	sp, #88	; 0x58
 800cd8a:	bd70      	pop	{r4, r5, r6, pc}

0800cd8c <__smakebuf_r>:
 800cd8c:	898b      	ldrh	r3, [r1, #12]
 800cd8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd90:	079d      	lsls	r5, r3, #30
 800cd92:	4606      	mov	r6, r0
 800cd94:	460c      	mov	r4, r1
 800cd96:	d507      	bpl.n	800cda8 <__smakebuf_r+0x1c>
 800cd98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	6123      	str	r3, [r4, #16]
 800cda0:	2301      	movs	r3, #1
 800cda2:	6163      	str	r3, [r4, #20]
 800cda4:	b002      	add	sp, #8
 800cda6:	bd70      	pop	{r4, r5, r6, pc}
 800cda8:	466a      	mov	r2, sp
 800cdaa:	ab01      	add	r3, sp, #4
 800cdac:	f7ff ffc9 	bl	800cd42 <__swhatbuf_r>
 800cdb0:	9900      	ldr	r1, [sp, #0]
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f7ff f96f 	bl	800c098 <_malloc_r>
 800cdba:	b948      	cbnz	r0, 800cdd0 <__smakebuf_r+0x44>
 800cdbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc0:	059a      	lsls	r2, r3, #22
 800cdc2:	d4ef      	bmi.n	800cda4 <__smakebuf_r+0x18>
 800cdc4:	f023 0303 	bic.w	r3, r3, #3
 800cdc8:	f043 0302 	orr.w	r3, r3, #2
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	e7e3      	b.n	800cd98 <__smakebuf_r+0xc>
 800cdd0:	4b0d      	ldr	r3, [pc, #52]	; (800ce08 <__smakebuf_r+0x7c>)
 800cdd2:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	6020      	str	r0, [r4, #0]
 800cdd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cddc:	81a3      	strh	r3, [r4, #12]
 800cdde:	9b00      	ldr	r3, [sp, #0]
 800cde0:	6120      	str	r0, [r4, #16]
 800cde2:	6163      	str	r3, [r4, #20]
 800cde4:	9b01      	ldr	r3, [sp, #4]
 800cde6:	b15b      	cbz	r3, 800ce00 <__smakebuf_r+0x74>
 800cde8:	4630      	mov	r0, r6
 800cdea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdee:	f000 fa43 	bl	800d278 <_isatty_r>
 800cdf2:	b128      	cbz	r0, 800ce00 <__smakebuf_r+0x74>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f023 0303 	bic.w	r3, r3, #3
 800cdfa:	f043 0301 	orr.w	r3, r3, #1
 800cdfe:	81a3      	strh	r3, [r4, #12]
 800ce00:	89a0      	ldrh	r0, [r4, #12]
 800ce02:	4305      	orrs	r5, r0
 800ce04:	81a5      	strh	r5, [r4, #12]
 800ce06:	e7cd      	b.n	800cda4 <__smakebuf_r+0x18>
 800ce08:	0800cba1 	.word	0x0800cba1

0800ce0c <memchr>:
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	b2c9      	uxtb	r1, r1
 800ce12:	4402      	add	r2, r0
 800ce14:	4293      	cmp	r3, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	d101      	bne.n	800ce1e <memchr+0x12>
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	e003      	b.n	800ce26 <memchr+0x1a>
 800ce1e:	7804      	ldrb	r4, [r0, #0]
 800ce20:	3301      	adds	r3, #1
 800ce22:	428c      	cmp	r4, r1
 800ce24:	d1f6      	bne.n	800ce14 <memchr+0x8>
 800ce26:	bd10      	pop	{r4, pc}

0800ce28 <memmove>:
 800ce28:	4288      	cmp	r0, r1
 800ce2a:	b510      	push	{r4, lr}
 800ce2c:	eb01 0402 	add.w	r4, r1, r2
 800ce30:	d902      	bls.n	800ce38 <memmove+0x10>
 800ce32:	4284      	cmp	r4, r0
 800ce34:	4623      	mov	r3, r4
 800ce36:	d807      	bhi.n	800ce48 <memmove+0x20>
 800ce38:	1e43      	subs	r3, r0, #1
 800ce3a:	42a1      	cmp	r1, r4
 800ce3c:	d008      	beq.n	800ce50 <memmove+0x28>
 800ce3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce46:	e7f8      	b.n	800ce3a <memmove+0x12>
 800ce48:	4601      	mov	r1, r0
 800ce4a:	4402      	add	r2, r0
 800ce4c:	428a      	cmp	r2, r1
 800ce4e:	d100      	bne.n	800ce52 <memmove+0x2a>
 800ce50:	bd10      	pop	{r4, pc}
 800ce52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce5a:	e7f7      	b.n	800ce4c <memmove+0x24>

0800ce5c <__malloc_lock>:
 800ce5c:	4801      	ldr	r0, [pc, #4]	; (800ce64 <__malloc_lock+0x8>)
 800ce5e:	f7ff b87a 	b.w	800bf56 <__retarget_lock_acquire_recursive>
 800ce62:	bf00      	nop
 800ce64:	200034a4 	.word	0x200034a4

0800ce68 <__malloc_unlock>:
 800ce68:	4801      	ldr	r0, [pc, #4]	; (800ce70 <__malloc_unlock+0x8>)
 800ce6a:	f7ff b875 	b.w	800bf58 <__retarget_lock_release_recursive>
 800ce6e:	bf00      	nop
 800ce70:	200034a4 	.word	0x200034a4

0800ce74 <_realloc_r>:
 800ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce78:	4680      	mov	r8, r0
 800ce7a:	4614      	mov	r4, r2
 800ce7c:	460e      	mov	r6, r1
 800ce7e:	b921      	cbnz	r1, 800ce8a <_realloc_r+0x16>
 800ce80:	4611      	mov	r1, r2
 800ce82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce86:	f7ff b907 	b.w	800c098 <_malloc_r>
 800ce8a:	b92a      	cbnz	r2, 800ce98 <_realloc_r+0x24>
 800ce8c:	f7ff f89c 	bl	800bfc8 <_free_r>
 800ce90:	4625      	mov	r5, r4
 800ce92:	4628      	mov	r0, r5
 800ce94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce98:	f000 fa10 	bl	800d2bc <_malloc_usable_size_r>
 800ce9c:	4284      	cmp	r4, r0
 800ce9e:	4607      	mov	r7, r0
 800cea0:	d802      	bhi.n	800cea8 <_realloc_r+0x34>
 800cea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cea6:	d812      	bhi.n	800cece <_realloc_r+0x5a>
 800cea8:	4621      	mov	r1, r4
 800ceaa:	4640      	mov	r0, r8
 800ceac:	f7ff f8f4 	bl	800c098 <_malloc_r>
 800ceb0:	4605      	mov	r5, r0
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d0ed      	beq.n	800ce92 <_realloc_r+0x1e>
 800ceb6:	42bc      	cmp	r4, r7
 800ceb8:	4622      	mov	r2, r4
 800ceba:	4631      	mov	r1, r6
 800cebc:	bf28      	it	cs
 800cebe:	463a      	movcs	r2, r7
 800cec0:	f7ff f86c 	bl	800bf9c <memcpy>
 800cec4:	4631      	mov	r1, r6
 800cec6:	4640      	mov	r0, r8
 800cec8:	f7ff f87e 	bl	800bfc8 <_free_r>
 800cecc:	e7e1      	b.n	800ce92 <_realloc_r+0x1e>
 800cece:	4635      	mov	r5, r6
 800ced0:	e7df      	b.n	800ce92 <_realloc_r+0x1e>

0800ced2 <__ssputs_r>:
 800ced2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced6:	688e      	ldr	r6, [r1, #8]
 800ced8:	4682      	mov	sl, r0
 800ceda:	429e      	cmp	r6, r3
 800cedc:	460c      	mov	r4, r1
 800cede:	4690      	mov	r8, r2
 800cee0:	461f      	mov	r7, r3
 800cee2:	d838      	bhi.n	800cf56 <__ssputs_r+0x84>
 800cee4:	898a      	ldrh	r2, [r1, #12]
 800cee6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ceea:	d032      	beq.n	800cf52 <__ssputs_r+0x80>
 800ceec:	6825      	ldr	r5, [r4, #0]
 800ceee:	6909      	ldr	r1, [r1, #16]
 800cef0:	3301      	adds	r3, #1
 800cef2:	eba5 0901 	sub.w	r9, r5, r1
 800cef6:	6965      	ldr	r5, [r4, #20]
 800cef8:	444b      	add	r3, r9
 800cefa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cefe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf02:	106d      	asrs	r5, r5, #1
 800cf04:	429d      	cmp	r5, r3
 800cf06:	bf38      	it	cc
 800cf08:	461d      	movcc	r5, r3
 800cf0a:	0553      	lsls	r3, r2, #21
 800cf0c:	d531      	bpl.n	800cf72 <__ssputs_r+0xa0>
 800cf0e:	4629      	mov	r1, r5
 800cf10:	f7ff f8c2 	bl	800c098 <_malloc_r>
 800cf14:	4606      	mov	r6, r0
 800cf16:	b950      	cbnz	r0, 800cf2e <__ssputs_r+0x5c>
 800cf18:	230c      	movs	r3, #12
 800cf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1e:	f8ca 3000 	str.w	r3, [sl]
 800cf22:	89a3      	ldrh	r3, [r4, #12]
 800cf24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf28:	81a3      	strh	r3, [r4, #12]
 800cf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2e:	464a      	mov	r2, r9
 800cf30:	6921      	ldr	r1, [r4, #16]
 800cf32:	f7ff f833 	bl	800bf9c <memcpy>
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf40:	81a3      	strh	r3, [r4, #12]
 800cf42:	6126      	str	r6, [r4, #16]
 800cf44:	444e      	add	r6, r9
 800cf46:	6026      	str	r6, [r4, #0]
 800cf48:	463e      	mov	r6, r7
 800cf4a:	6165      	str	r5, [r4, #20]
 800cf4c:	eba5 0509 	sub.w	r5, r5, r9
 800cf50:	60a5      	str	r5, [r4, #8]
 800cf52:	42be      	cmp	r6, r7
 800cf54:	d900      	bls.n	800cf58 <__ssputs_r+0x86>
 800cf56:	463e      	mov	r6, r7
 800cf58:	4632      	mov	r2, r6
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	6820      	ldr	r0, [r4, #0]
 800cf5e:	f7ff ff63 	bl	800ce28 <memmove>
 800cf62:	68a3      	ldr	r3, [r4, #8]
 800cf64:	2000      	movs	r0, #0
 800cf66:	1b9b      	subs	r3, r3, r6
 800cf68:	60a3      	str	r3, [r4, #8]
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	4433      	add	r3, r6
 800cf6e:	6023      	str	r3, [r4, #0]
 800cf70:	e7db      	b.n	800cf2a <__ssputs_r+0x58>
 800cf72:	462a      	mov	r2, r5
 800cf74:	f7ff ff7e 	bl	800ce74 <_realloc_r>
 800cf78:	4606      	mov	r6, r0
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d1e1      	bne.n	800cf42 <__ssputs_r+0x70>
 800cf7e:	4650      	mov	r0, sl
 800cf80:	6921      	ldr	r1, [r4, #16]
 800cf82:	f7ff f821 	bl	800bfc8 <_free_r>
 800cf86:	e7c7      	b.n	800cf18 <__ssputs_r+0x46>

0800cf88 <_svfiprintf_r>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	4698      	mov	r8, r3
 800cf8e:	898b      	ldrh	r3, [r1, #12]
 800cf90:	4607      	mov	r7, r0
 800cf92:	061b      	lsls	r3, r3, #24
 800cf94:	460d      	mov	r5, r1
 800cf96:	4614      	mov	r4, r2
 800cf98:	b09d      	sub	sp, #116	; 0x74
 800cf9a:	d50e      	bpl.n	800cfba <_svfiprintf_r+0x32>
 800cf9c:	690b      	ldr	r3, [r1, #16]
 800cf9e:	b963      	cbnz	r3, 800cfba <_svfiprintf_r+0x32>
 800cfa0:	2140      	movs	r1, #64	; 0x40
 800cfa2:	f7ff f879 	bl	800c098 <_malloc_r>
 800cfa6:	6028      	str	r0, [r5, #0]
 800cfa8:	6128      	str	r0, [r5, #16]
 800cfaa:	b920      	cbnz	r0, 800cfb6 <_svfiprintf_r+0x2e>
 800cfac:	230c      	movs	r3, #12
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	e0d1      	b.n	800d15a <_svfiprintf_r+0x1d2>
 800cfb6:	2340      	movs	r3, #64	; 0x40
 800cfb8:	616b      	str	r3, [r5, #20]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cfbe:	2320      	movs	r3, #32
 800cfc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfc4:	2330      	movs	r3, #48	; 0x30
 800cfc6:	f04f 0901 	mov.w	r9, #1
 800cfca:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d174 <_svfiprintf_r+0x1ec>
 800cfd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfd6:	4623      	mov	r3, r4
 800cfd8:	469a      	mov	sl, r3
 800cfda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfde:	b10a      	cbz	r2, 800cfe4 <_svfiprintf_r+0x5c>
 800cfe0:	2a25      	cmp	r2, #37	; 0x25
 800cfe2:	d1f9      	bne.n	800cfd8 <_svfiprintf_r+0x50>
 800cfe4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfe8:	d00b      	beq.n	800d002 <_svfiprintf_r+0x7a>
 800cfea:	465b      	mov	r3, fp
 800cfec:	4622      	mov	r2, r4
 800cfee:	4629      	mov	r1, r5
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7ff ff6e 	bl	800ced2 <__ssputs_r>
 800cff6:	3001      	adds	r0, #1
 800cff8:	f000 80aa 	beq.w	800d150 <_svfiprintf_r+0x1c8>
 800cffc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cffe:	445a      	add	r2, fp
 800d000:	9209      	str	r2, [sp, #36]	; 0x24
 800d002:	f89a 3000 	ldrb.w	r3, [sl]
 800d006:	2b00      	cmp	r3, #0
 800d008:	f000 80a2 	beq.w	800d150 <_svfiprintf_r+0x1c8>
 800d00c:	2300      	movs	r3, #0
 800d00e:	f04f 32ff 	mov.w	r2, #4294967295
 800d012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d016:	f10a 0a01 	add.w	sl, sl, #1
 800d01a:	9304      	str	r3, [sp, #16]
 800d01c:	9307      	str	r3, [sp, #28]
 800d01e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d022:	931a      	str	r3, [sp, #104]	; 0x68
 800d024:	4654      	mov	r4, sl
 800d026:	2205      	movs	r2, #5
 800d028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d02c:	4851      	ldr	r0, [pc, #324]	; (800d174 <_svfiprintf_r+0x1ec>)
 800d02e:	f7ff feed 	bl	800ce0c <memchr>
 800d032:	9a04      	ldr	r2, [sp, #16]
 800d034:	b9d8      	cbnz	r0, 800d06e <_svfiprintf_r+0xe6>
 800d036:	06d0      	lsls	r0, r2, #27
 800d038:	bf44      	itt	mi
 800d03a:	2320      	movmi	r3, #32
 800d03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d040:	0711      	lsls	r1, r2, #28
 800d042:	bf44      	itt	mi
 800d044:	232b      	movmi	r3, #43	; 0x2b
 800d046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d04a:	f89a 3000 	ldrb.w	r3, [sl]
 800d04e:	2b2a      	cmp	r3, #42	; 0x2a
 800d050:	d015      	beq.n	800d07e <_svfiprintf_r+0xf6>
 800d052:	4654      	mov	r4, sl
 800d054:	2000      	movs	r0, #0
 800d056:	f04f 0c0a 	mov.w	ip, #10
 800d05a:	9a07      	ldr	r2, [sp, #28]
 800d05c:	4621      	mov	r1, r4
 800d05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d062:	3b30      	subs	r3, #48	; 0x30
 800d064:	2b09      	cmp	r3, #9
 800d066:	d94e      	bls.n	800d106 <_svfiprintf_r+0x17e>
 800d068:	b1b0      	cbz	r0, 800d098 <_svfiprintf_r+0x110>
 800d06a:	9207      	str	r2, [sp, #28]
 800d06c:	e014      	b.n	800d098 <_svfiprintf_r+0x110>
 800d06e:	eba0 0308 	sub.w	r3, r0, r8
 800d072:	fa09 f303 	lsl.w	r3, r9, r3
 800d076:	4313      	orrs	r3, r2
 800d078:	46a2      	mov	sl, r4
 800d07a:	9304      	str	r3, [sp, #16]
 800d07c:	e7d2      	b.n	800d024 <_svfiprintf_r+0x9c>
 800d07e:	9b03      	ldr	r3, [sp, #12]
 800d080:	1d19      	adds	r1, r3, #4
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	9103      	str	r1, [sp, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	bfbb      	ittet	lt
 800d08a:	425b      	neglt	r3, r3
 800d08c:	f042 0202 	orrlt.w	r2, r2, #2
 800d090:	9307      	strge	r3, [sp, #28]
 800d092:	9307      	strlt	r3, [sp, #28]
 800d094:	bfb8      	it	lt
 800d096:	9204      	strlt	r2, [sp, #16]
 800d098:	7823      	ldrb	r3, [r4, #0]
 800d09a:	2b2e      	cmp	r3, #46	; 0x2e
 800d09c:	d10c      	bne.n	800d0b8 <_svfiprintf_r+0x130>
 800d09e:	7863      	ldrb	r3, [r4, #1]
 800d0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0a2:	d135      	bne.n	800d110 <_svfiprintf_r+0x188>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	3402      	adds	r4, #2
 800d0a8:	1d1a      	adds	r2, r3, #4
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	9203      	str	r2, [sp, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	bfb8      	it	lt
 800d0b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0b6:	9305      	str	r3, [sp, #20]
 800d0b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d178 <_svfiprintf_r+0x1f0>
 800d0bc:	2203      	movs	r2, #3
 800d0be:	4650      	mov	r0, sl
 800d0c0:	7821      	ldrb	r1, [r4, #0]
 800d0c2:	f7ff fea3 	bl	800ce0c <memchr>
 800d0c6:	b140      	cbz	r0, 800d0da <_svfiprintf_r+0x152>
 800d0c8:	2340      	movs	r3, #64	; 0x40
 800d0ca:	eba0 000a 	sub.w	r0, r0, sl
 800d0ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d0d2:	9b04      	ldr	r3, [sp, #16]
 800d0d4:	3401      	adds	r4, #1
 800d0d6:	4303      	orrs	r3, r0
 800d0d8:	9304      	str	r3, [sp, #16]
 800d0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0de:	2206      	movs	r2, #6
 800d0e0:	4826      	ldr	r0, [pc, #152]	; (800d17c <_svfiprintf_r+0x1f4>)
 800d0e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0e6:	f7ff fe91 	bl	800ce0c <memchr>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d038      	beq.n	800d160 <_svfiprintf_r+0x1d8>
 800d0ee:	4b24      	ldr	r3, [pc, #144]	; (800d180 <_svfiprintf_r+0x1f8>)
 800d0f0:	bb1b      	cbnz	r3, 800d13a <_svfiprintf_r+0x1b2>
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	3307      	adds	r3, #7
 800d0f6:	f023 0307 	bic.w	r3, r3, #7
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	9303      	str	r3, [sp, #12]
 800d0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d100:	4433      	add	r3, r6
 800d102:	9309      	str	r3, [sp, #36]	; 0x24
 800d104:	e767      	b.n	800cfd6 <_svfiprintf_r+0x4e>
 800d106:	460c      	mov	r4, r1
 800d108:	2001      	movs	r0, #1
 800d10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10e:	e7a5      	b.n	800d05c <_svfiprintf_r+0xd4>
 800d110:	2300      	movs	r3, #0
 800d112:	f04f 0c0a 	mov.w	ip, #10
 800d116:	4619      	mov	r1, r3
 800d118:	3401      	adds	r4, #1
 800d11a:	9305      	str	r3, [sp, #20]
 800d11c:	4620      	mov	r0, r4
 800d11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d122:	3a30      	subs	r2, #48	; 0x30
 800d124:	2a09      	cmp	r2, #9
 800d126:	d903      	bls.n	800d130 <_svfiprintf_r+0x1a8>
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d0c5      	beq.n	800d0b8 <_svfiprintf_r+0x130>
 800d12c:	9105      	str	r1, [sp, #20]
 800d12e:	e7c3      	b.n	800d0b8 <_svfiprintf_r+0x130>
 800d130:	4604      	mov	r4, r0
 800d132:	2301      	movs	r3, #1
 800d134:	fb0c 2101 	mla	r1, ip, r1, r2
 800d138:	e7f0      	b.n	800d11c <_svfiprintf_r+0x194>
 800d13a:	ab03      	add	r3, sp, #12
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	462a      	mov	r2, r5
 800d140:	4638      	mov	r0, r7
 800d142:	4b10      	ldr	r3, [pc, #64]	; (800d184 <_svfiprintf_r+0x1fc>)
 800d144:	a904      	add	r1, sp, #16
 800d146:	f3af 8000 	nop.w
 800d14a:	1c42      	adds	r2, r0, #1
 800d14c:	4606      	mov	r6, r0
 800d14e:	d1d6      	bne.n	800d0fe <_svfiprintf_r+0x176>
 800d150:	89ab      	ldrh	r3, [r5, #12]
 800d152:	065b      	lsls	r3, r3, #25
 800d154:	f53f af2c 	bmi.w	800cfb0 <_svfiprintf_r+0x28>
 800d158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d15a:	b01d      	add	sp, #116	; 0x74
 800d15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d160:	ab03      	add	r3, sp, #12
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	462a      	mov	r2, r5
 800d166:	4638      	mov	r0, r7
 800d168:	4b06      	ldr	r3, [pc, #24]	; (800d184 <_svfiprintf_r+0x1fc>)
 800d16a:	a904      	add	r1, sp, #16
 800d16c:	f7ff f9d0 	bl	800c510 <_printf_i>
 800d170:	e7eb      	b.n	800d14a <_svfiprintf_r+0x1c2>
 800d172:	bf00      	nop
 800d174:	08010894 	.word	0x08010894
 800d178:	0801089a 	.word	0x0801089a
 800d17c:	0801089e 	.word	0x0801089e
 800d180:	00000000 	.word	0x00000000
 800d184:	0800ced3 	.word	0x0800ced3

0800d188 <__sread>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	460c      	mov	r4, r1
 800d18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d190:	f000 f89c 	bl	800d2cc <_read_r>
 800d194:	2800      	cmp	r0, #0
 800d196:	bfab      	itete	ge
 800d198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d19a:	89a3      	ldrhlt	r3, [r4, #12]
 800d19c:	181b      	addge	r3, r3, r0
 800d19e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1a2:	bfac      	ite	ge
 800d1a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1a6:	81a3      	strhlt	r3, [r4, #12]
 800d1a8:	bd10      	pop	{r4, pc}

0800d1aa <__swrite>:
 800d1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ae:	461f      	mov	r7, r3
 800d1b0:	898b      	ldrh	r3, [r1, #12]
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	05db      	lsls	r3, r3, #23
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	4616      	mov	r6, r2
 800d1ba:	d505      	bpl.n	800d1c8 <__swrite+0x1e>
 800d1bc:	2302      	movs	r3, #2
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c4:	f000 f868 	bl	800d298 <_lseek_r>
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	4632      	mov	r2, r6
 800d1cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1d0:	81a3      	strh	r3, [r4, #12]
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	463b      	mov	r3, r7
 800d1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1de:	f000 b817 	b.w	800d210 <_write_r>

0800d1e2 <__sseek>:
 800d1e2:	b510      	push	{r4, lr}
 800d1e4:	460c      	mov	r4, r1
 800d1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ea:	f000 f855 	bl	800d298 <_lseek_r>
 800d1ee:	1c43      	adds	r3, r0, #1
 800d1f0:	89a3      	ldrh	r3, [r4, #12]
 800d1f2:	bf15      	itete	ne
 800d1f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1fe:	81a3      	strheq	r3, [r4, #12]
 800d200:	bf18      	it	ne
 800d202:	81a3      	strhne	r3, [r4, #12]
 800d204:	bd10      	pop	{r4, pc}

0800d206 <__sclose>:
 800d206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d20a:	f000 b813 	b.w	800d234 <_close_r>
	...

0800d210 <_write_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4604      	mov	r4, r0
 800d214:	4608      	mov	r0, r1
 800d216:	4611      	mov	r1, r2
 800d218:	2200      	movs	r2, #0
 800d21a:	4d05      	ldr	r5, [pc, #20]	; (800d230 <_write_r+0x20>)
 800d21c:	602a      	str	r2, [r5, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	f7f7 fbe5 	bl	80049ee <_write>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_write_r+0x1e>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_write_r+0x1e>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	200034b0 	.word	0x200034b0

0800d234 <_close_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	2300      	movs	r3, #0
 800d238:	4d05      	ldr	r5, [pc, #20]	; (800d250 <_close_r+0x1c>)
 800d23a:	4604      	mov	r4, r0
 800d23c:	4608      	mov	r0, r1
 800d23e:	602b      	str	r3, [r5, #0]
 800d240:	f7f7 fbf1 	bl	8004a26 <_close>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_close_r+0x1a>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_close_r+0x1a>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	200034b0 	.word	0x200034b0

0800d254 <_fstat_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	2300      	movs	r3, #0
 800d258:	4d06      	ldr	r5, [pc, #24]	; (800d274 <_fstat_r+0x20>)
 800d25a:	4604      	mov	r4, r0
 800d25c:	4608      	mov	r0, r1
 800d25e:	4611      	mov	r1, r2
 800d260:	602b      	str	r3, [r5, #0]
 800d262:	f7f7 fbeb 	bl	8004a3c <_fstat>
 800d266:	1c43      	adds	r3, r0, #1
 800d268:	d102      	bne.n	800d270 <_fstat_r+0x1c>
 800d26a:	682b      	ldr	r3, [r5, #0]
 800d26c:	b103      	cbz	r3, 800d270 <_fstat_r+0x1c>
 800d26e:	6023      	str	r3, [r4, #0]
 800d270:	bd38      	pop	{r3, r4, r5, pc}
 800d272:	bf00      	nop
 800d274:	200034b0 	.word	0x200034b0

0800d278 <_isatty_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	2300      	movs	r3, #0
 800d27c:	4d05      	ldr	r5, [pc, #20]	; (800d294 <_isatty_r+0x1c>)
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	602b      	str	r3, [r5, #0]
 800d284:	f7f7 fbe9 	bl	8004a5a <_isatty>
 800d288:	1c43      	adds	r3, r0, #1
 800d28a:	d102      	bne.n	800d292 <_isatty_r+0x1a>
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	b103      	cbz	r3, 800d292 <_isatty_r+0x1a>
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	bd38      	pop	{r3, r4, r5, pc}
 800d294:	200034b0 	.word	0x200034b0

0800d298 <_lseek_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	4611      	mov	r1, r2
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	4d05      	ldr	r5, [pc, #20]	; (800d2b8 <_lseek_r+0x20>)
 800d2a4:	602a      	str	r2, [r5, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f7f7 fbe1 	bl	8004a6e <_lseek>
 800d2ac:	1c43      	adds	r3, r0, #1
 800d2ae:	d102      	bne.n	800d2b6 <_lseek_r+0x1e>
 800d2b0:	682b      	ldr	r3, [r5, #0]
 800d2b2:	b103      	cbz	r3, 800d2b6 <_lseek_r+0x1e>
 800d2b4:	6023      	str	r3, [r4, #0]
 800d2b6:	bd38      	pop	{r3, r4, r5, pc}
 800d2b8:	200034b0 	.word	0x200034b0

0800d2bc <_malloc_usable_size_r>:
 800d2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2c0:	1f18      	subs	r0, r3, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bfbc      	itt	lt
 800d2c6:	580b      	ldrlt	r3, [r1, r0]
 800d2c8:	18c0      	addlt	r0, r0, r3
 800d2ca:	4770      	bx	lr

0800d2cc <_read_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	4d05      	ldr	r5, [pc, #20]	; (800d2ec <_read_r+0x20>)
 800d2d8:	602a      	str	r2, [r5, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f7f7 fb6a 	bl	80049b4 <_read>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_read_r+0x1e>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_read_r+0x1e>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	200034b0 	.word	0x200034b0

0800d2f0 <_init>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	bf00      	nop
 800d2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2f6:	bc08      	pop	{r3}
 800d2f8:	469e      	mov	lr, r3
 800d2fa:	4770      	bx	lr

0800d2fc <_fini>:
 800d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fe:	bf00      	nop
 800d300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d302:	bc08      	pop	{r3}
 800d304:	469e      	mov	lr, r3
 800d306:	4770      	bx	lr
